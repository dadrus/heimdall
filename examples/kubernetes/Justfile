grafana_version := '2.7.15'
prometheus_version := '44.2.1'
loki_version := '2.8.9'
tempo_version := '0.16.8'
phlare_version := '0.1.2'
nginx_version := '9.7.7'
contour_version := '12.2.4'
metallb_version := '0.13.10'
certmanager_version := '1.12.3'

kind_base_domain := '127.0.0.1.nip.io'
cluster_name := 'demo-cluster'
default_ingress_controller := "contour"

setup-charts:
  helm repo add bitnami https://charts.bitnami.com/bitnami
  helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
  helm repo add grafana https://grafana.github.io/helm-charts
  helm repo add metallb https://metallb.github.io/metallb
  helm repo add jetstack https://charts.jetstack.io
  helm repo add dadrus https://dadrus.github.io/heimdall/charts
  helm repo update

## Installs Grafana
install-grafana base_host=kind_base_domain: setup-charts
  #!/usr/bin/env bash
  helm upgrade --install grafana bitnami/grafana-operator \
    -n monitoring --create-namespace \
    --set grafana.ingress.hostname="grafana.{{base_host}}" \
    --set grafana.config.server.root_url="https://grafana.{{base_host}}" \
    --values grafana/helm-values.yaml \
    --version {{grafana_version}} \
    --wait
  while : ; do
    kubectl rollout -n monitoring status deployment grafana-deployment && break
    sleep 2
  done


# Installs Prometheus
install-prometheus: setup-charts
  helm upgrade --install prometheus prometheus-community/kube-prometheus-stack \
    -n monitoring --create-namespace \
    --set grafana.enabled=false \
    --version {{prometheus_version}} \
    --wait
  kubectl apply -f grafana/data-sources/prometheus.yaml

# Installs Loki
install-loki: setup-charts
  helm upgrade --install loki grafana/loki-stack \
    -n monitoring --create-namespace \
    --version {{loki_version}} \
    --set grafana.enabled=false \
    --wait
  kubectl apply -f grafana/data-sources/loki.yaml

# Installs Tempo
install-tempo: setup-charts
  helm upgrade --install tempo grafana/tempo \
    -n monitoring --create-namespace \
    --set tempo.searchEnabled=true \
    --version {{tempo_version}} \
    --wait
  kubectl apply -f grafana/data-sources/tempo.yaml

# Installs Phlareheimdall
install-phlare: setup-charts
  helm upgrade --install phlare grafana/phlare \
   -n monitoring --create-namespace \
   --version {{phlare_version}} \
   --wait
  kubectl apply -f grafana/data-sources/phlare.yaml

install-dashboards:
  #!/usr/bin/env bash
  for f in grafana/dashboards/*.yaml ; do
    kubectl apply -f $f
  done

install-observability-stack: install-grafana install-prometheus install-loki install-tempo install-phlare install-dashboards

install-nginx-ingress-controller:
  helm upgrade --install nginx-ingress-controller bitnami/nginx-ingress-controller \
    -n nginx-ingress-controller --create-namespace \
    --version {{nginx_version}} \
    --wait

install-contour-ingress-controller:
  helm upgrade --install contour-ingress-controller bitnami/contour \
    -n projectcontour --create-namespace \
    --version {{contour_version}} \
    --wait

install-lb:
  #!/usr/bin/env bash
  helm upgrade --install metallb metallb/metallb \
    -n metallb-system --create-namespace \
    --version {{metallb_version}} \
    --wait

  ./configure-metallb.sh

install-cert-manager:
  #!/usr/bin/env bash
  kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v{{certmanager_version}}/cert-manager.crds.yaml

  helm upgrade --install cert-manager jetstack/cert-manager \
    -n cert-manager --create-namespace \
    --version {{certmanager_version}} \
    --set installCRDs=false \
    --set featureGates='AdditionalCertificateOutputFormats=true' \
    --wait

  kubectl apply -n cert-manager -f - <<EOF
  apiVersion: cert-manager.io/v1
  kind: ClusterIssuer
  metadata:
    name: selfsigned
  spec:
    selfSigned: {}
  EOF

install-echo-service ingress_controller=default_ingress_controller:
  kustomize build quickstarts/overlays/{{ingress_controller}}-ingress | kubectl apply -f -

install-heimdall ingress_controller=default_ingress_controller:
  #!/usr/bin/env bash
  kubectl create namespace heimdall
  kubectl apply -f quickstarts/heimdall-certificate.yaml

  extraArgs='extraArgs={}'
  if [ "{{ingress_controller}}" == "contour" ]; then
    extraArgs='extraArgs={--envoy-grpc}'
  fi

  helm upgrade --install heimdall  dadrus/heimdall \
    -n heimdall \
    -f quickstarts/heimdall-config.yaml \
    -f quickstarts/heimdall-values.yaml \
    --set "${extraArgs}" \
    --wait

  if [ "{{ingress_controller}}" == "contour" ]; then
      kubectl apply -f quickstarts/heimdall-extension-service.yaml
  fi

create-cluster:
  kind create cluster --config kind/kind.yaml --name {{cluster_name}}

setup-cluster: create-cluster setup-charts install-lb install-cert-manager

install-ngnix-demo: setup-cluster install-nginx-ingress-controller (install-heimdall "nginx") (install-echo-service "nginx")

install-contour-demo: setup-cluster install-contour-ingress-controller (install-heimdall "contour") (install-echo-service "contour")

delete-cluster:
  kind delete clusters {{cluster_name}}

