grafana_version := '2.7.15'
prometheus_version := '44.2.1'
loki_version := '2.8.9'
tempo_version := '0.16.8'
phlare_version := '0.1.2'
nginx_version := '9.7.7'
contour_version := '12.2.4'
emissary_version := '8.7.2'
haproxy_version := '0.14.4'
metallb_version := '0.13.10'
certmanager_version := '1.12.3'

cluster_name := 'demo-cluster'
default_ingress_controller := "contour"

setup-charts:
  helm repo add bitnami https://charts.bitnami.com/bitnami
  helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
  helm repo add grafana https://grafana.github.io/helm-charts
  helm repo add metallb https://metallb.github.io/metallb
  helm repo add jetstack https://charts.jetstack.io
  helm repo add dadrus https://dadrus.github.io/heimdall/charts
  helm repo add datawire https://app.getambassador.io
  helm repo add haproxy-ingress https://haproxy-ingress.github.io/charts
  helm repo update

## Installs Grafana
install-grafana: setup-charts
  #!/usr/bin/env bash
  lb_address=$(kubectl get svc -A -o json | jq -r '.items[] | select(.spec.type == "LoadBalancer").status.loadBalancer.ingress[0].ip')

  helm upgrade --install grafana bitnami/grafana-operator \
    -n monitoring --create-namespace \
    --set grafana.ingress.hostname="grafana.${lb_address}.nip.io" \
    --set grafana.config.server.root_url="https://grafana.${lb_address}.nip.io" \
    --values grafana/helm-values.yaml \
    --version {{grafana_version}} \
    --wait
  while : ; do
    kubectl rollout -n monitoring status deployment grafana-deployment && break
    sleep 2
  done


# Installs Prometheus
install-prometheus: setup-charts
  helm upgrade --install prometheus prometheus-community/kube-prometheus-stack \
    -n monitoring --create-namespace \
    --set grafana.enabled=false \
    --version {{prometheus_version}} \
    --wait
  kubectl apply -f grafana/data-sources/prometheus.yaml

# Installs Loki
install-loki: setup-charts
  helm upgrade --install loki grafana/loki-stack \
    -n monitoring --create-namespace \
    --version {{loki_version}} \
    --set grafana.enabled=false \
    --wait
  kubectl apply -f grafana/data-sources/loki.yaml

# Installs Tempo
install-tempo: setup-charts
  helm upgrade --install tempo grafana/tempo \
    -n monitoring --create-namespace \
    --set tempo.searchEnabled=true \
    --version {{tempo_version}} \
    --wait
  kubectl apply -f grafana/data-sources/tempo.yaml

# Installs Phlare
install-phlare: setup-charts
  helm upgrade --install phlare grafana/phlare \
   -n monitoring --create-namespace \
   --version {{phlare_version}} \
   --wait
  kubectl apply -f grafana/data-sources/phlare.yaml

install-dashboards:
  #!/usr/bin/env bash
  for f in grafana/dashboards/*.yaml ; do
    kubectl apply -f $f
  done

install-heimdall-pod-monitor:
  kubectl apply -f quickstarts/heimdall/pod_monitor.yaml

install-observability-stack: install-grafana install-prometheus install-loki install-tempo install-phlare install-dashboards install-heimdall-pod-monitor

install-nginx-ingress-controller:
  helm upgrade --install nginx-ingress-controller bitnami/nginx-ingress-controller \
    -n nginx-ingress-controller --create-namespace \
    --version {{nginx_version}} \
    --set metrics.enabled=true \
    --wait

install-contour-ingress-controller:
  helm upgrade --install contour-ingress-controller bitnami/contour \
    -n contour-ingress-controller --create-namespace \
    --version {{contour_version}} \
    --wait

install-emissary-ingress-controller:
  #!/usr/bin/env bash
  app_version=$(helm search repo emissary --version {{emissary_version}} -o json | jq -r '.[0].app_version')
  kubectl apply -f https://app.getambassador.io/yaml/emissary/${app_version}/emissary-crds.yaml
  kubectl wait --timeout=90s --for=condition=available deployment emissary-apiext -n emissary-system

  helm upgrade --install emissary-ingress datawire/emissary-ingress \
    -n emissary-ingress-controller --create-namespace \
    --version {{emissary_version}}

  kubectl -n emissary-ingress-controller wait --for condition=available --timeout=90s deploy -lapp.kubernetes.io/instance=emissary-ingress

  kubectl apply -f - <<EOF
  apiVersion: getambassador.io/v3alpha1
  kind: Listener
  metadata:
    name: emissary-tls-ingress-listener
    namespace: emissary-ingress-controller
  spec:
    port: 8443
    protocol: HTTPS
    securityModel: XFP
    hostBinding:
      namespace:
        from: ALL
  EOF


install-haproxy-ingress-controller:
  helm install haproxy-ingress-controller haproxy-ingress/haproxy-ingress \
    -n haproxy-ingress-controller --create-namespace \
    --version {{haproxy_version}} \
    --set controller.ingressClassResource.enabled=true \
    --wait

install-lb:
  #!/usr/bin/env bash
  helm upgrade --install metallb metallb/metallb \
    -n metallb-system --create-namespace \
    --version {{metallb_version}} \
    --wait

  ./metallb/configure.sh

install-cert-manager:
  #!/usr/bin/env bash
  kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v{{certmanager_version}}/cert-manager.crds.yaml

  helm upgrade --install cert-manager jetstack/cert-manager \
    -n cert-manager --create-namespace \
    --version {{certmanager_version}} \
    --set installCRDs=false \
    --set featureGates='AdditionalCertificateOutputFormats=true' \
    --wait

  kubectl apply -n cert-manager -f - <<EOF
  apiVersion: cert-manager.io/v1
  kind: ClusterIssuer
  metadata:
    name: selfsigned
  spec:
    selfSigned: {}
  EOF

install-echo-service ingress_controller=default_ingress_controller:
  kustomize build quickstarts/demo-app/overlays/{{ingress_controller}}-ingress | kubectl apply -f -

install-echo-service-with-proxy:
  kustomize build quickstarts/proxy-demo/ | kubectl apply -f -

install-heimdall ingress_controller=default_ingress_controller:
  #!/usr/bin/env bash
  kubectl create namespace heimdall
  kubectl apply -f quickstarts/heimdall/certificate.yaml

  extraArgs='extraArgs={}'
  if [[ "{{ingress_controller}}" == "contour" || "{{ingress_controller}}" == "emissary" ]]; then
    extraArgs='extraArgs={--envoy-grpc}'
  fi

  helm upgrade --install heimdall dadrus/heimdall \
    -n heimdall \
    -f quickstarts/heimdall/config.yaml \
    -f quickstarts/heimdall/helm-values.yaml \
    --set "${extraArgs}" \
    --wait

  if [ "{{ingress_controller}}" == "contour" ]; then
      kubectl apply -f quickstarts/heimdall/contour-extension-service.yaml
  elif [ "{{ingress_controller}}" == "emissary" ]; then
      kubectl apply -f quickstarts/heimdall/emissary-auth-service.yaml
  fi

create-cluster:
  kind create cluster --config kind/kind.yaml --name {{cluster_name}}

setup-cluster: create-cluster setup-charts install-lb install-cert-manager

install-ngnix-decision-demo: setup-cluster install-nginx-ingress-controller (install-heimdall "nginx") (install-echo-service "nginx")

install-contour-decision-demo: setup-cluster install-contour-ingress-controller (install-heimdall "contour") (install-echo-service "contour")

install-haproxy-decision-demo: setup-cluster install-haproxy-ingress-controller (install-heimdall "haproxy") (install-echo-service "haproxy")

install-emissary-decision-demo: setup-cluster install-emissary-ingress-controller (install-heimdall "emissary") (install-echo-service "emissary")

delete-cluster:
  kind delete clusters {{cluster_name}}

