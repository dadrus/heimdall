name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  GO_VERSION: 1.19
  GOLANGCI_LINT_VERSION: v1.50.1
  HELM_VERSION: 3.10.0
  KUBECONFORM_VERSION: 0.5.0
  KUBERNETES_API_VERSION: 1.23.0
  DOCUMENTATION_URL: https://dadrus.github.io/heimdall/

jobs:
  check-licenses:
    runs-on: ubuntu-22.04
    steps:
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Get google/go-licenses package
        run: go install github.com/google/go-licenses@latest
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Check the licenses
        run: go-licenses check --include_tests --disallowed_types=forbidden,restricted,reciprocal,permissive,unknown --ignore=github.com/instana/go-otel-exporter .

  lint-code:
    runs-on: ubuntu-22.04
    steps:
    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: ${{ env.GO_VERSION }}
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: ${{ env.GOLANGCI_LINT_VERSION }}
        args: --timeout 4m

  lint-api:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 17.7
      - name: Install Redocly CLI
        run: npm i -g @redocly/cli@1.0.0-beta.108
      - name: Run Redocly Lint
        run: redocly lint

  lint-dockerfiles:
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Run hadolint for Dockerfile
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: docker/Dockerfile
    - name: Run hadolint for debug.Dockerfile
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: docker/debug.Dockerfile

  lint-helm-chart:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup k8s tools
        uses: yokawasa/action-setup-kube-tools@v0.9.2
        with:
          setup-tools: |
            helm
            kubeconform
          helm: '${{ env.HELM_VERSION }}'
          kubeconform: '${{ env.KUBECONFORM_VERSION }}'
      - name: Helm Lint
        run: helm lint ./charts/heimdall
      - name: Kubeconform decision mode deployment
        run: |
          helm template --set demo.enabled=true ./charts/heimdall > decision-demo.yaml
          kubeconform --skip RuleSet -kubernetes-version ${{ env.KUBERNETES_API_VERSION }} decision-demo.yaml
      - name: Kubeconform proxy mode deployment
        run: |
          helm template --set operationMode=proxy --set demo.enabled=true ./charts/heimdall > proxy-demo.yaml
          kubeconform --skip RuleSet -kubernetes-version ${{ env.KUBERNETES_API_VERSION }} decision-demo.yaml

  test:
    runs-on: ubuntu-22.04
    steps:
    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: ${{ env.GO_VERSION }}
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Test
      run: go test -v -coverprofile=coverage.cov -coverpkg=./... ./...
    - name: Code Coverage
      uses: codecov/codecov-action@v3
      with:
        files: coverage.cov
        verbose: true

  prepare-release:
    runs-on: ubuntu-22.04
    if: github.ref == 'refs/heads/main'
    outputs:
      release_created: ${{ steps.release_prepare.outputs.release_created }}
      tag_name: ${{ steps.release_prepare.outputs.tag_name }}
    steps:
      - name: Prepare Release
        id: release_prepare
        uses: google-github-actions/release-please-action@v3
        with:
          command: manifest
          token: ${{ secrets.GITHUB_TOKEN }}

  build-binaries:
    runs-on: ubuntu-22.04
    needs:
      - test
      - prepare-release
    if: always() && needs.prepare-release.outputs.release_created == false && needs.test.result == 'success'
    strategy:
      matrix:
        # build and publish in parallel: linux/amd64, linux/arm64, windows/amd64, darwin/amd64, darwin/arm64
        goos: [ linux, windows, darwin ]
        goarch: [ amd64, arm64, arm ]
        exclude:
          - goarch: arm
            goos: darwin
          - goarch: arm
            goos: windows
          - goarch: arm64
            goos: windows
    steps:
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Build
        run: CGO_ENABLED=0 GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -trimpath -ldflags="-buildid= -w -s -X github.com/dadrus/heimdall/version.Version=${{ github.sha }}" -o ./build/
      - uses: actions/upload-artifact@v3
        if: github.event_name != 'pull_request'
        with:
          name: build-result-${{ matrix.goos }}-${{ matrix.goarch }}
          path: ./build/*
          retention-days: 30

  release-binaries:
    runs-on: ubuntu-22.04
    needs:
      - prepare-release
    if: needs.prepare-release.outputs.release_created
    strategy:
      matrix:
        # build and publish in parallel: linux/amd64, linux/arm64, windows/amd64, darwin/amd64, darwin/arm64
        goos: [ linux, windows, darwin ]
        goarch: [ amd64, arm64, arm ]
        exclude:
          - goarch: arm
            goos: darwin
          - goarch: arm
            goos: windows
          - goarch: arm64
            goos: windows
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Build release binaries and upload them to the release
        uses: wangyoucao577/go-release-action@v1.35
        with:
          release_tag: ${{ needs.prepare-release.outputs.tag_name }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          pre_command: export CGO_ENABLED=0
          goversion: ${{ env.GO_VERSION }}
          goos: ${{ matrix.goos }}
          goarch: ${{ matrix.goarch }}
          ldflags: "-buildid= -w -s -X github.com/dadrus/heimdall/version.Version=${{ needs.prepare-release.outputs.tag_name }}"
          build_flags: -trimpath
          sha256sum: true
          md5sum: false
          extra_files: CHANGELOG.md LICENSE

  # this job is here only for the verification purpose of the docker images build
  build-docker-images:
    runs-on: ubuntu-22.04
    needs:
      - test
      - prepare-release
    if: always() && needs.prepare-release.outputs.release_created == false && needs.test.result == 'success'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./docker/Dockerfile
          platforms: linux/amd64,linux/arm64,linux/arm
          push: false
          build-args: VERSION=${{ github.sha }}
          tags: ${{ github.repository }}:latest

  release-docker-images:
    if: needs.prepare-release.outputs.release_created
    runs-on: ubuntu-22.04
    needs:
      - prepare-release
    steps:
      - name: Prepare image version
        id: image-version
        run: |
          export version=$(echo ${{ needs.prepare-release.outputs.tag_name }} |  sed 's/v//g')
          echo ::set-output name=result::$version
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Collect Docker meta-info
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ github.repository }}
          labels: |
            org.opencontainers.image.version=${{ steps.image-version.outputs.result }}
            org.opencontainers.image.documentation=${{ env.DOCUMENTATION_URL }}
      - name: Build and push images to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./docker/Dockerfile
          platforms: linux/amd64,linux/arm64,linux/arm
          push: true
          build-args: VERSION=${{ needs.prepare-release.outputs.tag_name }}
          labels: ${{ steps.meta.outputs.labels }}
          tags: ${{ github.repository }}:${{ steps.image-version.outputs.result }},${{ github.repository }}:latest
      - name: Update DockerHub repository description & readme
        uses: peter-evans/dockerhub-description@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: ${{ github.repository }}
          short-description: ${{ github.event.repository.description }}
          readme-filepath: ./DockerHub-README.md

  release-helm-chart:
    runs-on: ubuntu-22.04
    needs:
      - prepare-release
      - release-docker-images
    if: needs.prepare-release.outputs.release_created
    steps:
      - name: Prepare image version
        id: image-version
        run: |
          export version=$(echo ${{ needs.prepare-release.outputs.tag_name }} |  sed 's/v//g')
          echo ::set-output name=result::$version
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Publish Helm Chart
        uses: stefanprodan/helm-gh-pages@v1.7.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          target_dir: charts
          linting: off
          app_version: ${{ steps.image-version.outputs.result }}

  documentation:
    runs-on: ubuntu-22.04
    needs:
      - prepare-release
    if: always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: true  # Fetch Hugo themes (true OR recursive)
          fetch-depth: 0    # Fetch all history for .GitInfo and .Lastmod
      - name: Calculate diff of the docs
        uses: technote-space/get-diff-action@v6
        with:
          PATTERNS: |
            docs/**
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: 0.100.1
          extended: true
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 17.7
      - name: Setup ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.1.3
      - name: Install asciidoctor
        run: gem install asciidoctor asciidoctor-diagram asciidoctor-html5s rouge
      - name: Install dependencies
        working-directory: ./docs
        run: npm install
      - name: Update version string to new released version
        if: needs.prepare-release.outputs.release_created
        uses: jacobtomlinson/gha-find-replace@v2
        with:
          find: "x-current-version"
          replace: "${{ needs.prepare-release.outputs.tag_name }}"
          regex: false
          include: docs/**
      - name: Update version string to dev version
        if: github.ref == 'refs/heads/main' && needs.prepare-release.outputs.release_created == false && env.GIT_DIFF
        uses: jacobtomlinson/gha-find-replace@v2
        with:
          find: "x-current-version"
          replace: "dev"
          regex: false
          include: docs/**
      - name: Build documentation
        working-directory: ./docs
        run: npm run build
      - name: Update uri for redirecting to new version
        if: needs.prepare-release.outputs.release_created
        uses: jacobtomlinson/gha-find-replace@v2
        with:
          find: "x-released-version"
          replace: "${{ needs.prepare-release.outputs.tag_name }}"
          regex: false
          include: docs/**
      - name: Update versions JSON document
        id: update-version-json
        if: needs.prepare-release.outputs.release_created
        run: |
          cat ./docs/versions/data.json | jq '. + [{ "version": "${{ needs.prepare-release.outputs.tag_name }}", "path": "/heimdall/${{ needs.prepare-release.outputs.tag_name }}" }]' | tee ./docs/versions/data.json
      - name: Deploy dev documentation
        if: github.ref == 'refs/heads/main' && needs.prepare-release.outputs.release_created == false && env.GIT_DIFF
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/public
          destination_dir: dev
      - name: Deploy released documentation
        if: needs.prepare-release.outputs.release_created
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/public
          destination_dir: ${{ needs.prepare-release.outputs.tag_name }}
      - name: Deploy redirect to new released version
        uses: peaceiris/actions-gh-pages@v3
        if: needs.prepare-release.outputs.release_created
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/redirect
          keep_files: true
      - name: Deploy versions JSON document
        uses: peaceiris/actions-gh-pages@v3
        if: needs.prepare-release.outputs.release_created
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/versions
          keep_files: true
      - name: Commit updated versions JSON document
        if: steps.update-version-json.outcome == 'success' && needs.prepare-release.outputs.release_created
        run: |
          git config --local user.email "{{ github.sha }}+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add ./docs/versions/data.json
          git commit -m "chore(${{ github.ref_name }}): Preparing for next iteration"
      - name: Push changes
        if: needs.prepare-release.outputs.release_created
        uses: ad-m/github-push-action@master
