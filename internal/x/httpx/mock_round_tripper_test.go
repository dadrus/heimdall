// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package httpx

import (
	"net/http"

	mock "github.com/stretchr/testify/mock"
)

// NewRoundTripperMock creates a new instance of RoundTripperMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRoundTripperMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *RoundTripperMock {
	mock := &RoundTripperMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// RoundTripperMock is an autogenerated mock type for the RoundTripper type
type RoundTripperMock struct {
	mock.Mock
}

type RoundTripperMock_Expecter struct {
	mock *mock.Mock
}

func (_m *RoundTripperMock) EXPECT() *RoundTripperMock_Expecter {
	return &RoundTripperMock_Expecter{mock: &_m.Mock}
}

// RoundTrip provides a mock function for the type RoundTripperMock
func (_mock *RoundTripperMock) RoundTrip(request *http.Request) (*http.Response, error) {
	ret := _mock.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for RoundTrip")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*http.Request) (*http.Response, error)); ok {
		return returnFunc(request)
	}
	if returnFunc, ok := ret.Get(0).(func(*http.Request) *http.Response); ok {
		r0 = returnFunc(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = returnFunc(request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// RoundTripperMock_RoundTrip_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RoundTrip'
type RoundTripperMock_RoundTrip_Call struct {
	*mock.Call
}

// RoundTrip is a helper method to define mock.On call
//   - request *http.Request
func (_e *RoundTripperMock_Expecter) RoundTrip(request interface{}) *RoundTripperMock_RoundTrip_Call {
	return &RoundTripperMock_RoundTrip_Call{Call: _e.mock.On("RoundTrip", request)}
}

func (_c *RoundTripperMock_RoundTrip_Call) Run(run func(request *http.Request)) *RoundTripperMock_RoundTrip_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *http.Request
		if args[0] != nil {
			arg0 = args[0].(*http.Request)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *RoundTripperMock_RoundTrip_Call) Return(response *http.Response, err error) *RoundTripperMock_RoundTrip_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *RoundTripperMock_RoundTrip_Call) RunAndReturn(run func(request *http.Request) (*http.Response, error)) *RoundTripperMock_RoundTrip_Call {
	_c.Call.Return(run)
	return _c
}
