// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"

	heimdall "github.com/dadrus/heimdall/internal/heimdall"
	mock "github.com/stretchr/testify/mock"

	url "net/url"
)

// ContextMock is an autogenerated mock type for the Context type
type ContextMock struct {
	mock.Mock
}

type ContextMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ContextMock) EXPECT() *ContextMock_Expecter {
	return &ContextMock_Expecter{mock: &_m.Mock}
}

// AddCookieForUpstream provides a mock function with given fields: name, value
func (_m *ContextMock) AddCookieForUpstream(name string, value string) {
	_m.Called(name, value)
}

// ContextMock_AddCookieForUpstream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddCookieForUpstream'
type ContextMock_AddCookieForUpstream_Call struct {
	*mock.Call
}

// AddCookieForUpstream is a helper method to define mock.On call
//   - name string
//   - value string
func (_e *ContextMock_Expecter) AddCookieForUpstream(name interface{}, value interface{}) *ContextMock_AddCookieForUpstream_Call {
	return &ContextMock_AddCookieForUpstream_Call{Call: _e.mock.On("AddCookieForUpstream", name, value)}
}

func (_c *ContextMock_AddCookieForUpstream_Call) Run(run func(name string, value string)) *ContextMock_AddCookieForUpstream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *ContextMock_AddCookieForUpstream_Call) Return() *ContextMock_AddCookieForUpstream_Call {
	_c.Call.Return()
	return _c
}

func (_c *ContextMock_AddCookieForUpstream_Call) RunAndReturn(run func(string, string)) *ContextMock_AddCookieForUpstream_Call {
	_c.Call.Return(run)
	return _c
}

// AddHeaderForUpstream provides a mock function with given fields: name, value
func (_m *ContextMock) AddHeaderForUpstream(name string, value string) {
	_m.Called(name, value)
}

// ContextMock_AddHeaderForUpstream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddHeaderForUpstream'
type ContextMock_AddHeaderForUpstream_Call struct {
	*mock.Call
}

// AddHeaderForUpstream is a helper method to define mock.On call
//   - name string
//   - value string
func (_e *ContextMock_Expecter) AddHeaderForUpstream(name interface{}, value interface{}) *ContextMock_AddHeaderForUpstream_Call {
	return &ContextMock_AddHeaderForUpstream_Call{Call: _e.mock.On("AddHeaderForUpstream", name, value)}
}

func (_c *ContextMock_AddHeaderForUpstream_Call) Run(run func(name string, value string)) *ContextMock_AddHeaderForUpstream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *ContextMock_AddHeaderForUpstream_Call) Return() *ContextMock_AddHeaderForUpstream_Call {
	_c.Call.Return()
	return _c
}

func (_c *ContextMock_AddHeaderForUpstream_Call) RunAndReturn(run func(string, string)) *ContextMock_AddHeaderForUpstream_Call {
	_c.Call.Return(run)
	return _c
}

// AppContext provides a mock function with given fields:
func (_m *ContextMock) AppContext() context.Context {
	ret := _m.Called()

	var r0 context.Context
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// ContextMock_AppContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AppContext'
type ContextMock_AppContext_Call struct {
	*mock.Call
}

// AppContext is a helper method to define mock.On call
func (_e *ContextMock_Expecter) AppContext() *ContextMock_AppContext_Call {
	return &ContextMock_AppContext_Call{Call: _e.mock.On("AppContext")}
}

func (_c *ContextMock_AppContext_Call) Run(run func()) *ContextMock_AppContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ContextMock_AppContext_Call) Return(_a0 context.Context) *ContextMock_AppContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContextMock_AppContext_Call) RunAndReturn(run func() context.Context) *ContextMock_AppContext_Call {
	_c.Call.Return(run)
	return _c
}

// RequestBody provides a mock function with given fields:
func (_m *ContextMock) RequestBody() []byte {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// ContextMock_RequestBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestBody'
type ContextMock_RequestBody_Call struct {
	*mock.Call
}

// RequestBody is a helper method to define mock.On call
func (_e *ContextMock_Expecter) RequestBody() *ContextMock_RequestBody_Call {
	return &ContextMock_RequestBody_Call{Call: _e.mock.On("RequestBody")}
}

func (_c *ContextMock_RequestBody_Call) Run(run func()) *ContextMock_RequestBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ContextMock_RequestBody_Call) Return(_a0 []byte) *ContextMock_RequestBody_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContextMock_RequestBody_Call) RunAndReturn(run func() []byte) *ContextMock_RequestBody_Call {
	_c.Call.Return(run)
	return _c
}

// RequestClientIPs provides a mock function with given fields:
func (_m *ContextMock) RequestClientIPs() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// ContextMock_RequestClientIPs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestClientIPs'
type ContextMock_RequestClientIPs_Call struct {
	*mock.Call
}

// RequestClientIPs is a helper method to define mock.On call
func (_e *ContextMock_Expecter) RequestClientIPs() *ContextMock_RequestClientIPs_Call {
	return &ContextMock_RequestClientIPs_Call{Call: _e.mock.On("RequestClientIPs")}
}

func (_c *ContextMock_RequestClientIPs_Call) Run(run func()) *ContextMock_RequestClientIPs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ContextMock_RequestClientIPs_Call) Return(_a0 []string) *ContextMock_RequestClientIPs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContextMock_RequestClientIPs_Call) RunAndReturn(run func() []string) *ContextMock_RequestClientIPs_Call {
	_c.Call.Return(run)
	return _c
}

// RequestCookie provides a mock function with given fields: key
func (_m *ContextMock) RequestCookie(key string) string {
	ret := _m.Called(key)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ContextMock_RequestCookie_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestCookie'
type ContextMock_RequestCookie_Call struct {
	*mock.Call
}

// RequestCookie is a helper method to define mock.On call
//   - key string
func (_e *ContextMock_Expecter) RequestCookie(key interface{}) *ContextMock_RequestCookie_Call {
	return &ContextMock_RequestCookie_Call{Call: _e.mock.On("RequestCookie", key)}
}

func (_c *ContextMock_RequestCookie_Call) Run(run func(key string)) *ContextMock_RequestCookie_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ContextMock_RequestCookie_Call) Return(_a0 string) *ContextMock_RequestCookie_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContextMock_RequestCookie_Call) RunAndReturn(run func(string) string) *ContextMock_RequestCookie_Call {
	_c.Call.Return(run)
	return _c
}

// RequestFormParameter provides a mock function with given fields: key
func (_m *ContextMock) RequestFormParameter(key string) string {
	ret := _m.Called(key)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ContextMock_RequestFormParameter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestFormParameter'
type ContextMock_RequestFormParameter_Call struct {
	*mock.Call
}

// RequestFormParameter is a helper method to define mock.On call
//   - key string
func (_e *ContextMock_Expecter) RequestFormParameter(key interface{}) *ContextMock_RequestFormParameter_Call {
	return &ContextMock_RequestFormParameter_Call{Call: _e.mock.On("RequestFormParameter", key)}
}

func (_c *ContextMock_RequestFormParameter_Call) Run(run func(key string)) *ContextMock_RequestFormParameter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ContextMock_RequestFormParameter_Call) Return(_a0 string) *ContextMock_RequestFormParameter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContextMock_RequestFormParameter_Call) RunAndReturn(run func(string) string) *ContextMock_RequestFormParameter_Call {
	_c.Call.Return(run)
	return _c
}

// RequestHeader provides a mock function with given fields: key
func (_m *ContextMock) RequestHeader(key string) string {
	ret := _m.Called(key)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ContextMock_RequestHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestHeader'
type ContextMock_RequestHeader_Call struct {
	*mock.Call
}

// RequestHeader is a helper method to define mock.On call
//   - key string
func (_e *ContextMock_Expecter) RequestHeader(key interface{}) *ContextMock_RequestHeader_Call {
	return &ContextMock_RequestHeader_Call{Call: _e.mock.On("RequestHeader", key)}
}

func (_c *ContextMock_RequestHeader_Call) Run(run func(key string)) *ContextMock_RequestHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ContextMock_RequestHeader_Call) Return(_a0 string) *ContextMock_RequestHeader_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContextMock_RequestHeader_Call) RunAndReturn(run func(string) string) *ContextMock_RequestHeader_Call {
	_c.Call.Return(run)
	return _c
}

// RequestHeaders provides a mock function with given fields:
func (_m *ContextMock) RequestHeaders() map[string]string {
	ret := _m.Called()

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// ContextMock_RequestHeaders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestHeaders'
type ContextMock_RequestHeaders_Call struct {
	*mock.Call
}

// RequestHeaders is a helper method to define mock.On call
func (_e *ContextMock_Expecter) RequestHeaders() *ContextMock_RequestHeaders_Call {
	return &ContextMock_RequestHeaders_Call{Call: _e.mock.On("RequestHeaders")}
}

func (_c *ContextMock_RequestHeaders_Call) Run(run func()) *ContextMock_RequestHeaders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ContextMock_RequestHeaders_Call) Return(_a0 map[string]string) *ContextMock_RequestHeaders_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContextMock_RequestHeaders_Call) RunAndReturn(run func() map[string]string) *ContextMock_RequestHeaders_Call {
	_c.Call.Return(run)
	return _c
}

// RequestMethod provides a mock function with given fields:
func (_m *ContextMock) RequestMethod() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ContextMock_RequestMethod_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestMethod'
type ContextMock_RequestMethod_Call struct {
	*mock.Call
}

// RequestMethod is a helper method to define mock.On call
func (_e *ContextMock_Expecter) RequestMethod() *ContextMock_RequestMethod_Call {
	return &ContextMock_RequestMethod_Call{Call: _e.mock.On("RequestMethod")}
}

func (_c *ContextMock_RequestMethod_Call) Run(run func()) *ContextMock_RequestMethod_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ContextMock_RequestMethod_Call) Return(_a0 string) *ContextMock_RequestMethod_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContextMock_RequestMethod_Call) RunAndReturn(run func() string) *ContextMock_RequestMethod_Call {
	_c.Call.Return(run)
	return _c
}

// RequestQueryParameter provides a mock function with given fields: key
func (_m *ContextMock) RequestQueryParameter(key string) string {
	ret := _m.Called(key)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ContextMock_RequestQueryParameter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestQueryParameter'
type ContextMock_RequestQueryParameter_Call struct {
	*mock.Call
}

// RequestQueryParameter is a helper method to define mock.On call
//   - key string
func (_e *ContextMock_Expecter) RequestQueryParameter(key interface{}) *ContextMock_RequestQueryParameter_Call {
	return &ContextMock_RequestQueryParameter_Call{Call: _e.mock.On("RequestQueryParameter", key)}
}

func (_c *ContextMock_RequestQueryParameter_Call) Run(run func(key string)) *ContextMock_RequestQueryParameter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ContextMock_RequestQueryParameter_Call) Return(_a0 string) *ContextMock_RequestQueryParameter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContextMock_RequestQueryParameter_Call) RunAndReturn(run func(string) string) *ContextMock_RequestQueryParameter_Call {
	_c.Call.Return(run)
	return _c
}

// RequestURL provides a mock function with given fields:
func (_m *ContextMock) RequestURL() *url.URL {
	ret := _m.Called()

	var r0 *url.URL
	if rf, ok := ret.Get(0).(func() *url.URL); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*url.URL)
		}
	}

	return r0
}

// ContextMock_RequestURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestURL'
type ContextMock_RequestURL_Call struct {
	*mock.Call
}

// RequestURL is a helper method to define mock.On call
func (_e *ContextMock_Expecter) RequestURL() *ContextMock_RequestURL_Call {
	return &ContextMock_RequestURL_Call{Call: _e.mock.On("RequestURL")}
}

func (_c *ContextMock_RequestURL_Call) Run(run func()) *ContextMock_RequestURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ContextMock_RequestURL_Call) Return(_a0 *url.URL) *ContextMock_RequestURL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContextMock_RequestURL_Call) RunAndReturn(run func() *url.URL) *ContextMock_RequestURL_Call {
	_c.Call.Return(run)
	return _c
}

// SetPipelineError provides a mock function with given fields: err
func (_m *ContextMock) SetPipelineError(err error) {
	_m.Called(err)
}

// ContextMock_SetPipelineError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPipelineError'
type ContextMock_SetPipelineError_Call struct {
	*mock.Call
}

// SetPipelineError is a helper method to define mock.On call
//   - err error
func (_e *ContextMock_Expecter) SetPipelineError(err interface{}) *ContextMock_SetPipelineError_Call {
	return &ContextMock_SetPipelineError_Call{Call: _e.mock.On("SetPipelineError", err)}
}

func (_c *ContextMock_SetPipelineError_Call) Run(run func(err error)) *ContextMock_SetPipelineError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *ContextMock_SetPipelineError_Call) Return() *ContextMock_SetPipelineError_Call {
	_c.Call.Return()
	return _c
}

func (_c *ContextMock_SetPipelineError_Call) RunAndReturn(run func(error)) *ContextMock_SetPipelineError_Call {
	_c.Call.Return(run)
	return _c
}

// Signer provides a mock function with given fields:
func (_m *ContextMock) Signer() heimdall.JWTSigner {
	ret := _m.Called()

	var r0 heimdall.JWTSigner
	if rf, ok := ret.Get(0).(func() heimdall.JWTSigner); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(heimdall.JWTSigner)
		}
	}

	return r0
}

// ContextMock_Signer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Signer'
type ContextMock_Signer_Call struct {
	*mock.Call
}

// Signer is a helper method to define mock.On call
func (_e *ContextMock_Expecter) Signer() *ContextMock_Signer_Call {
	return &ContextMock_Signer_Call{Call: _e.mock.On("Signer")}
}

func (_c *ContextMock_Signer_Call) Run(run func()) *ContextMock_Signer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ContextMock_Signer_Call) Return(_a0 heimdall.JWTSigner) *ContextMock_Signer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContextMock_Signer_Call) RunAndReturn(run func() heimdall.JWTSigner) *ContextMock_Signer_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewContextMock interface {
	mock.TestingT
	Cleanup(func())
}

// NewContextMock creates a new instance of ContextMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewContextMock(t mockConstructorTestingTNewContextMock) *ContextMock {
	mock := &ContextMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
