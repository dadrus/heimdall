// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// RequestFunctionsMock is an autogenerated mock type for the RequestFunctions type
type RequestFunctionsMock struct {
	mock.Mock
}

type RequestFunctionsMock_Expecter struct {
	mock *mock.Mock
}

func (_m *RequestFunctionsMock) EXPECT() *RequestFunctionsMock_Expecter {
	return &RequestFunctionsMock_Expecter{mock: &_m.Mock}
}

// Cookie provides a mock function with given fields: name
func (_m *RequestFunctionsMock) Cookie(name string) string {
	ret := _m.Called(name)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// RequestFunctionsMock_Cookie_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cookie'
type RequestFunctionsMock_Cookie_Call struct {
	*mock.Call
}

// Cookie is a helper method to define mock.On call
//   - name string
func (_e *RequestFunctionsMock_Expecter) Cookie(name interface{}) *RequestFunctionsMock_Cookie_Call {
	return &RequestFunctionsMock_Cookie_Call{Call: _e.mock.On("Cookie", name)}
}

func (_c *RequestFunctionsMock_Cookie_Call) Run(run func(name string)) *RequestFunctionsMock_Cookie_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *RequestFunctionsMock_Cookie_Call) Return(_a0 string) *RequestFunctionsMock_Cookie_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RequestFunctionsMock_Cookie_Call) RunAndReturn(run func(string) string) *RequestFunctionsMock_Cookie_Call {
	_c.Call.Return(run)
	return _c
}

// Header provides a mock function with given fields: name
func (_m *RequestFunctionsMock) Header(name string) string {
	ret := _m.Called(name)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// RequestFunctionsMock_Header_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Header'
type RequestFunctionsMock_Header_Call struct {
	*mock.Call
}

// Header is a helper method to define mock.On call
//   - name string
func (_e *RequestFunctionsMock_Expecter) Header(name interface{}) *RequestFunctionsMock_Header_Call {
	return &RequestFunctionsMock_Header_Call{Call: _e.mock.On("Header", name)}
}

func (_c *RequestFunctionsMock_Header_Call) Run(run func(name string)) *RequestFunctionsMock_Header_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *RequestFunctionsMock_Header_Call) Return(_a0 string) *RequestFunctionsMock_Header_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RequestFunctionsMock_Header_Call) RunAndReturn(run func(string) string) *RequestFunctionsMock_Header_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewRequestFunctionsMock interface {
	mock.TestingT
	Cleanup(func())
}

// NewRequestFunctionsMock creates a new instance of RequestFunctionsMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRequestFunctionsMock(t mockConstructorTestingTNewRequestFunctionsMock) *RequestFunctionsMock {
	mock := &RequestFunctionsMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
