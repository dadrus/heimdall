// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	jose "github.com/go-jose/go-jose/v4"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// JWTSignerMock is an autogenerated mock type for the JWTSigner type
type JWTSignerMock struct {
	mock.Mock
}

type JWTSignerMock_Expecter struct {
	mock *mock.Mock
}

func (_m *JWTSignerMock) EXPECT() *JWTSignerMock_Expecter {
	return &JWTSignerMock_Expecter{mock: &_m.Mock}
}

// Hash provides a mock function with given fields:
func (_m *JWTSignerMock) Hash() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Hash")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// JWTSignerMock_Hash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Hash'
type JWTSignerMock_Hash_Call struct {
	*mock.Call
}

// Hash is a helper method to define mock.On call
func (_e *JWTSignerMock_Expecter) Hash() *JWTSignerMock_Hash_Call {
	return &JWTSignerMock_Hash_Call{Call: _e.mock.On("Hash")}
}

func (_c *JWTSignerMock_Hash_Call) Run(run func()) *JWTSignerMock_Hash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *JWTSignerMock_Hash_Call) Return(_a0 []byte) *JWTSignerMock_Hash_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *JWTSignerMock_Hash_Call) RunAndReturn(run func() []byte) *JWTSignerMock_Hash_Call {
	_c.Call.Return(run)
	return _c
}

// Keys provides a mock function with given fields:
func (_m *JWTSignerMock) Keys() []jose.JSONWebKey {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Keys")
	}

	var r0 []jose.JSONWebKey
	if rf, ok := ret.Get(0).(func() []jose.JSONWebKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]jose.JSONWebKey)
		}
	}

	return r0
}

// JWTSignerMock_Keys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Keys'
type JWTSignerMock_Keys_Call struct {
	*mock.Call
}

// Keys is a helper method to define mock.On call
func (_e *JWTSignerMock_Expecter) Keys() *JWTSignerMock_Keys_Call {
	return &JWTSignerMock_Keys_Call{Call: _e.mock.On("Keys")}
}

func (_c *JWTSignerMock_Keys_Call) Run(run func()) *JWTSignerMock_Keys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *JWTSignerMock_Keys_Call) Return(_a0 []jose.JSONWebKey) *JWTSignerMock_Keys_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *JWTSignerMock_Keys_Call) RunAndReturn(run func() []jose.JSONWebKey) *JWTSignerMock_Keys_Call {
	_c.Call.Return(run)
	return _c
}

// Sign provides a mock function with given fields: sub, ttl, claims
func (_m *JWTSignerMock) Sign(sub string, ttl time.Duration, claims map[string]interface{}) (string, error) {
	ret := _m.Called(sub, ttl, claims)

	if len(ret) == 0 {
		panic("no return value specified for Sign")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, time.Duration, map[string]interface{}) (string, error)); ok {
		return rf(sub, ttl, claims)
	}
	if rf, ok := ret.Get(0).(func(string, time.Duration, map[string]interface{}) string); ok {
		r0 = rf(sub, ttl, claims)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, time.Duration, map[string]interface{}) error); ok {
		r1 = rf(sub, ttl, claims)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JWTSignerMock_Sign_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sign'
type JWTSignerMock_Sign_Call struct {
	*mock.Call
}

// Sign is a helper method to define mock.On call
//   - sub string
//   - ttl time.Duration
//   - claims map[string]interface{}
func (_e *JWTSignerMock_Expecter) Sign(sub interface{}, ttl interface{}, claims interface{}) *JWTSignerMock_Sign_Call {
	return &JWTSignerMock_Sign_Call{Call: _e.mock.On("Sign", sub, ttl, claims)}
}

func (_c *JWTSignerMock_Sign_Call) Run(run func(sub string, ttl time.Duration, claims map[string]interface{})) *JWTSignerMock_Sign_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(time.Duration), args[2].(map[string]interface{}))
	})
	return _c
}

func (_c *JWTSignerMock_Sign_Call) Return(_a0 string, _a1 error) *JWTSignerMock_Sign_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *JWTSignerMock_Sign_Call) RunAndReturn(run func(string, time.Duration, map[string]interface{}) (string, error)) *JWTSignerMock_Sign_Call {
	_c.Call.Return(run)
	return _c
}

// NewJWTSignerMock creates a new instance of JWTSignerMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJWTSignerMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *JWTSignerMock {
	mock := &JWTSignerMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
