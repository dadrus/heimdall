serve:
  decision:
    host: 127.0.0.1
    port: 4468
    timeout:
      read: 2s
      write: 5s
      idle: 2m
    buffer_limit:
      read: 4KB
      write: 4KB
    tls:
      key_store:
        path: /path/to/keystore/file.pem
        password: VerySecret!
      key_id: foo
      min_version: TLS1.3
    trusted_proxies:
      - 192.168.1.0/24
    respond:
      verbose: true
      with:
        accepted:
          code: 202
        precondition_error:
          code: 400
        authentication_error:
          code: 404
        authorization_error:
          code: 404
        method_error:
          code: 400
        communication_error:
          code: 502
        internal_error:
          code: 500
        no_rule_error:
          code: 404

  proxy:
    host: 127.0.0.1
    port: 4469
    timeout:
      read: 2s
      write: 5s
      idle: 2m
    buffer_limit:
      read: 4KB
      write: 4KB
    connections_limit:
      max_idle: 100
      max_idle_per_host: 100
      max_per_host: 20
    cors:
      allowed_origins:
        - example.org
      allowed_methods:
        - GET
        - POST
      allowed_headers:
        - Authorization
      exposed_headers:
        - X-My-Header
      allow_credentials: true
      max_age: 1m
    tls:
      key_store:
        path: /path/to/keystore/file.pem
      min_version: TLS1.2
      cipher_suites:
        - TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256
        - TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256
        - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
        - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
        - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
        - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
        - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256
        - TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256
    trusted_proxies:
      - 192.168.1.0/24
    respond:
      with:
        precondition_error:
          code: 400
        authentication_error:
          code: 404

  management:
    host: 127.0.0.1
    port: 4457
    timeout:
      read: 2s
      write: 5s
      idle: 2m
    buffer_limit:
      read: 4KB
      write: 4KB
    cors:
      allowed_origins:
        - example.org
      allowed_methods:
        - GET
        - POST
      allowed_headers:
        - Authorization
      exposed_headers:
        - X-My-Header
      allow_credentials: true
      max_age: 1m
    tls:
      key_store:
        path: /path/to/keystore/file.pem

log:
  level: debug
  format: text

tracing:
  enabled: true
  span_processor: batch

metrics:
  enabled: true

profiling:
  enabled: true
  host: 0.0.0.0
  port: 6060

signer:
  name: foobar
  key_store:
    path: /opt/heimdall/keystore.pem
    password: VeryInsecure!
  key_id: foo

rules:
  mechanisms:
    authenticators:
      - id: noop_authenticator
        type: noop
      - id: anonymous_authenticator
        type: anonymous
      - id: unauthorized_authenticator
        type: unauthorized
      - id: kratos_session_authenticator
        type: generic
        config:
          identity_info_endpoint:
            url: http://127.0.0.1:4433/sessions/whoami
            retry:
              max_delay: 300ms
              give_up_after: 2s
          authentication_data_source:
            - cookie: ory_kratos_session
          forward_cookies:
            - ory_kratos_session
          subject:
            attributes: "@this"
            id: "identity.id"
          allow_fallback_on_error: true
          cache_ttl: 10m
          session_lifespan:
            active: active
            issued_at: issued_at
            not_before: authenticated_at
            not_after: expires_at
            time_format: "2006-01-02T15:04:05.999999Z07"
            validity_leeway: 10s
      - id: authenticator_with_body_payload
        type: generic
        config:
          identity_info_endpoint:
            url: http://127.0.0.1:4433/sessions/whoami
          authentication_data_source:
            - header: X-My-Token
          subject:
            attributes: "@this"
            id: "identity.id"
          payload: |
            token={{ .AuthenticationData | urlenc }}
      - id: authenticator_with_header_forward
        type: generic
        config:
          identity_info_endpoint:
            url: http://127.0.0.1:4433/sessions/whoami
          authentication_data_source:
            - header: X-My-Header
          forward_headers:
            - X-My-Header
          subject:
            attributes: "@this"
            id: "identity.id"
      - id: authenticator_with_query_and_header_template
        type: generic
        config:
          identity_info_endpoint:
            url: http://127.0.0.1:4433/identity?token={{ .AuthenticationData | urlenc }}
            headers:
              X-My-Token: "{{ .AuthenticationData }}"
          authentication_data_source:
            - cookie: ory_kratos_session
          subject:
            attributes: "@this"
            id: "identity.id"
      - id: hydra_authenticator
        type: oauth2_introspection
        config:
          introspection_endpoint:
            url: http://hydra:4445/oauth2/introspect
            retry:
              max_delay: 300ms
              give_up_after: 2s
            auth:
              type: basic_auth
              config:
                user: foo
                password: bar
          token_source:
            - header: Authorization
              schema: Bearer
          assertions:
            issuers:
              - http://127.0.0.1:4444/
            scopes:
              - foo
              - bar
            audience:
              - bla
          subject:
            attributes: "@this"
            id: sub
          allow_fallback_on_error: true
      - id: jwt_authenticator1
        type: jwt
        config:
          jwks_endpoint:
            url: http://foo/token
            method: GET
            enable_http_cache: true
          jwt_source:
            - header: Authorization
              schema: Bearer
          assertions:
            audience:
              - bla
            scopes:
              - foo
            allowed_algorithms:
              - RSA
            issuers:
              - bla
          subject:
            attributes: "@this"
            id: "identity.id"
          cache_ttl: 5m
          allow_fallback_on_error: true
          validate_jwk: true
          trust_store: /opt/heimdall/trust_store.pem
      - id: jwt_authenticator2
        type: jwt
        config:
          jwks_endpoint: http://bar/token
          assertions:
             audience:
               - bla
             scopes:
               - foo
             allowed_algorithms:
               - RSA
             issuers:
               - bla
          allow_fallback_on_error: true
          validate_jwk: true
      - id: basic_auth_authenticator
        type: basic_auth
        config:
          user_id: foo
          password: bar
          allow_fallback_on_error: false
    authorizers:
      - id: allow_all_authorizer
        type: allow
      - id: deny_all_authorizer
        type: deny
      - id: keto_authorizer
        type: remote
        config:
          endpoint:
            url: http://keto/{{ .Values.key }}
            method: POST
            headers:
              foo-bar: "{{ .Subject.ID }}"
          values:
            key: value
          payload: https://bla.bar
          forward_response_headers_to_upstream:
            - bla-bar
          expressions:
            - expression: "Payload.foo == 'bar'"
      - id: attributes_based_authorizer_2
        type: cel
        config:
          expressions:
            - expression: "'admin' in Subject.Attributes.groups"
    contextualizers:
      - id: subscription_contextualizer
        type: generic
        config:
          endpoint:
            url: http://foo.bar
            method: GET
            headers:
              bla: bla
          payload: http://foo
          continue_pipeline_on_error: true
      - id: profile_data_contextualizer
        type: generic
        config:
          endpoint:
            url: http://profile/{{ .Subject.ID }}
            headers:
              foo: bar
            auth:
              type: api_key
              config:
                in: query
                name: key
                value: super duper secret
          values:
            some-key: some-value
    finalizers:
      - id: jwt
        type: jwt
        config:
          ttl: 5m
          claims: |
            {"user": {{ quote .Subject.ID }} }
      - id: jwt_with_custom_header
        type: jwt
        config:
          ttl: 5m
          header:
            name: Foo
            scheme: Bar
          claims: |
            {"user": {{ quote .Subject.ID }} }
      - id: bla
        type: header
        config:
          headers:
            foo-bar: bla
      - id: blabla
        type: cookie
        config:
          cookies:
            foo-bar: '{{ .Subject.ID }}'
      - id: client_cred_grant
        type: oauth2_client_credentials
        config:
          token_url: https://my-auth-provider/token
          client_id: foo
          client_secret: bar
          auth_method: basic_auth
          cache_ttl: 5m
          scopes:
            - foo
            - bar
          header:
            name: My-Header
            scheme: Foo
    error_handlers:
      - id: default
        type: default
      - id: authenticate_with_kratos
        type: redirect
        config:
          to: http://127.0.0.1:4433/self-service/login/browser?return_to={{ .Request.URL | urlenc }}
          when:
            - error:
                - type: authentication_error
                  raised_by: kratos_session_authenticator
                - type: authorization_error
              request_headers:
                Accept:
                  - '*/*'

  default:
    methods:
      - GET
      - POST
    execute:
      - authenticator: anonymous_authenticator
      - finalizer: jwt
    on_error:
      - error_handler: authenticate_with_kratos

  providers:
    file_system:
      src: test_rules.yaml
      watch: true
      env_vars_enabled: false

    http_endpoint:
      watch_interval: 5m
      endpoints:
        - url: http://foo.bar/rules.yaml
          rule_path_match_prefix: /foo
          enable_http_cache: true
        - url: http://bar.foo/rules.yaml
          headers:
            bla: bla
          retry:
            give_up_after: 5s
            max_delay: 250ms
          auth:
            type: api_key
            config:
              name: foo
              value: bar
              in: header

    cloud_blob:
      watch_interval: 2m
      buckets:
        - url: gs://my-bucket
          prefix: service1
          rule_path_match_prefix: /service1
        - url: gs://my-bucket
          prefix: service2
          rule_path_match_prefix: /service2
        - url: s3://my-bucket/my-rule-set

    kubernetes:
      auth_class: foo