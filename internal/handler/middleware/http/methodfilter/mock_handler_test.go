// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package methodfilter

import (
	"net/http"

	mock "github.com/stretchr/testify/mock"
)

// NewHandlerMock creates a new instance of HandlerMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHandlerMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *HandlerMock {
	mock := &HandlerMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// HandlerMock is an autogenerated mock type for the Handler type
type HandlerMock struct {
	mock.Mock
}

type HandlerMock_Expecter struct {
	mock *mock.Mock
}

func (_m *HandlerMock) EXPECT() *HandlerMock_Expecter {
	return &HandlerMock_Expecter{mock: &_m.Mock}
}

// ServeHTTP provides a mock function for the type HandlerMock
func (_mock *HandlerMock) ServeHTTP(responseWriter http.ResponseWriter, request *http.Request) {
	_mock.Called(responseWriter, request)
	return
}

// HandlerMock_ServeHTTP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServeHTTP'
type HandlerMock_ServeHTTP_Call struct {
	*mock.Call
}

// ServeHTTP is a helper method to define mock.On call
//   - responseWriter http.ResponseWriter
//   - request *http.Request
func (_e *HandlerMock_Expecter) ServeHTTP(responseWriter interface{}, request interface{}) *HandlerMock_ServeHTTP_Call {
	return &HandlerMock_ServeHTTP_Call{Call: _e.mock.On("ServeHTTP", responseWriter, request)}
}

func (_c *HandlerMock_ServeHTTP_Call) Run(run func(responseWriter http.ResponseWriter, request *http.Request)) *HandlerMock_ServeHTTP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 http.ResponseWriter
		if args[0] != nil {
			arg0 = args[0].(http.ResponseWriter)
		}
		var arg1 *http.Request
		if args[1] != nil {
			arg1 = args[1].(*http.Request)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *HandlerMock_ServeHTTP_Call) Return() *HandlerMock_ServeHTTP_Call {
	_c.Call.Return()
	return _c
}

func (_c *HandlerMock_ServeHTTP_Call) RunAndReturn(run func(responseWriter http.ResponseWriter, request *http.Request)) *HandlerMock_ServeHTTP_Call {
	_c.Run(run)
	return _c
}
