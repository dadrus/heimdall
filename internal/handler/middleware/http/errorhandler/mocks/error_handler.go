// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"net/http"

	mock "github.com/stretchr/testify/mock"
)

// NewErrorHandlerMock creates a new instance of ErrorHandlerMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewErrorHandlerMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ErrorHandlerMock {
	mock := &ErrorHandlerMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ErrorHandlerMock is an autogenerated mock type for the ErrorHandler type
type ErrorHandlerMock struct {
	mock.Mock
}

type ErrorHandlerMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ErrorHandlerMock) EXPECT() *ErrorHandlerMock_Expecter {
	return &ErrorHandlerMock_Expecter{mock: &_m.Mock}
}

// HandleError provides a mock function for the type ErrorHandlerMock
func (_mock *ErrorHandlerMock) HandleError(rw http.ResponseWriter, req *http.Request, err error) {
	_mock.Called(rw, req, err)
	return
}

// ErrorHandlerMock_HandleError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleError'
type ErrorHandlerMock_HandleError_Call struct {
	*mock.Call
}

// HandleError is a helper method to define mock.On call
//   - rw http.ResponseWriter
//   - req *http.Request
//   - err error
func (_e *ErrorHandlerMock_Expecter) HandleError(rw interface{}, req interface{}, err interface{}) *ErrorHandlerMock_HandleError_Call {
	return &ErrorHandlerMock_HandleError_Call{Call: _e.mock.On("HandleError", rw, req, err)}
}

func (_c *ErrorHandlerMock_HandleError_Call) Run(run func(rw http.ResponseWriter, req *http.Request, err error)) *ErrorHandlerMock_HandleError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 http.ResponseWriter
		if args[0] != nil {
			arg0 = args[0].(http.ResponseWriter)
		}
		var arg1 *http.Request
		if args[1] != nil {
			arg1 = args[1].(*http.Request)
		}
		var arg2 error
		if args[2] != nil {
			arg2 = args[2].(error)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *ErrorHandlerMock_HandleError_Call) Return() *ErrorHandlerMock_HandleError_Call {
	_c.Call.Return()
	return _c
}

func (_c *ErrorHandlerMock_HandleError_Call) RunAndReturn(run func(rw http.ResponseWriter, req *http.Request, err error)) *ErrorHandlerMock_HandleError_Call {
	_c.Run(run)
	return _c
}
