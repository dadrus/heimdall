// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"net/http"

	"github.com/dadrus/heimdall/internal/handler/requestcontext"
	mock "github.com/stretchr/testify/mock"
)

// NewContextFactoryMock creates a new instance of ContextFactoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewContextFactoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ContextFactoryMock {
	mock := &ContextFactoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ContextFactoryMock is an autogenerated mock type for the ContextFactory type
type ContextFactoryMock struct {
	mock.Mock
}

type ContextFactoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ContextFactoryMock) EXPECT() *ContextFactoryMock_Expecter {
	return &ContextFactoryMock_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type ContextFactoryMock
func (_mock *ContextFactoryMock) Create(rw http.ResponseWriter, req *http.Request) requestcontext.Context {
	ret := _mock.Called(rw, req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 requestcontext.Context
	if returnFunc, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request) requestcontext.Context); ok {
		r0 = returnFunc(rw, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(requestcontext.Context)
		}
	}
	return r0
}

// ContextFactoryMock_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type ContextFactoryMock_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - rw http.ResponseWriter
//   - req *http.Request
func (_e *ContextFactoryMock_Expecter) Create(rw interface{}, req interface{}) *ContextFactoryMock_Create_Call {
	return &ContextFactoryMock_Create_Call{Call: _e.mock.On("Create", rw, req)}
}

func (_c *ContextFactoryMock_Create_Call) Run(run func(rw http.ResponseWriter, req *http.Request)) *ContextFactoryMock_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 http.ResponseWriter
		if args[0] != nil {
			arg0 = args[0].(http.ResponseWriter)
		}
		var arg1 *http.Request
		if args[1] != nil {
			arg1 = args[1].(*http.Request)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ContextFactoryMock_Create_Call) Return(context requestcontext.Context) *ContextFactoryMock_Create_Call {
	_c.Call.Return(context)
	return _c
}

func (_c *ContextFactoryMock_Create_Call) RunAndReturn(run func(rw http.ResponseWriter, req *http.Request) requestcontext.Context) *ContextFactoryMock_Create_Call {
	_c.Call.Return(run)
	return _c
}
