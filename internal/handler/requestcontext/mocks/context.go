// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/dadrus/heimdall/internal/heimdall"
	"github.com/dadrus/heimdall/internal/rules/rule"
	mock "github.com/stretchr/testify/mock"
)

// NewContextMock creates a new instance of ContextMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewContextMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ContextMock {
	mock := &ContextMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ContextMock is an autogenerated mock type for the Context type
type ContextMock struct {
	mock.Mock
}

type ContextMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ContextMock) EXPECT() *ContextMock_Expecter {
	return &ContextMock_Expecter{mock: &_m.Mock}
}

// AddCookieForUpstream provides a mock function for the type ContextMock
func (_mock *ContextMock) AddCookieForUpstream(name string, value string) {
	_mock.Called(name, value)
	return
}

// ContextMock_AddCookieForUpstream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddCookieForUpstream'
type ContextMock_AddCookieForUpstream_Call struct {
	*mock.Call
}

// AddCookieForUpstream is a helper method to define mock.On call
//   - name string
//   - value string
func (_e *ContextMock_Expecter) AddCookieForUpstream(name interface{}, value interface{}) *ContextMock_AddCookieForUpstream_Call {
	return &ContextMock_AddCookieForUpstream_Call{Call: _e.mock.On("AddCookieForUpstream", name, value)}
}

func (_c *ContextMock_AddCookieForUpstream_Call) Run(run func(name string, value string)) *ContextMock_AddCookieForUpstream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ContextMock_AddCookieForUpstream_Call) Return() *ContextMock_AddCookieForUpstream_Call {
	_c.Call.Return()
	return _c
}

func (_c *ContextMock_AddCookieForUpstream_Call) RunAndReturn(run func(name string, value string)) *ContextMock_AddCookieForUpstream_Call {
	_c.Run(run)
	return _c
}

// AddHeaderForUpstream provides a mock function for the type ContextMock
func (_mock *ContextMock) AddHeaderForUpstream(name string, value string) {
	_mock.Called(name, value)
	return
}

// ContextMock_AddHeaderForUpstream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddHeaderForUpstream'
type ContextMock_AddHeaderForUpstream_Call struct {
	*mock.Call
}

// AddHeaderForUpstream is a helper method to define mock.On call
//   - name string
//   - value string
func (_e *ContextMock_Expecter) AddHeaderForUpstream(name interface{}, value interface{}) *ContextMock_AddHeaderForUpstream_Call {
	return &ContextMock_AddHeaderForUpstream_Call{Call: _e.mock.On("AddHeaderForUpstream", name, value)}
}

func (_c *ContextMock_AddHeaderForUpstream_Call) Run(run func(name string, value string)) *ContextMock_AddHeaderForUpstream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ContextMock_AddHeaderForUpstream_Call) Return() *ContextMock_AddHeaderForUpstream_Call {
	_c.Call.Return()
	return _c
}

func (_c *ContextMock_AddHeaderForUpstream_Call) RunAndReturn(run func(name string, value string)) *ContextMock_AddHeaderForUpstream_Call {
	_c.Run(run)
	return _c
}

// Context provides a mock function for the type ContextMock
func (_mock *ContextMock) Context() context.Context {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Context")
	}

	var r0 context.Context
	if returnFunc, ok := ret.Get(0).(func() context.Context); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}
	return r0
}

// ContextMock_Context_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Context'
type ContextMock_Context_Call struct {
	*mock.Call
}

// Context is a helper method to define mock.On call
func (_e *ContextMock_Expecter) Context() *ContextMock_Context_Call {
	return &ContextMock_Context_Call{Call: _e.mock.On("Context")}
}

func (_c *ContextMock_Context_Call) Run(run func()) *ContextMock_Context_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ContextMock_Context_Call) Return(context1 context.Context) *ContextMock_Context_Call {
	_c.Call.Return(context1)
	return _c
}

func (_c *ContextMock_Context_Call) RunAndReturn(run func() context.Context) *ContextMock_Context_Call {
	_c.Call.Return(run)
	return _c
}

// Finalize provides a mock function for the type ContextMock
func (_mock *ContextMock) Finalize(backend rule.Backend) error {
	ret := _mock.Called(backend)

	if len(ret) == 0 {
		panic("no return value specified for Finalize")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(rule.Backend) error); ok {
		r0 = returnFunc(backend)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ContextMock_Finalize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Finalize'
type ContextMock_Finalize_Call struct {
	*mock.Call
}

// Finalize is a helper method to define mock.On call
//   - backend rule.Backend
func (_e *ContextMock_Expecter) Finalize(backend interface{}) *ContextMock_Finalize_Call {
	return &ContextMock_Finalize_Call{Call: _e.mock.On("Finalize", backend)}
}

func (_c *ContextMock_Finalize_Call) Run(run func(backend rule.Backend)) *ContextMock_Finalize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 rule.Backend
		if args[0] != nil {
			arg0 = args[0].(rule.Backend)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ContextMock_Finalize_Call) Return(err error) *ContextMock_Finalize_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ContextMock_Finalize_Call) RunAndReturn(run func(backend rule.Backend) error) *ContextMock_Finalize_Call {
	_c.Call.Return(run)
	return _c
}

// Outputs provides a mock function for the type ContextMock
func (_mock *ContextMock) Outputs() map[string]any {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Outputs")
	}

	var r0 map[string]any
	if returnFunc, ok := ret.Get(0).(func() map[string]any); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]any)
		}
	}
	return r0
}

// ContextMock_Outputs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Outputs'
type ContextMock_Outputs_Call struct {
	*mock.Call
}

// Outputs is a helper method to define mock.On call
func (_e *ContextMock_Expecter) Outputs() *ContextMock_Outputs_Call {
	return &ContextMock_Outputs_Call{Call: _e.mock.On("Outputs")}
}

func (_c *ContextMock_Outputs_Call) Run(run func()) *ContextMock_Outputs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ContextMock_Outputs_Call) Return(stringToV map[string]any) *ContextMock_Outputs_Call {
	_c.Call.Return(stringToV)
	return _c
}

func (_c *ContextMock_Outputs_Call) RunAndReturn(run func() map[string]any) *ContextMock_Outputs_Call {
	_c.Call.Return(run)
	return _c
}

// Request provides a mock function for the type ContextMock
func (_mock *ContextMock) Request() *heimdall.Request {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Request")
	}

	var r0 *heimdall.Request
	if returnFunc, ok := ret.Get(0).(func() *heimdall.Request); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*heimdall.Request)
		}
	}
	return r0
}

// ContextMock_Request_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Request'
type ContextMock_Request_Call struct {
	*mock.Call
}

// Request is a helper method to define mock.On call
func (_e *ContextMock_Expecter) Request() *ContextMock_Request_Call {
	return &ContextMock_Request_Call{Call: _e.mock.On("Request")}
}

func (_c *ContextMock_Request_Call) Run(run func()) *ContextMock_Request_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ContextMock_Request_Call) Return(request *heimdall.Request) *ContextMock_Request_Call {
	_c.Call.Return(request)
	return _c
}

func (_c *ContextMock_Request_Call) RunAndReturn(run func() *heimdall.Request) *ContextMock_Request_Call {
	_c.Call.Return(run)
	return _c
}

// SetPipelineError provides a mock function for the type ContextMock
func (_mock *ContextMock) SetPipelineError(err error) {
	_mock.Called(err)
	return
}

// ContextMock_SetPipelineError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPipelineError'
type ContextMock_SetPipelineError_Call struct {
	*mock.Call
}

// SetPipelineError is a helper method to define mock.On call
//   - err error
func (_e *ContextMock_Expecter) SetPipelineError(err interface{}) *ContextMock_SetPipelineError_Call {
	return &ContextMock_SetPipelineError_Call{Call: _e.mock.On("SetPipelineError", err)}
}

func (_c *ContextMock_SetPipelineError_Call) Run(run func(err error)) *ContextMock_SetPipelineError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 error
		if args[0] != nil {
			arg0 = args[0].(error)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ContextMock_SetPipelineError_Call) Return() *ContextMock_SetPipelineError_Call {
	_c.Call.Return()
	return _c
}

func (_c *ContextMock_SetPipelineError_Call) RunAndReturn(run func(err error)) *ContextMock_SetPipelineError_Call {
	_c.Run(run)
	return _c
}
