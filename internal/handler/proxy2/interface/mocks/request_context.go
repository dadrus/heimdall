// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"

	heimdall "github.com/dadrus/heimdall/internal/heimdall"
	mock "github.com/stretchr/testify/mock"

	url "net/url"
)

// RequestContextMock is an autogenerated mock type for the RequestContext type
type RequestContextMock struct {
	mock.Mock
}

type RequestContextMock_Expecter struct {
	mock *mock.Mock
}

func (_m *RequestContextMock) EXPECT() *RequestContextMock_Expecter {
	return &RequestContextMock_Expecter{mock: &_m.Mock}
}

// AddCookieForUpstream provides a mock function with given fields: name, value
func (_m *RequestContextMock) AddCookieForUpstream(name string, value string) {
	_m.Called(name, value)
}

// RequestContextMock_AddCookieForUpstream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddCookieForUpstream'
type RequestContextMock_AddCookieForUpstream_Call struct {
	*mock.Call
}

// AddCookieForUpstream is a helper method to define mock.On call
//   - name string
//   - value string
func (_e *RequestContextMock_Expecter) AddCookieForUpstream(name interface{}, value interface{}) *RequestContextMock_AddCookieForUpstream_Call {
	return &RequestContextMock_AddCookieForUpstream_Call{Call: _e.mock.On("AddCookieForUpstream", name, value)}
}

func (_c *RequestContextMock_AddCookieForUpstream_Call) Run(run func(name string, value string)) *RequestContextMock_AddCookieForUpstream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *RequestContextMock_AddCookieForUpstream_Call) Return() *RequestContextMock_AddCookieForUpstream_Call {
	_c.Call.Return()
	return _c
}

func (_c *RequestContextMock_AddCookieForUpstream_Call) RunAndReturn(run func(string, string)) *RequestContextMock_AddCookieForUpstream_Call {
	_c.Call.Return(run)
	return _c
}

// AddHeaderForUpstream provides a mock function with given fields: name, value
func (_m *RequestContextMock) AddHeaderForUpstream(name string, value string) {
	_m.Called(name, value)
}

// RequestContextMock_AddHeaderForUpstream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddHeaderForUpstream'
type RequestContextMock_AddHeaderForUpstream_Call struct {
	*mock.Call
}

// AddHeaderForUpstream is a helper method to define mock.On call
//   - name string
//   - value string
func (_e *RequestContextMock_Expecter) AddHeaderForUpstream(name interface{}, value interface{}) *RequestContextMock_AddHeaderForUpstream_Call {
	return &RequestContextMock_AddHeaderForUpstream_Call{Call: _e.mock.On("AddHeaderForUpstream", name, value)}
}

func (_c *RequestContextMock_AddHeaderForUpstream_Call) Run(run func(name string, value string)) *RequestContextMock_AddHeaderForUpstream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *RequestContextMock_AddHeaderForUpstream_Call) Return() *RequestContextMock_AddHeaderForUpstream_Call {
	_c.Call.Return()
	return _c
}

func (_c *RequestContextMock_AddHeaderForUpstream_Call) RunAndReturn(run func(string, string)) *RequestContextMock_AddHeaderForUpstream_Call {
	_c.Call.Return(run)
	return _c
}

// AppContext provides a mock function with given fields:
func (_m *RequestContextMock) AppContext() context.Context {
	ret := _m.Called()

	var r0 context.Context
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// RequestContextMock_AppContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AppContext'
type RequestContextMock_AppContext_Call struct {
	*mock.Call
}

// AppContext is a helper method to define mock.On call
func (_e *RequestContextMock_Expecter) AppContext() *RequestContextMock_AppContext_Call {
	return &RequestContextMock_AppContext_Call{Call: _e.mock.On("AppContext")}
}

func (_c *RequestContextMock_AppContext_Call) Run(run func()) *RequestContextMock_AppContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RequestContextMock_AppContext_Call) Return(_a0 context.Context) *RequestContextMock_AppContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RequestContextMock_AppContext_Call) RunAndReturn(run func() context.Context) *RequestContextMock_AppContext_Call {
	_c.Call.Return(run)
	return _c
}

// Error provides a mock function with given fields: err
func (_m *RequestContextMock) Error(err error) {
	_m.Called(err)
}

// RequestContextMock_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type RequestContextMock_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
//   - err error
func (_e *RequestContextMock_Expecter) Error(err interface{}) *RequestContextMock_Error_Call {
	return &RequestContextMock_Error_Call{Call: _e.mock.On("Error", err)}
}

func (_c *RequestContextMock_Error_Call) Run(run func(err error)) *RequestContextMock_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *RequestContextMock_Error_Call) Return() *RequestContextMock_Error_Call {
	_c.Call.Return()
	return _c
}

func (_c *RequestContextMock_Error_Call) RunAndReturn(run func(error)) *RequestContextMock_Error_Call {
	_c.Call.Return(run)
	return _c
}

// Finalize provides a mock function with given fields: targetURL
func (_m *RequestContextMock) Finalize(targetURL *url.URL) {
	_m.Called(targetURL)
}

// RequestContextMock_Finalize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Finalize'
type RequestContextMock_Finalize_Call struct {
	*mock.Call
}

// Finalize is a helper method to define mock.On call
//   - targetURL *url.URL
func (_e *RequestContextMock_Expecter) Finalize(targetURL interface{}) *RequestContextMock_Finalize_Call {
	return &RequestContextMock_Finalize_Call{Call: _e.mock.On("Finalize", targetURL)}
}

func (_c *RequestContextMock_Finalize_Call) Run(run func(targetURL *url.URL)) *RequestContextMock_Finalize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*url.URL))
	})
	return _c
}

func (_c *RequestContextMock_Finalize_Call) Return() *RequestContextMock_Finalize_Call {
	_c.Call.Return()
	return _c
}

func (_c *RequestContextMock_Finalize_Call) RunAndReturn(run func(*url.URL)) *RequestContextMock_Finalize_Call {
	_c.Call.Return(run)
	return _c
}

// Request provides a mock function with given fields:
func (_m *RequestContextMock) Request() *heimdall.Request {
	ret := _m.Called()

	var r0 *heimdall.Request
	if rf, ok := ret.Get(0).(func() *heimdall.Request); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*heimdall.Request)
		}
	}

	return r0
}

// RequestContextMock_Request_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Request'
type RequestContextMock_Request_Call struct {
	*mock.Call
}

// Request is a helper method to define mock.On call
func (_e *RequestContextMock_Expecter) Request() *RequestContextMock_Request_Call {
	return &RequestContextMock_Request_Call{Call: _e.mock.On("Request")}
}

func (_c *RequestContextMock_Request_Call) Run(run func()) *RequestContextMock_Request_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RequestContextMock_Request_Call) Return(_a0 *heimdall.Request) *RequestContextMock_Request_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RequestContextMock_Request_Call) RunAndReturn(run func() *heimdall.Request) *RequestContextMock_Request_Call {
	_c.Call.Return(run)
	return _c
}

// SetPipelineError provides a mock function with given fields: err
func (_m *RequestContextMock) SetPipelineError(err error) {
	_m.Called(err)
}

// RequestContextMock_SetPipelineError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPipelineError'
type RequestContextMock_SetPipelineError_Call struct {
	*mock.Call
}

// SetPipelineError is a helper method to define mock.On call
//   - err error
func (_e *RequestContextMock_Expecter) SetPipelineError(err interface{}) *RequestContextMock_SetPipelineError_Call {
	return &RequestContextMock_SetPipelineError_Call{Call: _e.mock.On("SetPipelineError", err)}
}

func (_c *RequestContextMock_SetPipelineError_Call) Run(run func(err error)) *RequestContextMock_SetPipelineError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *RequestContextMock_SetPipelineError_Call) Return() *RequestContextMock_SetPipelineError_Call {
	_c.Call.Return()
	return _c
}

func (_c *RequestContextMock_SetPipelineError_Call) RunAndReturn(run func(error)) *RequestContextMock_SetPipelineError_Call {
	_c.Call.Return(run)
	return _c
}

// Signer provides a mock function with given fields:
func (_m *RequestContextMock) Signer() heimdall.JWTSigner {
	ret := _m.Called()

	var r0 heimdall.JWTSigner
	if rf, ok := ret.Get(0).(func() heimdall.JWTSigner); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(heimdall.JWTSigner)
		}
	}

	return r0
}

// RequestContextMock_Signer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Signer'
type RequestContextMock_Signer_Call struct {
	*mock.Call
}

// Signer is a helper method to define mock.On call
func (_e *RequestContextMock_Expecter) Signer() *RequestContextMock_Signer_Call {
	return &RequestContextMock_Signer_Call{Call: _e.mock.On("Signer")}
}

func (_c *RequestContextMock_Signer_Call) Run(run func()) *RequestContextMock_Signer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RequestContextMock_Signer_Call) Return(_a0 heimdall.JWTSigner) *RequestContextMock_Signer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RequestContextMock_Signer_Call) RunAndReturn(run func() heimdall.JWTSigner) *RequestContextMock_Signer_Call {
	_c.Call.Return(run)
	return _c
}

// UpstreamURLRequired provides a mock function with given fields:
func (_m *RequestContextMock) UpstreamURLRequired() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// RequestContextMock_UpstreamURLRequired_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpstreamURLRequired'
type RequestContextMock_UpstreamURLRequired_Call struct {
	*mock.Call
}

// UpstreamURLRequired is a helper method to define mock.On call
func (_e *RequestContextMock_Expecter) UpstreamURLRequired() *RequestContextMock_UpstreamURLRequired_Call {
	return &RequestContextMock_UpstreamURLRequired_Call{Call: _e.mock.On("UpstreamURLRequired")}
}

func (_c *RequestContextMock_UpstreamURLRequired_Call) Run(run func()) *RequestContextMock_UpstreamURLRequired_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RequestContextMock_UpstreamURLRequired_Call) Return(_a0 bool) *RequestContextMock_UpstreamURLRequired_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RequestContextMock_UpstreamURLRequired_Call) RunAndReturn(run func() bool) *RequestContextMock_UpstreamURLRequired_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewRequestContextMock interface {
	mock.TestingT
	Cleanup(func())
}

// NewRequestContextMock creates a new instance of RequestContextMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRequestContextMock(t mockConstructorTestingTNewRequestContextMock) *RequestContextMock {
	mock := &RequestContextMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
