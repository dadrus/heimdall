// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	watcher "github.com/dadrus/heimdall/internal/watcher"
	mock "github.com/stretchr/testify/mock"
)

// WatcherMock is an autogenerated mock type for the Watcher type
type WatcherMock struct {
	mock.Mock
}

type WatcherMock_Expecter struct {
	mock *mock.Mock
}

func (_m *WatcherMock) EXPECT() *WatcherMock_Expecter {
	return &WatcherMock_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: path, cl
func (_m *WatcherMock) Add(path string, cl watcher.ChangeListener) error {
	ret := _m.Called(path, cl)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, watcher.ChangeListener) error); ok {
		r0 = rf(path, cl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WatcherMock_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type WatcherMock_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - path string
//   - cl watcher.ChangeListener
func (_e *WatcherMock_Expecter) Add(path interface{}, cl interface{}) *WatcherMock_Add_Call {
	return &WatcherMock_Add_Call{Call: _e.mock.On("Add", path, cl)}
}

func (_c *WatcherMock_Add_Call) Run(run func(path string, cl watcher.ChangeListener)) *WatcherMock_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(watcher.ChangeListener))
	})
	return _c
}

func (_c *WatcherMock_Add_Call) Return(_a0 error) *WatcherMock_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WatcherMock_Add_Call) RunAndReturn(run func(string, watcher.ChangeListener) error) *WatcherMock_Add_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewWatcherMock interface {
	mock.TestingT
	Cleanup(func())
}

// NewWatcherMock creates a new instance of WatcherMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewWatcherMock(t mockConstructorTestingTNewWatcherMock) *WatcherMock {
	mock := &WatcherMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
