// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package watcher

import (
	"github.com/rs/zerolog"
	mock "github.com/stretchr/testify/mock"
)

// NewChangeListenerMock creates a new instance of ChangeListenerMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChangeListenerMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ChangeListenerMock {
	mock := &ChangeListenerMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ChangeListenerMock is an autogenerated mock type for the ChangeListener type
type ChangeListenerMock struct {
	mock.Mock
}

type ChangeListenerMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ChangeListenerMock) EXPECT() *ChangeListenerMock_Expecter {
	return &ChangeListenerMock_Expecter{mock: &_m.Mock}
}

// OnChanged provides a mock function for the type ChangeListenerMock
func (_mock *ChangeListenerMock) OnChanged(logger zerolog.Logger) {
	_mock.Called(logger)
	return
}

// ChangeListenerMock_OnChanged_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnChanged'
type ChangeListenerMock_OnChanged_Call struct {
	*mock.Call
}

// OnChanged is a helper method to define mock.On call
//   - logger zerolog.Logger
func (_e *ChangeListenerMock_Expecter) OnChanged(logger interface{}) *ChangeListenerMock_OnChanged_Call {
	return &ChangeListenerMock_OnChanged_Call{Call: _e.mock.On("OnChanged", logger)}
}

func (_c *ChangeListenerMock_OnChanged_Call) Run(run func(logger zerolog.Logger)) *ChangeListenerMock_OnChanged_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 zerolog.Logger
		if args[0] != nil {
			arg0 = args[0].(zerolog.Logger)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ChangeListenerMock_OnChanged_Call) Return() *ChangeListenerMock_OnChanged_Call {
	_c.Call.Return()
	return _c
}

func (_c *ChangeListenerMock_OnChanged_Call) RunAndReturn(run func(logger zerolog.Logger)) *ChangeListenerMock_OnChanged_Call {
	_c.Run(run)
	return _c
}
