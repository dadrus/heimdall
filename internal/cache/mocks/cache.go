// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"time"

	mock "github.com/stretchr/testify/mock"
)

// NewCacheMock creates a new instance of CacheMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCacheMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *CacheMock {
	mock := &CacheMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// CacheMock is an autogenerated mock type for the Cache type
type CacheMock struct {
	mock.Mock
}

type CacheMock_Expecter struct {
	mock *mock.Mock
}

func (_m *CacheMock) EXPECT() *CacheMock_Expecter {
	return &CacheMock_Expecter{mock: &_m.Mock}
}

// Get provides a mock function for the type CacheMock
func (_mock *CacheMock) Get(ctx context.Context, key string) ([]byte, error) {
	ret := _mock.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]byte, error)); ok {
		return returnFunc(ctx, key)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []byte); ok {
		r0 = returnFunc(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// CacheMock_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type CacheMock_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *CacheMock_Expecter) Get(ctx interface{}, key interface{}) *CacheMock_Get_Call {
	return &CacheMock_Get_Call{Call: _e.mock.On("Get", ctx, key)}
}

func (_c *CacheMock_Get_Call) Run(run func(ctx context.Context, key string)) *CacheMock_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *CacheMock_Get_Call) Return(bytes []byte, err error) *CacheMock_Get_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *CacheMock_Get_Call) RunAndReturn(run func(ctx context.Context, key string) ([]byte, error)) *CacheMock_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function for the type CacheMock
func (_mock *CacheMock) Set(ctx context.Context, key string, value []byte, ttl time.Duration) error {
	ret := _mock.Called(ctx, key, value, ttl)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []byte, time.Duration) error); ok {
		r0 = returnFunc(ctx, key, value, ttl)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// CacheMock_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type CacheMock_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - value []byte
//   - ttl time.Duration
func (_e *CacheMock_Expecter) Set(ctx interface{}, key interface{}, value interface{}, ttl interface{}) *CacheMock_Set_Call {
	return &CacheMock_Set_Call{Call: _e.mock.On("Set", ctx, key, value, ttl)}
}

func (_c *CacheMock_Set_Call) Run(run func(ctx context.Context, key string, value []byte, ttl time.Duration)) *CacheMock_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []byte
		if args[2] != nil {
			arg2 = args[2].([]byte)
		}
		var arg3 time.Duration
		if args[3] != nil {
			arg3 = args[3].(time.Duration)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *CacheMock_Set_Call) Return(err error) *CacheMock_Set_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *CacheMock_Set_Call) RunAndReturn(run func(ctx context.Context, key string, value []byte, ttl time.Duration) error) *CacheMock_Set_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function for the type CacheMock
func (_mock *CacheMock) Start(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// CacheMock_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type CacheMock_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *CacheMock_Expecter) Start(ctx interface{}) *CacheMock_Start_Call {
	return &CacheMock_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *CacheMock_Start_Call) Run(run func(ctx context.Context)) *CacheMock_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *CacheMock_Start_Call) Return(err error) *CacheMock_Start_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *CacheMock_Start_Call) RunAndReturn(run func(ctx context.Context) error) *CacheMock_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function for the type CacheMock
func (_mock *CacheMock) Stop(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// CacheMock_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type CacheMock_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
//   - ctx context.Context
func (_e *CacheMock_Expecter) Stop(ctx interface{}) *CacheMock_Stop_Call {
	return &CacheMock_Stop_Call{Call: _e.mock.On("Stop", ctx)}
}

func (_c *CacheMock_Stop_Call) Run(run func(ctx context.Context)) *CacheMock_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *CacheMock_Stop_Call) Return(err error) *CacheMock_Stop_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *CacheMock_Stop_Call) RunAndReturn(run func(ctx context.Context) error) *CacheMock_Stop_Call {
	_c.Call.Return(run)
	return _c
}
