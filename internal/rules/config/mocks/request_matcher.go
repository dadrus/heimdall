// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	heimdall "github.com/dadrus/heimdall/internal/heimdall"
	mock "github.com/stretchr/testify/mock"
)

// RequestMatcherMock is an autogenerated mock type for the RequestMatcher type
type RequestMatcherMock struct {
	mock.Mock
}

type RequestMatcherMock_Expecter struct {
	mock *mock.Mock
}

func (_m *RequestMatcherMock) EXPECT() *RequestMatcherMock_Expecter {
	return &RequestMatcherMock_Expecter{mock: &_m.Mock}
}

// Matches provides a mock function with given fields: request
func (_m *RequestMatcherMock) Matches(request *heimdall.Request) error {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for Matches")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*heimdall.Request) error); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RequestMatcherMock_Matches_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Matches'
type RequestMatcherMock_Matches_Call struct {
	*mock.Call
}

// Matches is a helper method to define mock.On call
//   - request *heimdall.Request
func (_e *RequestMatcherMock_Expecter) Matches(request interface{}) *RequestMatcherMock_Matches_Call {
	return &RequestMatcherMock_Matches_Call{Call: _e.mock.On("Matches", request)}
}

func (_c *RequestMatcherMock_Matches_Call) Run(run func(request *heimdall.Request)) *RequestMatcherMock_Matches_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*heimdall.Request))
	})
	return _c
}

func (_c *RequestMatcherMock_Matches_Call) Return(_a0 error) *RequestMatcherMock_Matches_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RequestMatcherMock_Matches_Call) RunAndReturn(run func(*heimdall.Request) error) *RequestMatcherMock_Matches_Call {
	_c.Call.Return(run)
	return _c
}

// NewRequestMatcherMock creates a new instance of RequestMatcherMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRequestMatcherMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *RequestMatcherMock {
	mock := &RequestMatcherMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
