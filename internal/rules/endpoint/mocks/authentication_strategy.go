// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"net/http"

	mock "github.com/stretchr/testify/mock"
)

// NewAuthenticationStrategyMock creates a new instance of AuthenticationStrategyMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthenticationStrategyMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthenticationStrategyMock {
	mock := &AuthenticationStrategyMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// AuthenticationStrategyMock is an autogenerated mock type for the AuthenticationStrategy type
type AuthenticationStrategyMock struct {
	mock.Mock
}

type AuthenticationStrategyMock_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthenticationStrategyMock) EXPECT() *AuthenticationStrategyMock_Expecter {
	return &AuthenticationStrategyMock_Expecter{mock: &_m.Mock}
}

// Apply provides a mock function for the type AuthenticationStrategyMock
func (_mock *AuthenticationStrategyMock) Apply(ctx context.Context, req *http.Request) error {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Apply")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *http.Request) error); ok {
		r0 = returnFunc(ctx, req)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// AuthenticationStrategyMock_Apply_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Apply'
type AuthenticationStrategyMock_Apply_Call struct {
	*mock.Call
}

// Apply is a helper method to define mock.On call
//   - ctx context.Context
//   - req *http.Request
func (_e *AuthenticationStrategyMock_Expecter) Apply(ctx interface{}, req interface{}) *AuthenticationStrategyMock_Apply_Call {
	return &AuthenticationStrategyMock_Apply_Call{Call: _e.mock.On("Apply", ctx, req)}
}

func (_c *AuthenticationStrategyMock_Apply_Call) Run(run func(ctx context.Context, req *http.Request)) *AuthenticationStrategyMock_Apply_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *http.Request
		if args[1] != nil {
			arg1 = args[1].(*http.Request)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *AuthenticationStrategyMock_Apply_Call) Return(err error) *AuthenticationStrategyMock_Apply_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *AuthenticationStrategyMock_Apply_Call) RunAndReturn(run func(ctx context.Context, req *http.Request) error) *AuthenticationStrategyMock_Apply_Call {
	_c.Call.Return(run)
	return _c
}

// Hash provides a mock function for the type AuthenticationStrategyMock
func (_mock *AuthenticationStrategyMock) Hash() []byte {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Hash")
	}

	var r0 []byte
	if returnFunc, ok := ret.Get(0).(func() []byte); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	return r0
}

// AuthenticationStrategyMock_Hash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Hash'
type AuthenticationStrategyMock_Hash_Call struct {
	*mock.Call
}

// Hash is a helper method to define mock.On call
func (_e *AuthenticationStrategyMock_Expecter) Hash() *AuthenticationStrategyMock_Hash_Call {
	return &AuthenticationStrategyMock_Hash_Call{Call: _e.mock.On("Hash")}
}

func (_c *AuthenticationStrategyMock_Hash_Call) Run(run func()) *AuthenticationStrategyMock_Hash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AuthenticationStrategyMock_Hash_Call) Return(bytes []byte) *AuthenticationStrategyMock_Hash_Call {
	_c.Call.Return(bytes)
	return _c
}

func (_c *AuthenticationStrategyMock_Hash_Call) RunAndReturn(run func() []byte) *AuthenticationStrategyMock_Hash_Call {
	_c.Call.Return(run)
	return _c
}
