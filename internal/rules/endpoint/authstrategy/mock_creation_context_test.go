// Code generated by mockery v2.42.1. DO NOT EDIT.

package authstrategy

import (
	keyholder "github.com/dadrus/heimdall/internal/keyholder"
	certificate "github.com/dadrus/heimdall/internal/otel/metrics/certificate"

	mock "github.com/stretchr/testify/mock"

	watcher "github.com/dadrus/heimdall/internal/watcher"
)

// CreationContextMock is an autogenerated mock type for the CreationContext type
type CreationContextMock struct {
	mock.Mock
}

type CreationContextMock_Expecter struct {
	mock *mock.Mock
}

func (_m *CreationContextMock) EXPECT() *CreationContextMock_Expecter {
	return &CreationContextMock_Expecter{mock: &_m.Mock}
}

// CertificateObserver provides a mock function with given fields:
func (_m *CreationContextMock) CertificateObserver() certificate.Observer {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CertificateObserver")
	}

	var r0 certificate.Observer
	if rf, ok := ret.Get(0).(func() certificate.Observer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(certificate.Observer)
		}
	}

	return r0
}

// CreationContextMock_CertificateObserver_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CertificateObserver'
type CreationContextMock_CertificateObserver_Call struct {
	*mock.Call
}

// CertificateObserver is a helper method to define mock.On call
func (_e *CreationContextMock_Expecter) CertificateObserver() *CreationContextMock_CertificateObserver_Call {
	return &CreationContextMock_CertificateObserver_Call{Call: _e.mock.On("CertificateObserver")}
}

func (_c *CreationContextMock_CertificateObserver_Call) Run(run func()) *CreationContextMock_CertificateObserver_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CreationContextMock_CertificateObserver_Call) Return(_a0 certificate.Observer) *CreationContextMock_CertificateObserver_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CreationContextMock_CertificateObserver_Call) RunAndReturn(run func() certificate.Observer) *CreationContextMock_CertificateObserver_Call {
	_c.Call.Return(run)
	return _c
}

// KeyHolderRegistry provides a mock function with given fields:
func (_m *CreationContextMock) KeyHolderRegistry() keyholder.Registry {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for KeyHolderRegistry")
	}

	var r0 keyholder.Registry
	if rf, ok := ret.Get(0).(func() keyholder.Registry); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(keyholder.Registry)
		}
	}

	return r0
}

// CreationContextMock_KeyHolderRegistry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'KeyHolderRegistry'
type CreationContextMock_KeyHolderRegistry_Call struct {
	*mock.Call
}

// KeyHolderRegistry is a helper method to define mock.On call
func (_e *CreationContextMock_Expecter) KeyHolderRegistry() *CreationContextMock_KeyHolderRegistry_Call {
	return &CreationContextMock_KeyHolderRegistry_Call{Call: _e.mock.On("KeyHolderRegistry")}
}

func (_c *CreationContextMock_KeyHolderRegistry_Call) Run(run func()) *CreationContextMock_KeyHolderRegistry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CreationContextMock_KeyHolderRegistry_Call) Return(_a0 keyholder.Registry) *CreationContextMock_KeyHolderRegistry_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CreationContextMock_KeyHolderRegistry_Call) RunAndReturn(run func() keyholder.Registry) *CreationContextMock_KeyHolderRegistry_Call {
	_c.Call.Return(run)
	return _c
}

// Watcher provides a mock function with given fields:
func (_m *CreationContextMock) Watcher() watcher.Watcher {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Watcher")
	}

	var r0 watcher.Watcher
	if rf, ok := ret.Get(0).(func() watcher.Watcher); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(watcher.Watcher)
		}
	}

	return r0
}

// CreationContextMock_Watcher_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Watcher'
type CreationContextMock_Watcher_Call struct {
	*mock.Call
}

// Watcher is a helper method to define mock.On call
func (_e *CreationContextMock_Expecter) Watcher() *CreationContextMock_Watcher_Call {
	return &CreationContextMock_Watcher_Call{Call: _e.mock.On("Watcher")}
}

func (_c *CreationContextMock_Watcher_Call) Run(run func()) *CreationContextMock_Watcher_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CreationContextMock_Watcher_Call) Return(_a0 watcher.Watcher) *CreationContextMock_Watcher_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CreationContextMock_Watcher_Call) RunAndReturn(run func() watcher.Watcher) *CreationContextMock_Watcher_Call {
	_c.Call.Return(run)
	return _c
}

// NewCreationContextMock creates a new instance of CreationContextMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCreationContextMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *CreationContextMock {
	mock := &CreationContextMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
