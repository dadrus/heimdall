// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/dadrus/heimdall/internal/heimdall"
	"github.com/dadrus/heimdall/internal/rules/rule"
	mock "github.com/stretchr/testify/mock"
)

// NewRepositoryMock creates a new instance of RepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepositoryMock {
	mock := &RepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// RepositoryMock is an autogenerated mock type for the Repository type
type RepositoryMock struct {
	mock.Mock
}

type RepositoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *RepositoryMock) EXPECT() *RepositoryMock_Expecter {
	return &RepositoryMock_Expecter{mock: &_m.Mock}
}

// AddRuleSet provides a mock function for the type RepositoryMock
func (_mock *RepositoryMock) AddRuleSet(ctx context.Context, srcID string, rules []rule.Rule) error {
	ret := _mock.Called(ctx, srcID, rules)

	if len(ret) == 0 {
		panic("no return value specified for AddRuleSet")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []rule.Rule) error); ok {
		r0 = returnFunc(ctx, srcID, rules)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// RepositoryMock_AddRuleSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddRuleSet'
type RepositoryMock_AddRuleSet_Call struct {
	*mock.Call
}

// AddRuleSet is a helper method to define mock.On call
//   - ctx context.Context
//   - srcID string
//   - rules []rule.Rule
func (_e *RepositoryMock_Expecter) AddRuleSet(ctx interface{}, srcID interface{}, rules interface{}) *RepositoryMock_AddRuleSet_Call {
	return &RepositoryMock_AddRuleSet_Call{Call: _e.mock.On("AddRuleSet", ctx, srcID, rules)}
}

func (_c *RepositoryMock_AddRuleSet_Call) Run(run func(ctx context.Context, srcID string, rules []rule.Rule)) *RepositoryMock_AddRuleSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []rule.Rule
		if args[2] != nil {
			arg2 = args[2].([]rule.Rule)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *RepositoryMock_AddRuleSet_Call) Return(err error) *RepositoryMock_AddRuleSet_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *RepositoryMock_AddRuleSet_Call) RunAndReturn(run func(ctx context.Context, srcID string, rules []rule.Rule) error) *RepositoryMock_AddRuleSet_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRuleSet provides a mock function for the type RepositoryMock
func (_mock *RepositoryMock) DeleteRuleSet(ctx context.Context, srcID string) error {
	ret := _mock.Called(ctx, srcID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRuleSet")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, srcID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// RepositoryMock_DeleteRuleSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRuleSet'
type RepositoryMock_DeleteRuleSet_Call struct {
	*mock.Call
}

// DeleteRuleSet is a helper method to define mock.On call
//   - ctx context.Context
//   - srcID string
func (_e *RepositoryMock_Expecter) DeleteRuleSet(ctx interface{}, srcID interface{}) *RepositoryMock_DeleteRuleSet_Call {
	return &RepositoryMock_DeleteRuleSet_Call{Call: _e.mock.On("DeleteRuleSet", ctx, srcID)}
}

func (_c *RepositoryMock_DeleteRuleSet_Call) Run(run func(ctx context.Context, srcID string)) *RepositoryMock_DeleteRuleSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *RepositoryMock_DeleteRuleSet_Call) Return(err error) *RepositoryMock_DeleteRuleSet_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *RepositoryMock_DeleteRuleSet_Call) RunAndReturn(run func(ctx context.Context, srcID string) error) *RepositoryMock_DeleteRuleSet_Call {
	_c.Call.Return(run)
	return _c
}

// FindRule provides a mock function for the type RepositoryMock
func (_mock *RepositoryMock) FindRule(ctx heimdall.RequestContext) (rule.Rule, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FindRule")
	}

	var r0 rule.Rule
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(heimdall.RequestContext) (rule.Rule, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(heimdall.RequestContext) rule.Rule); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rule.Rule)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(heimdall.RequestContext) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// RepositoryMock_FindRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindRule'
type RepositoryMock_FindRule_Call struct {
	*mock.Call
}

// FindRule is a helper method to define mock.On call
//   - ctx heimdall.RequestContext
func (_e *RepositoryMock_Expecter) FindRule(ctx interface{}) *RepositoryMock_FindRule_Call {
	return &RepositoryMock_FindRule_Call{Call: _e.mock.On("FindRule", ctx)}
}

func (_c *RepositoryMock_FindRule_Call) Run(run func(ctx heimdall.RequestContext)) *RepositoryMock_FindRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 heimdall.RequestContext
		if args[0] != nil {
			arg0 = args[0].(heimdall.RequestContext)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *RepositoryMock_FindRule_Call) Return(rule1 rule.Rule, err error) *RepositoryMock_FindRule_Call {
	_c.Call.Return(rule1, err)
	return _c
}

func (_c *RepositoryMock_FindRule_Call) RunAndReturn(run func(ctx heimdall.RequestContext) (rule.Rule, error)) *RepositoryMock_FindRule_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRuleSet provides a mock function for the type RepositoryMock
func (_mock *RepositoryMock) UpdateRuleSet(ctx context.Context, srcID string, rules []rule.Rule) error {
	ret := _mock.Called(ctx, srcID, rules)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRuleSet")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []rule.Rule) error); ok {
		r0 = returnFunc(ctx, srcID, rules)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// RepositoryMock_UpdateRuleSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRuleSet'
type RepositoryMock_UpdateRuleSet_Call struct {
	*mock.Call
}

// UpdateRuleSet is a helper method to define mock.On call
//   - ctx context.Context
//   - srcID string
//   - rules []rule.Rule
func (_e *RepositoryMock_Expecter) UpdateRuleSet(ctx interface{}, srcID interface{}, rules interface{}) *RepositoryMock_UpdateRuleSet_Call {
	return &RepositoryMock_UpdateRuleSet_Call{Call: _e.mock.On("UpdateRuleSet", ctx, srcID, rules)}
}

func (_c *RepositoryMock_UpdateRuleSet_Call) Run(run func(ctx context.Context, srcID string, rules []rule.Rule)) *RepositoryMock_UpdateRuleSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []rule.Rule
		if args[2] != nil {
			arg2 = args[2].([]rule.Rule)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *RepositoryMock_UpdateRuleSet_Call) Return(err error) *RepositoryMock_UpdateRuleSet_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *RepositoryMock_UpdateRuleSet_Call) RunAndReturn(run func(ctx context.Context, srcID string, rules []rule.Rule) error) *RepositoryMock_UpdateRuleSet_Call {
	_c.Call.Return(run)
	return _c
}
