// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	url "net/url"

	rule "github.com/dadrus/heimdall/internal/rules/rule"
	mock "github.com/stretchr/testify/mock"
)

// RepositoryMock is an autogenerated mock type for the Repository type
type RepositoryMock struct {
	mock.Mock
}

type RepositoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *RepositoryMock) EXPECT() *RepositoryMock_Expecter {
	return &RepositoryMock_Expecter{mock: &_m.Mock}
}

// FindRule provides a mock function with given fields: toMatch
func (_m *RepositoryMock) FindRule(toMatch *url.URL) (rule.Rule, error) {
	ret := _m.Called(toMatch)

	if len(ret) == 0 {
		panic("no return value specified for FindRule")
	}

	var r0 rule.Rule
	var r1 error
	if rf, ok := ret.Get(0).(func(*url.URL) (rule.Rule, error)); ok {
		return rf(toMatch)
	}
	if rf, ok := ret.Get(0).(func(*url.URL) rule.Rule); ok {
		r0 = rf(toMatch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rule.Rule)
		}
	}

	if rf, ok := ret.Get(1).(func(*url.URL) error); ok {
		r1 = rf(toMatch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepositoryMock_FindRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindRule'
type RepositoryMock_FindRule_Call struct {
	*mock.Call
}

// FindRule is a helper method to define mock.On call
//   - toMatch *url.URL
func (_e *RepositoryMock_Expecter) FindRule(toMatch interface{}) *RepositoryMock_FindRule_Call {
	return &RepositoryMock_FindRule_Call{Call: _e.mock.On("FindRule", toMatch)}
}

func (_c *RepositoryMock_FindRule_Call) Run(run func(toMatch *url.URL)) *RepositoryMock_FindRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*url.URL))
	})
	return _c
}

func (_c *RepositoryMock_FindRule_Call) Return(_a0 rule.Rule, _a1 error) *RepositoryMock_FindRule_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RepositoryMock_FindRule_Call) RunAndReturn(run func(*url.URL) (rule.Rule, error)) *RepositoryMock_FindRule_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepositoryMock creates a new instance of RepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepositoryMock {
	mock := &RepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
