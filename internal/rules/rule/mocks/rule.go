// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/dadrus/heimdall/internal/heimdall"
	"github.com/dadrus/heimdall/internal/rules/rule"
	mock "github.com/stretchr/testify/mock"
)

// NewRuleMock creates a new instance of RuleMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRuleMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *RuleMock {
	mock := &RuleMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// RuleMock is an autogenerated mock type for the Rule type
type RuleMock struct {
	mock.Mock
}

type RuleMock_Expecter struct {
	mock *mock.Mock
}

func (_m *RuleMock) EXPECT() *RuleMock_Expecter {
	return &RuleMock_Expecter{mock: &_m.Mock}
}

// EqualTo provides a mock function for the type RuleMock
func (_mock *RuleMock) EqualTo(other rule.Rule) bool {
	ret := _mock.Called(other)

	if len(ret) == 0 {
		panic("no return value specified for EqualTo")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(rule.Rule) bool); ok {
		r0 = returnFunc(other)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// RuleMock_EqualTo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EqualTo'
type RuleMock_EqualTo_Call struct {
	*mock.Call
}

// EqualTo is a helper method to define mock.On call
//   - other rule.Rule
func (_e *RuleMock_Expecter) EqualTo(other interface{}) *RuleMock_EqualTo_Call {
	return &RuleMock_EqualTo_Call{Call: _e.mock.On("EqualTo", other)}
}

func (_c *RuleMock_EqualTo_Call) Run(run func(other rule.Rule)) *RuleMock_EqualTo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 rule.Rule
		if args[0] != nil {
			arg0 = args[0].(rule.Rule)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *RuleMock_EqualTo_Call) Return(b bool) *RuleMock_EqualTo_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *RuleMock_EqualTo_Call) RunAndReturn(run func(other rule.Rule) bool) *RuleMock_EqualTo_Call {
	_c.Call.Return(run)
	return _c
}

// Execute provides a mock function for the type RuleMock
func (_mock *RuleMock) Execute(ctx heimdall.RequestContext) (rule.Backend, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 rule.Backend
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(heimdall.RequestContext) (rule.Backend, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(heimdall.RequestContext) rule.Backend); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rule.Backend)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(heimdall.RequestContext) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// RuleMock_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type RuleMock_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx heimdall.RequestContext
func (_e *RuleMock_Expecter) Execute(ctx interface{}) *RuleMock_Execute_Call {
	return &RuleMock_Execute_Call{Call: _e.mock.On("Execute", ctx)}
}

func (_c *RuleMock_Execute_Call) Run(run func(ctx heimdall.RequestContext)) *RuleMock_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 heimdall.RequestContext
		if args[0] != nil {
			arg0 = args[0].(heimdall.RequestContext)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *RuleMock_Execute_Call) Return(backend rule.Backend, err error) *RuleMock_Execute_Call {
	_c.Call.Return(backend, err)
	return _c
}

func (_c *RuleMock_Execute_Call) RunAndReturn(run func(ctx heimdall.RequestContext) (rule.Backend, error)) *RuleMock_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// ID provides a mock function for the type RuleMock
func (_mock *RuleMock) ID() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// RuleMock_ID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ID'
type RuleMock_ID_Call struct {
	*mock.Call
}

// ID is a helper method to define mock.On call
func (_e *RuleMock_Expecter) ID() *RuleMock_ID_Call {
	return &RuleMock_ID_Call{Call: _e.mock.On("ID")}
}

func (_c *RuleMock_ID_Call) Run(run func()) *RuleMock_ID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RuleMock_ID_Call) Return(s string) *RuleMock_ID_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *RuleMock_ID_Call) RunAndReturn(run func() string) *RuleMock_ID_Call {
	_c.Call.Return(run)
	return _c
}

// Routes provides a mock function for the type RuleMock
func (_mock *RuleMock) Routes() []rule.Route {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Routes")
	}

	var r0 []rule.Route
	if returnFunc, ok := ret.Get(0).(func() []rule.Route); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]rule.Route)
		}
	}
	return r0
}

// RuleMock_Routes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Routes'
type RuleMock_Routes_Call struct {
	*mock.Call
}

// Routes is a helper method to define mock.On call
func (_e *RuleMock_Expecter) Routes() *RuleMock_Routes_Call {
	return &RuleMock_Routes_Call{Call: _e.mock.On("Routes")}
}

func (_c *RuleMock_Routes_Call) Run(run func()) *RuleMock_Routes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RuleMock_Routes_Call) Return(routes []rule.Route) *RuleMock_Routes_Call {
	_c.Call.Return(routes)
	return _c
}

func (_c *RuleMock_Routes_Call) RunAndReturn(run func() []rule.Route) *RuleMock_Routes_Call {
	_c.Call.Return(run)
	return _c
}

// SameAs provides a mock function for the type RuleMock
func (_mock *RuleMock) SameAs(other rule.Rule) bool {
	ret := _mock.Called(other)

	if len(ret) == 0 {
		panic("no return value specified for SameAs")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(rule.Rule) bool); ok {
		r0 = returnFunc(other)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// RuleMock_SameAs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SameAs'
type RuleMock_SameAs_Call struct {
	*mock.Call
}

// SameAs is a helper method to define mock.On call
//   - other rule.Rule
func (_e *RuleMock_Expecter) SameAs(other interface{}) *RuleMock_SameAs_Call {
	return &RuleMock_SameAs_Call{Call: _e.mock.On("SameAs", other)}
}

func (_c *RuleMock_SameAs_Call) Run(run func(other rule.Rule)) *RuleMock_SameAs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 rule.Rule
		if args[0] != nil {
			arg0 = args[0].(rule.Rule)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *RuleMock_SameAs_Call) Return(b bool) *RuleMock_SameAs_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *RuleMock_SameAs_Call) RunAndReturn(run func(other rule.Rule) bool) *RuleMock_SameAs_Call {
	_c.Call.Return(run)
	return _c
}

// SrcID provides a mock function for the type RuleMock
func (_mock *RuleMock) SrcID() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for SrcID")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// RuleMock_SrcID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SrcID'
type RuleMock_SrcID_Call struct {
	*mock.Call
}

// SrcID is a helper method to define mock.On call
func (_e *RuleMock_Expecter) SrcID() *RuleMock_SrcID_Call {
	return &RuleMock_SrcID_Call{Call: _e.mock.On("SrcID")}
}

func (_c *RuleMock_SrcID_Call) Run(run func()) *RuleMock_SrcID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RuleMock_SrcID_Call) Return(s string) *RuleMock_SrcID_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *RuleMock_SrcID_Call) RunAndReturn(run func() string) *RuleMock_SrcID_Call {
	_c.Call.Return(run)
	return _c
}
