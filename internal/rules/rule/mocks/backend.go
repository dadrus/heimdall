// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	url "net/url"
)

// BackendMock is an autogenerated mock type for the Backend type
type BackendMock struct {
	mock.Mock
}

type BackendMock_Expecter struct {
	mock *mock.Mock
}

func (_m *BackendMock) EXPECT() *BackendMock_Expecter {
	return &BackendMock_Expecter{mock: &_m.Mock}
}

// URL provides a mock function with given fields:
func (_m *BackendMock) URL() *url.URL {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for URL")
	}

	var r0 *url.URL
	if rf, ok := ret.Get(0).(func() *url.URL); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*url.URL)
		}
	}

	return r0
}

// BackendMock_URL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'URL'
type BackendMock_URL_Call struct {
	*mock.Call
}

// URL is a helper method to define mock.On call
func (_e *BackendMock_Expecter) URL() *BackendMock_URL_Call {
	return &BackendMock_URL_Call{Call: _e.mock.On("URL")}
}

func (_c *BackendMock_URL_Call) Run(run func()) *BackendMock_URL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BackendMock_URL_Call) Return(_a0 *url.URL) *BackendMock_URL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BackendMock_URL_Call) RunAndReturn(run func() *url.URL) *BackendMock_URL_Call {
	_c.Call.Return(run)
	return _c
}

// NewBackendMock creates a new instance of BackendMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBackendMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *BackendMock {
	mock := &BackendMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
