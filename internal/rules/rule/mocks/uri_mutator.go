// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	url "net/url"
)

// URIMutatorMock is an autogenerated mock type for the URIMutator type
type URIMutatorMock struct {
	mock.Mock
}

type URIMutatorMock_Expecter struct {
	mock *mock.Mock
}

func (_m *URIMutatorMock) EXPECT() *URIMutatorMock_Expecter {
	return &URIMutatorMock_Expecter{mock: &_m.Mock}
}

// Mutate provides a mock function with given fields: uri
func (_m *URIMutatorMock) Mutate(uri *url.URL) (*url.URL, error) {
	ret := _m.Called(uri)

	var r0 *url.URL
	var r1 error
	if rf, ok := ret.Get(0).(func(*url.URL) (*url.URL, error)); ok {
		return rf(uri)
	}
	if rf, ok := ret.Get(0).(func(*url.URL) *url.URL); ok {
		r0 = rf(uri)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*url.URL)
		}
	}

	if rf, ok := ret.Get(1).(func(*url.URL) error); ok {
		r1 = rf(uri)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// URIMutatorMock_Mutate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Mutate'
type URIMutatorMock_Mutate_Call struct {
	*mock.Call
}

// Mutate is a helper method to define mock.On call
//   - uri *url.URL
func (_e *URIMutatorMock_Expecter) Mutate(uri interface{}) *URIMutatorMock_Mutate_Call {
	return &URIMutatorMock_Mutate_Call{Call: _e.mock.On("Mutate", uri)}
}

func (_c *URIMutatorMock_Mutate_Call) Run(run func(uri *url.URL)) *URIMutatorMock_Mutate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*url.URL))
	})
	return _c
}

func (_c *URIMutatorMock_Mutate_Call) Return(_a0 *url.URL, _a1 error) *URIMutatorMock_Mutate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *URIMutatorMock_Mutate_Call) RunAndReturn(run func(*url.URL) (*url.URL, error)) *URIMutatorMock_Mutate_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewURIMutatorMock interface {
	mock.TestingT
	Cleanup(func())
}

// NewURIMutatorMock creates a new instance of URIMutatorMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewURIMutatorMock(t mockConstructorTestingTNewURIMutatorMock) *URIMutatorMock {
	mock := &URIMutatorMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
