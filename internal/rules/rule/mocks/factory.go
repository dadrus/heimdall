// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/dadrus/heimdall/internal/rules/api/v1beta1"
	"github.com/dadrus/heimdall/internal/rules/rule"
	mock "github.com/stretchr/testify/mock"
)

// NewFactoryMock creates a new instance of FactoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFactoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *FactoryMock {
	mock := &FactoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// FactoryMock is an autogenerated mock type for the Factory type
type FactoryMock struct {
	mock.Mock
}

type FactoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *FactoryMock) EXPECT() *FactoryMock_Expecter {
	return &FactoryMock_Expecter{mock: &_m.Mock}
}

// CreateRule provides a mock function for the type FactoryMock
func (_mock *FactoryMock) CreateRule(srcID string, ruleConfig v1beta1.Rule) (rule.Rule, error) {
	ret := _mock.Called(srcID, ruleConfig)

	if len(ret) == 0 {
		panic("no return value specified for CreateRule")
	}

	var r0 rule.Rule
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, v1beta1.Rule) (rule.Rule, error)); ok {
		return returnFunc(srcID, ruleConfig)
	}
	if returnFunc, ok := ret.Get(0).(func(string, v1beta1.Rule) rule.Rule); ok {
		r0 = returnFunc(srcID, ruleConfig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rule.Rule)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, v1beta1.Rule) error); ok {
		r1 = returnFunc(srcID, ruleConfig)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// FactoryMock_CreateRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRule'
type FactoryMock_CreateRule_Call struct {
	*mock.Call
}

// CreateRule is a helper method to define mock.On call
//   - srcID string
//   - ruleConfig v1beta1.Rule
func (_e *FactoryMock_Expecter) CreateRule(srcID interface{}, ruleConfig interface{}) *FactoryMock_CreateRule_Call {
	return &FactoryMock_CreateRule_Call{Call: _e.mock.On("CreateRule", srcID, ruleConfig)}
}

func (_c *FactoryMock_CreateRule_Call) Run(run func(srcID string, ruleConfig v1beta1.Rule)) *FactoryMock_CreateRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 v1beta1.Rule
		if args[1] != nil {
			arg1 = args[1].(v1beta1.Rule)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *FactoryMock_CreateRule_Call) Return(rule1 rule.Rule, err error) *FactoryMock_CreateRule_Call {
	_c.Call.Return(rule1, err)
	return _c
}

func (_c *FactoryMock_CreateRule_Call) RunAndReturn(run func(srcID string, ruleConfig v1beta1.Rule) (rule.Rule, error)) *FactoryMock_CreateRule_Call {
	_c.Call.Return(run)
	return _c
}

// DefaultRule provides a mock function for the type FactoryMock
func (_mock *FactoryMock) DefaultRule() rule.Rule {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for DefaultRule")
	}

	var r0 rule.Rule
	if returnFunc, ok := ret.Get(0).(func() rule.Rule); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rule.Rule)
		}
	}
	return r0
}

// FactoryMock_DefaultRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DefaultRule'
type FactoryMock_DefaultRule_Call struct {
	*mock.Call
}

// DefaultRule is a helper method to define mock.On call
func (_e *FactoryMock_Expecter) DefaultRule() *FactoryMock_DefaultRule_Call {
	return &FactoryMock_DefaultRule_Call{Call: _e.mock.On("DefaultRule")}
}

func (_c *FactoryMock_DefaultRule_Call) Run(run func()) *FactoryMock_DefaultRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FactoryMock_DefaultRule_Call) Return(rule1 rule.Rule) *FactoryMock_DefaultRule_Call {
	_c.Call.Return(rule1)
	return _c
}

func (_c *FactoryMock_DefaultRule_Call) RunAndReturn(run func() rule.Rule) *FactoryMock_DefaultRule_Call {
	_c.Call.Return(run)
	return _c
}

// HasDefaultRule provides a mock function for the type FactoryMock
func (_mock *FactoryMock) HasDefaultRule() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for HasDefaultRule")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// FactoryMock_HasDefaultRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasDefaultRule'
type FactoryMock_HasDefaultRule_Call struct {
	*mock.Call
}

// HasDefaultRule is a helper method to define mock.On call
func (_e *FactoryMock_Expecter) HasDefaultRule() *FactoryMock_HasDefaultRule_Call {
	return &FactoryMock_HasDefaultRule_Call{Call: _e.mock.On("HasDefaultRule")}
}

func (_c *FactoryMock_HasDefaultRule_Call) Run(run func()) *FactoryMock_HasDefaultRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FactoryMock_HasDefaultRule_Call) Return(b bool) *FactoryMock_HasDefaultRule_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *FactoryMock_HasDefaultRule_Call) RunAndReturn(run func() bool) *FactoryMock_HasDefaultRule_Call {
	_c.Call.Return(run)
	return _c
}
