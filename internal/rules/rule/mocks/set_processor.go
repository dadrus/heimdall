// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	config "github.com/dadrus/heimdall/internal/rules/config"
	mock "github.com/stretchr/testify/mock"
)

// RuleSetProcessorMock is an autogenerated mock type for the SetProcessor type
type RuleSetProcessorMock struct {
	mock.Mock
}

type RuleSetProcessorMock_Expecter struct {
	mock *mock.Mock
}

func (_m *RuleSetProcessorMock) EXPECT() *RuleSetProcessorMock_Expecter {
	return &RuleSetProcessorMock_Expecter{mock: &_m.Mock}
}

// OnCreated provides a mock function with given fields: ruleSet
func (_m *RuleSetProcessorMock) OnCreated(ruleSet *config.RuleSet) error {
	ret := _m.Called(ruleSet)

	if len(ret) == 0 {
		panic("no return value specified for OnCreated")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*config.RuleSet) error); ok {
		r0 = rf(ruleSet)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RuleSetProcessorMock_OnCreated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnCreated'
type RuleSetProcessorMock_OnCreated_Call struct {
	*mock.Call
}

// OnCreated is a helper method to define mock.On call
//   - ruleSet *config.RuleSet
func (_e *RuleSetProcessorMock_Expecter) OnCreated(ruleSet interface{}) *RuleSetProcessorMock_OnCreated_Call {
	return &RuleSetProcessorMock_OnCreated_Call{Call: _e.mock.On("OnCreated", ruleSet)}
}

func (_c *RuleSetProcessorMock_OnCreated_Call) Run(run func(ruleSet *config.RuleSet)) *RuleSetProcessorMock_OnCreated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*config.RuleSet))
	})
	return _c
}

func (_c *RuleSetProcessorMock_OnCreated_Call) Return(_a0 error) *RuleSetProcessorMock_OnCreated_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RuleSetProcessorMock_OnCreated_Call) RunAndReturn(run func(*config.RuleSet) error) *RuleSetProcessorMock_OnCreated_Call {
	_c.Call.Return(run)
	return _c
}

// OnDeleted provides a mock function with given fields: ruleSet
func (_m *RuleSetProcessorMock) OnDeleted(ruleSet *config.RuleSet) error {
	ret := _m.Called(ruleSet)

	if len(ret) == 0 {
		panic("no return value specified for OnDeleted")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*config.RuleSet) error); ok {
		r0 = rf(ruleSet)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RuleSetProcessorMock_OnDeleted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnDeleted'
type RuleSetProcessorMock_OnDeleted_Call struct {
	*mock.Call
}

// OnDeleted is a helper method to define mock.On call
//   - ruleSet *config.RuleSet
func (_e *RuleSetProcessorMock_Expecter) OnDeleted(ruleSet interface{}) *RuleSetProcessorMock_OnDeleted_Call {
	return &RuleSetProcessorMock_OnDeleted_Call{Call: _e.mock.On("OnDeleted", ruleSet)}
}

func (_c *RuleSetProcessorMock_OnDeleted_Call) Run(run func(ruleSet *config.RuleSet)) *RuleSetProcessorMock_OnDeleted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*config.RuleSet))
	})
	return _c
}

func (_c *RuleSetProcessorMock_OnDeleted_Call) Return(_a0 error) *RuleSetProcessorMock_OnDeleted_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RuleSetProcessorMock_OnDeleted_Call) RunAndReturn(run func(*config.RuleSet) error) *RuleSetProcessorMock_OnDeleted_Call {
	_c.Call.Return(run)
	return _c
}

// OnUpdated provides a mock function with given fields: ruleSet
func (_m *RuleSetProcessorMock) OnUpdated(ruleSet *config.RuleSet) error {
	ret := _m.Called(ruleSet)

	if len(ret) == 0 {
		panic("no return value specified for OnUpdated")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*config.RuleSet) error); ok {
		r0 = rf(ruleSet)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RuleSetProcessorMock_OnUpdated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnUpdated'
type RuleSetProcessorMock_OnUpdated_Call struct {
	*mock.Call
}

// OnUpdated is a helper method to define mock.On call
//   - ruleSet *config.RuleSet
func (_e *RuleSetProcessorMock_Expecter) OnUpdated(ruleSet interface{}) *RuleSetProcessorMock_OnUpdated_Call {
	return &RuleSetProcessorMock_OnUpdated_Call{Call: _e.mock.On("OnUpdated", ruleSet)}
}

func (_c *RuleSetProcessorMock_OnUpdated_Call) Run(run func(ruleSet *config.RuleSet)) *RuleSetProcessorMock_OnUpdated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*config.RuleSet))
	})
	return _c
}

func (_c *RuleSetProcessorMock_OnUpdated_Call) Return(_a0 error) *RuleSetProcessorMock_OnUpdated_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RuleSetProcessorMock_OnUpdated_Call) RunAndReturn(run func(*config.RuleSet) error) *RuleSetProcessorMock_OnUpdated_Call {
	_c.Call.Return(run)
	return _c
}

// NewRuleSetProcessorMock creates a new instance of RuleSetProcessorMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRuleSetProcessorMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *RuleSetProcessorMock {
	mock := &RuleSetProcessorMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
