// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	heimdall "github.com/dadrus/heimdall/internal/heimdall"
	mock "github.com/stretchr/testify/mock"

	subject "github.com/dadrus/heimdall/internal/rules/mechanisms/subject"
)

// SubjectHandlerMock is an autogenerated mock type for the subjectHandler type
type SubjectHandlerMock struct {
	mock.Mock
}

type SubjectHandlerMock_Expecter struct {
	mock *mock.Mock
}

func (_m *SubjectHandlerMock) EXPECT() *SubjectHandlerMock_Expecter {
	return &SubjectHandlerMock_Expecter{mock: &_m.Mock}
}

// ContinueOnError provides a mock function with given fields:
func (_m *SubjectHandlerMock) ContinueOnError() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SubjectHandlerMock_ContinueOnError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContinueOnError'
type SubjectHandlerMock_ContinueOnError_Call struct {
	*mock.Call
}

// ContinueOnError is a helper method to define mock.On call
func (_e *SubjectHandlerMock_Expecter) ContinueOnError() *SubjectHandlerMock_ContinueOnError_Call {
	return &SubjectHandlerMock_ContinueOnError_Call{Call: _e.mock.On("ContinueOnError")}
}

func (_c *SubjectHandlerMock_ContinueOnError_Call) Run(run func()) *SubjectHandlerMock_ContinueOnError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SubjectHandlerMock_ContinueOnError_Call) Return(_a0 bool) *SubjectHandlerMock_ContinueOnError_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SubjectHandlerMock_ContinueOnError_Call) RunAndReturn(run func() bool) *SubjectHandlerMock_ContinueOnError_Call {
	_c.Call.Return(run)
	return _c
}

// Execute provides a mock function with given fields: _a0, _a1
func (_m *SubjectHandlerMock) Execute(_a0 heimdall.Context, _a1 *subject.Subject) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(heimdall.Context, *subject.Subject) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubjectHandlerMock_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type SubjectHandlerMock_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - _a0 heimdall.Context
//   - _a1 *subject.Subject
func (_e *SubjectHandlerMock_Expecter) Execute(_a0 interface{}, _a1 interface{}) *SubjectHandlerMock_Execute_Call {
	return &SubjectHandlerMock_Execute_Call{Call: _e.mock.On("Execute", _a0, _a1)}
}

func (_c *SubjectHandlerMock_Execute_Call) Run(run func(_a0 heimdall.Context, _a1 *subject.Subject)) *SubjectHandlerMock_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(heimdall.Context), args[1].(*subject.Subject))
	})
	return _c
}

func (_c *SubjectHandlerMock_Execute_Call) Return(_a0 error) *SubjectHandlerMock_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SubjectHandlerMock_Execute_Call) RunAndReturn(run func(heimdall.Context, *subject.Subject) error) *SubjectHandlerMock_Execute_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewSubjectHandlerMock interface {
	mock.TestingT
	Cleanup(func())
}

// NewSubjectHandlerMock creates a new instance of SubjectHandlerMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSubjectHandlerMock(t mockConstructorTestingTNewSubjectHandlerMock) *SubjectHandlerMock {
	mock := &SubjectHandlerMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
