// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/dadrus/heimdall/internal/heimdall"
	"github.com/dadrus/heimdall/internal/rules/mechanisms/subject"
	mock "github.com/stretchr/testify/mock"
)

// NewPrincipalCreatorMock creates a new instance of PrincipalCreatorMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPrincipalCreatorMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *PrincipalCreatorMock {
	mock := &PrincipalCreatorMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// PrincipalCreatorMock is an autogenerated mock type for the principalCreator type
type PrincipalCreatorMock struct {
	mock.Mock
}

type PrincipalCreatorMock_Expecter struct {
	mock *mock.Mock
}

func (_m *PrincipalCreatorMock) EXPECT() *PrincipalCreatorMock_Expecter {
	return &PrincipalCreatorMock_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function for the type PrincipalCreatorMock
func (_mock *PrincipalCreatorMock) Execute(ctx heimdall.RequestContext, sub subject.Subject) error {
	ret := _mock.Called(ctx, sub)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(heimdall.RequestContext, subject.Subject) error); ok {
		r0 = returnFunc(ctx, sub)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// PrincipalCreatorMock_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type PrincipalCreatorMock_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx heimdall.RequestContext
//   - sub subject.Subject
func (_e *PrincipalCreatorMock_Expecter) Execute(ctx interface{}, sub interface{}) *PrincipalCreatorMock_Execute_Call {
	return &PrincipalCreatorMock_Execute_Call{Call: _e.mock.On("Execute", ctx, sub)}
}

func (_c *PrincipalCreatorMock_Execute_Call) Run(run func(ctx heimdall.RequestContext, sub subject.Subject)) *PrincipalCreatorMock_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 heimdall.RequestContext
		if args[0] != nil {
			arg0 = args[0].(heimdall.RequestContext)
		}
		var arg1 subject.Subject
		if args[1] != nil {
			arg1 = args[1].(subject.Subject)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *PrincipalCreatorMock_Execute_Call) Return(err error) *PrincipalCreatorMock_Execute_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *PrincipalCreatorMock_Execute_Call) RunAndReturn(run func(ctx heimdall.RequestContext, sub subject.Subject) error) *PrincipalCreatorMock_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// IsInsecure provides a mock function for the type PrincipalCreatorMock
func (_mock *PrincipalCreatorMock) IsInsecure() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsInsecure")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// PrincipalCreatorMock_IsInsecure_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsInsecure'
type PrincipalCreatorMock_IsInsecure_Call struct {
	*mock.Call
}

// IsInsecure is a helper method to define mock.On call
func (_e *PrincipalCreatorMock_Expecter) IsInsecure() *PrincipalCreatorMock_IsInsecure_Call {
	return &PrincipalCreatorMock_IsInsecure_Call{Call: _e.mock.On("IsInsecure")}
}

func (_c *PrincipalCreatorMock_IsInsecure_Call) Run(run func()) *PrincipalCreatorMock_IsInsecure_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PrincipalCreatorMock_IsInsecure_Call) Return(b bool) *PrincipalCreatorMock_IsInsecure_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *PrincipalCreatorMock_IsInsecure_Call) RunAndReturn(run func() bool) *PrincipalCreatorMock_IsInsecure_Call {
	_c.Call.Return(run)
	return _c
}
