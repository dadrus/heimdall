// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// PatternMatcherMock is an autogenerated mock type for the patternMatcher type
type PatternMatcherMock struct {
	mock.Mock
}

type PatternMatcherMock_Expecter struct {
	mock *mock.Mock
}

func (_m *PatternMatcherMock) EXPECT() *PatternMatcherMock_Expecter {
	return &PatternMatcherMock_Expecter{mock: &_m.Mock}
}

// Match provides a mock function with given fields: pattern
func (_m *PatternMatcherMock) Match(pattern string) bool {
	ret := _m.Called(pattern)

	if len(ret) == 0 {
		panic("no return value specified for Match")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(pattern)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// PatternMatcherMock_Match_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Match'
type PatternMatcherMock_Match_Call struct {
	*mock.Call
}

// Match is a helper method to define mock.On call
//   - pattern string
func (_e *PatternMatcherMock_Expecter) Match(pattern interface{}) *PatternMatcherMock_Match_Call {
	return &PatternMatcherMock_Match_Call{Call: _e.mock.On("Match", pattern)}
}

func (_c *PatternMatcherMock_Match_Call) Run(run func(pattern string)) *PatternMatcherMock_Match_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *PatternMatcherMock_Match_Call) Return(_a0 bool) *PatternMatcherMock_Match_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PatternMatcherMock_Match_Call) RunAndReturn(run func(string) bool) *PatternMatcherMock_Match_Call {
	_c.Call.Return(run)
	return _c
}

// NewPatternMatcherMock creates a new instance of PatternMatcherMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPatternMatcherMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *PatternMatcherMock {
	mock := &PatternMatcherMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
