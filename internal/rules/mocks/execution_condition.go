// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	heimdall "github.com/dadrus/heimdall/internal/heimdall"
	mock "github.com/stretchr/testify/mock"

	subject "github.com/dadrus/heimdall/internal/subject"
)

// ExecutionConditionMock is an autogenerated mock type for the executionCondition type
type ExecutionConditionMock struct {
	mock.Mock
}

type ExecutionConditionMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ExecutionConditionMock) EXPECT() *ExecutionConditionMock_Expecter {
	return &ExecutionConditionMock_Expecter{mock: &_m.Mock}
}

// CanExecute provides a mock function with given fields: ctx, sub
func (_m *ExecutionConditionMock) CanExecute(ctx heimdall.Context, sub subject.Subject) (bool, error) {
	ret := _m.Called(ctx, sub)

	if len(ret) == 0 {
		panic("no return value specified for CanExecute")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(heimdall.Context, subject.Subject) (bool, error)); ok {
		return rf(ctx, sub)
	}
	if rf, ok := ret.Get(0).(func(heimdall.Context, subject.Subject) bool); ok {
		r0 = rf(ctx, sub)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(heimdall.Context, subject.Subject) error); ok {
		r1 = rf(ctx, sub)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecutionConditionMock_CanExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CanExecute'
type ExecutionConditionMock_CanExecute_Call struct {
	*mock.Call
}

// CanExecute is a helper method to define mock.On call
//   - ctx heimdall.Context
//   - sub subject.Subject
func (_e *ExecutionConditionMock_Expecter) CanExecute(ctx interface{}, sub interface{}) *ExecutionConditionMock_CanExecute_Call {
	return &ExecutionConditionMock_CanExecute_Call{Call: _e.mock.On("CanExecute", ctx, sub)}
}

func (_c *ExecutionConditionMock_CanExecute_Call) Run(run func(ctx heimdall.Context, sub subject.Subject)) *ExecutionConditionMock_CanExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(heimdall.Context), args[1].(subject.Subject))
	})
	return _c
}

func (_c *ExecutionConditionMock_CanExecute_Call) Return(_a0 bool, _a1 error) *ExecutionConditionMock_CanExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExecutionConditionMock_CanExecute_Call) RunAndReturn(run func(heimdall.Context, subject.Subject) (bool, error)) *ExecutionConditionMock_CanExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewExecutionConditionMock creates a new instance of ExecutionConditionMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExecutionConditionMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExecutionConditionMock {
	mock := &ExecutionConditionMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
