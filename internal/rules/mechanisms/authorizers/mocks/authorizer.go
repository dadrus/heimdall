// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	heimdall "github.com/dadrus/heimdall/internal/heimdall"
	authorizers "github.com/dadrus/heimdall/internal/rules/mechanisms/authorizers"

	mock "github.com/stretchr/testify/mock"

	subject "github.com/dadrus/heimdall/internal/subject"
)

// AuthorizerMock is an autogenerated mock type for the Authorizer type
type AuthorizerMock struct {
	mock.Mock
}

type AuthorizerMock_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthorizerMock) EXPECT() *AuthorizerMock_Expecter {
	return &AuthorizerMock_Expecter{mock: &_m.Mock}
}

// ContinueOnError provides a mock function with given fields:
func (_m *AuthorizerMock) ContinueOnError() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ContinueOnError")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// AuthorizerMock_ContinueOnError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContinueOnError'
type AuthorizerMock_ContinueOnError_Call struct {
	*mock.Call
}

// ContinueOnError is a helper method to define mock.On call
func (_e *AuthorizerMock_Expecter) ContinueOnError() *AuthorizerMock_ContinueOnError_Call {
	return &AuthorizerMock_ContinueOnError_Call{Call: _e.mock.On("ContinueOnError")}
}

func (_c *AuthorizerMock_ContinueOnError_Call) Run(run func()) *AuthorizerMock_ContinueOnError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AuthorizerMock_ContinueOnError_Call) Return(_a0 bool) *AuthorizerMock_ContinueOnError_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthorizerMock_ContinueOnError_Call) RunAndReturn(run func() bool) *AuthorizerMock_ContinueOnError_Call {
	_c.Call.Return(run)
	return _c
}

// Execute provides a mock function with given fields: ctx, sub
func (_m *AuthorizerMock) Execute(ctx heimdall.Context, sub subject.Subject) error {
	ret := _m.Called(ctx, sub)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(heimdall.Context, subject.Subject) error); ok {
		r0 = rf(ctx, sub)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthorizerMock_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type AuthorizerMock_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx heimdall.Context
//   - sub subject.Subject
func (_e *AuthorizerMock_Expecter) Execute(ctx interface{}, sub interface{}) *AuthorizerMock_Execute_Call {
	return &AuthorizerMock_Execute_Call{Call: _e.mock.On("Execute", ctx, sub)}
}

func (_c *AuthorizerMock_Execute_Call) Run(run func(ctx heimdall.Context, sub subject.Subject)) *AuthorizerMock_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(heimdall.Context), args[1].(subject.Subject))
	})
	return _c
}

func (_c *AuthorizerMock_Execute_Call) Return(_a0 error) *AuthorizerMock_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthorizerMock_Execute_Call) RunAndReturn(run func(heimdall.Context, subject.Subject) error) *AuthorizerMock_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// ID provides a mock function with given fields:
func (_m *AuthorizerMock) ID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// AuthorizerMock_ID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ID'
type AuthorizerMock_ID_Call struct {
	*mock.Call
}

// ID is a helper method to define mock.On call
func (_e *AuthorizerMock_Expecter) ID() *AuthorizerMock_ID_Call {
	return &AuthorizerMock_ID_Call{Call: _e.mock.On("ID")}
}

func (_c *AuthorizerMock_ID_Call) Run(run func()) *AuthorizerMock_ID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AuthorizerMock_ID_Call) Return(_a0 string) *AuthorizerMock_ID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthorizerMock_ID_Call) RunAndReturn(run func() string) *AuthorizerMock_ID_Call {
	_c.Call.Return(run)
	return _c
}

// WithConfig provides a mock function with given fields: config
func (_m *AuthorizerMock) WithConfig(config map[string]interface{}) (authorizers.Authorizer, error) {
	ret := _m.Called(config)

	if len(ret) == 0 {
		panic("no return value specified for WithConfig")
	}

	var r0 authorizers.Authorizer
	var r1 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}) (authorizers.Authorizer, error)); ok {
		return rf(config)
	}
	if rf, ok := ret.Get(0).(func(map[string]interface{}) authorizers.Authorizer); ok {
		r0 = rf(config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(authorizers.Authorizer)
		}
	}

	if rf, ok := ret.Get(1).(func(map[string]interface{}) error); ok {
		r1 = rf(config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthorizerMock_WithConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithConfig'
type AuthorizerMock_WithConfig_Call struct {
	*mock.Call
}

// WithConfig is a helper method to define mock.On call
//   - config map[string]interface{}
func (_e *AuthorizerMock_Expecter) WithConfig(config interface{}) *AuthorizerMock_WithConfig_Call {
	return &AuthorizerMock_WithConfig_Call{Call: _e.mock.On("WithConfig", config)}
}

func (_c *AuthorizerMock_WithConfig_Call) Run(run func(config map[string]interface{})) *AuthorizerMock_WithConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]interface{}))
	})
	return _c
}

func (_c *AuthorizerMock_WithConfig_Call) Return(_a0 authorizers.Authorizer, _a1 error) *AuthorizerMock_WithConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthorizerMock_WithConfig_Call) RunAndReturn(run func(map[string]interface{}) (authorizers.Authorizer, error)) *AuthorizerMock_WithConfig_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuthorizerMock creates a new instance of AuthorizerMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthorizerMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthorizerMock {
	mock := &AuthorizerMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
