// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	heimdall "github.com/dadrus/heimdall/internal/heimdall"
	mock "github.com/stretchr/testify/mock"

	subject "github.com/dadrus/heimdall/internal/rules/mechanisms/subject"

	unifiers "github.com/dadrus/heimdall/internal/rules/mechanisms/unifiers"
)

// UnifierMock is an autogenerated mock type for the Unifier type
type UnifierMock struct {
	mock.Mock
}

type UnifierMock_Expecter struct {
	mock *mock.Mock
}

func (_m *UnifierMock) EXPECT() *UnifierMock_Expecter {
	return &UnifierMock_Expecter{mock: &_m.Mock}
}

// ContinueOnError provides a mock function with given fields:
func (_m *UnifierMock) ContinueOnError() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// UnifierMock_ContinueOnError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContinueOnError'
type UnifierMock_ContinueOnError_Call struct {
	*mock.Call
}

// ContinueOnError is a helper method to define mock.On call
func (_e *UnifierMock_Expecter) ContinueOnError() *UnifierMock_ContinueOnError_Call {
	return &UnifierMock_ContinueOnError_Call{Call: _e.mock.On("ContinueOnError")}
}

func (_c *UnifierMock_ContinueOnError_Call) Run(run func()) *UnifierMock_ContinueOnError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UnifierMock_ContinueOnError_Call) Return(_a0 bool) *UnifierMock_ContinueOnError_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UnifierMock_ContinueOnError_Call) RunAndReturn(run func() bool) *UnifierMock_ContinueOnError_Call {
	_c.Call.Return(run)
	return _c
}

// Execute provides a mock function with given fields: ctx, sub
func (_m *UnifierMock) Execute(ctx heimdall.Context, sub *subject.Subject) error {
	ret := _m.Called(ctx, sub)

	var r0 error
	if rf, ok := ret.Get(0).(func(heimdall.Context, *subject.Subject) error); ok {
		r0 = rf(ctx, sub)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnifierMock_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type UnifierMock_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx heimdall.Context
//   - sub *subject.Subject
func (_e *UnifierMock_Expecter) Execute(ctx interface{}, sub interface{}) *UnifierMock_Execute_Call {
	return &UnifierMock_Execute_Call{Call: _e.mock.On("Execute", ctx, sub)}
}

func (_c *UnifierMock_Execute_Call) Run(run func(ctx heimdall.Context, sub *subject.Subject)) *UnifierMock_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(heimdall.Context), args[1].(*subject.Subject))
	})
	return _c
}

func (_c *UnifierMock_Execute_Call) Return(_a0 error) *UnifierMock_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UnifierMock_Execute_Call) RunAndReturn(run func(heimdall.Context, *subject.Subject) error) *UnifierMock_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// WithConfig provides a mock function with given fields: config
func (_m *UnifierMock) WithConfig(config map[string]interface{}) (unifiers.Unifier, error) {
	ret := _m.Called(config)

	var r0 unifiers.Unifier
	var r1 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}) (unifiers.Unifier, error)); ok {
		return rf(config)
	}
	if rf, ok := ret.Get(0).(func(map[string]interface{}) unifiers.Unifier); ok {
		r0 = rf(config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(unifiers.Unifier)
		}
	}

	if rf, ok := ret.Get(1).(func(map[string]interface{}) error); ok {
		r1 = rf(config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnifierMock_WithConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithConfig'
type UnifierMock_WithConfig_Call struct {
	*mock.Call
}

// WithConfig is a helper method to define mock.On call
//   - config map[string]interface{}
func (_e *UnifierMock_Expecter) WithConfig(config interface{}) *UnifierMock_WithConfig_Call {
	return &UnifierMock_WithConfig_Call{Call: _e.mock.On("WithConfig", config)}
}

func (_c *UnifierMock_WithConfig_Call) Run(run func(config map[string]interface{})) *UnifierMock_WithConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]interface{}))
	})
	return _c
}

func (_c *UnifierMock_WithConfig_Call) Return(_a0 unifiers.Unifier, _a1 error) *UnifierMock_WithConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UnifierMock_WithConfig_Call) RunAndReturn(run func(map[string]interface{}) (unifiers.Unifier, error)) *UnifierMock_WithConfig_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewUnifierMock interface {
	mock.TestingT
	Cleanup(func())
}

// NewUnifierMock creates a new instance of UnifierMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUnifierMock(t mockConstructorTestingTNewUnifierMock) *UnifierMock {
	mock := &UnifierMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
