// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	heimdall "github.com/dadrus/heimdall/internal/heimdall"
	authenticators "github.com/dadrus/heimdall/internal/rules/mechanisms/authenticators"

	mock "github.com/stretchr/testify/mock"

	subject "github.com/dadrus/heimdall/internal/rules/mechanisms/subject"
)

// AuthenticatorMock is an autogenerated mock type for the Authenticator type
type AuthenticatorMock struct {
	mock.Mock
}

type AuthenticatorMock_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthenticatorMock) EXPECT() *AuthenticatorMock_Expecter {
	return &AuthenticatorMock_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: ctx
func (_m *AuthenticatorMock) Execute(ctx heimdall.RequestContext) (*subject.Subject, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 *subject.Subject
	var r1 error
	if rf, ok := ret.Get(0).(func(heimdall.RequestContext) (*subject.Subject, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(heimdall.RequestContext) *subject.Subject); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*subject.Subject)
		}
	}

	if rf, ok := ret.Get(1).(func(heimdall.RequestContext) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthenticatorMock_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type AuthenticatorMock_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx heimdall.RequestContext
func (_e *AuthenticatorMock_Expecter) Execute(ctx interface{}) *AuthenticatorMock_Execute_Call {
	return &AuthenticatorMock_Execute_Call{Call: _e.mock.On("Execute", ctx)}
}

func (_c *AuthenticatorMock_Execute_Call) Run(run func(ctx heimdall.RequestContext)) *AuthenticatorMock_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(heimdall.RequestContext))
	})
	return _c
}

func (_c *AuthenticatorMock_Execute_Call) Return(_a0 *subject.Subject, _a1 error) *AuthenticatorMock_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthenticatorMock_Execute_Call) RunAndReturn(run func(heimdall.RequestContext) (*subject.Subject, error)) *AuthenticatorMock_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// ID provides a mock function with no fields
func (_m *AuthenticatorMock) ID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// AuthenticatorMock_ID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ID'
type AuthenticatorMock_ID_Call struct {
	*mock.Call
}

// ID is a helper method to define mock.On call
func (_e *AuthenticatorMock_Expecter) ID() *AuthenticatorMock_ID_Call {
	return &AuthenticatorMock_ID_Call{Call: _e.mock.On("ID")}
}

func (_c *AuthenticatorMock_ID_Call) Run(run func()) *AuthenticatorMock_ID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AuthenticatorMock_ID_Call) Return(_a0 string) *AuthenticatorMock_ID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthenticatorMock_ID_Call) RunAndReturn(run func() string) *AuthenticatorMock_ID_Call {
	_c.Call.Return(run)
	return _c
}

// IsInsecure provides a mock function with no fields
func (_m *AuthenticatorMock) IsInsecure() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsInsecure")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// AuthenticatorMock_IsInsecure_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsInsecure'
type AuthenticatorMock_IsInsecure_Call struct {
	*mock.Call
}

// IsInsecure is a helper method to define mock.On call
func (_e *AuthenticatorMock_Expecter) IsInsecure() *AuthenticatorMock_IsInsecure_Call {
	return &AuthenticatorMock_IsInsecure_Call{Call: _e.mock.On("IsInsecure")}
}

func (_c *AuthenticatorMock_IsInsecure_Call) Run(run func()) *AuthenticatorMock_IsInsecure_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AuthenticatorMock_IsInsecure_Call) Return(_a0 bool) *AuthenticatorMock_IsInsecure_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthenticatorMock_IsInsecure_Call) RunAndReturn(run func() bool) *AuthenticatorMock_IsInsecure_Call {
	_c.Call.Return(run)
	return _c
}

// WithConfig provides a mock function with given fields: config
func (_m *AuthenticatorMock) WithConfig(config map[string]interface{}) (authenticators.Authenticator, error) {
	ret := _m.Called(config)

	if len(ret) == 0 {
		panic("no return value specified for WithConfig")
	}

	var r0 authenticators.Authenticator
	var r1 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}) (authenticators.Authenticator, error)); ok {
		return rf(config)
	}
	if rf, ok := ret.Get(0).(func(map[string]interface{}) authenticators.Authenticator); ok {
		r0 = rf(config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(authenticators.Authenticator)
		}
	}

	if rf, ok := ret.Get(1).(func(map[string]interface{}) error); ok {
		r1 = rf(config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthenticatorMock_WithConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithConfig'
type AuthenticatorMock_WithConfig_Call struct {
	*mock.Call
}

// WithConfig is a helper method to define mock.On call
//   - config map[string]interface{}
func (_e *AuthenticatorMock_Expecter) WithConfig(config interface{}) *AuthenticatorMock_WithConfig_Call {
	return &AuthenticatorMock_WithConfig_Call{Call: _e.mock.On("WithConfig", config)}
}

func (_c *AuthenticatorMock_WithConfig_Call) Run(run func(config map[string]interface{})) *AuthenticatorMock_WithConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]interface{}))
	})
	return _c
}

func (_c *AuthenticatorMock_WithConfig_Call) Return(_a0 authenticators.Authenticator, _a1 error) *AuthenticatorMock_WithConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthenticatorMock_WithConfig_Call) RunAndReturn(run func(map[string]interface{}) (authenticators.Authenticator, error)) *AuthenticatorMock_WithConfig_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuthenticatorMock creates a new instance of AuthenticatorMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthenticatorMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthenticatorMock {
	mock := &AuthenticatorMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
