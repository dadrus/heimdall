// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/dadrus/heimdall/internal/heimdall"
	mock "github.com/stretchr/testify/mock"
)

// NewAuthDataExtractStrategyMock creates a new instance of AuthDataExtractStrategyMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthDataExtractStrategyMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthDataExtractStrategyMock {
	mock := &AuthDataExtractStrategyMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// AuthDataExtractStrategyMock is an autogenerated mock type for the AuthDataExtractStrategy type
type AuthDataExtractStrategyMock struct {
	mock.Mock
}

type AuthDataExtractStrategyMock_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthDataExtractStrategyMock) EXPECT() *AuthDataExtractStrategyMock_Expecter {
	return &AuthDataExtractStrategyMock_Expecter{mock: &_m.Mock}
}

// GetAuthData provides a mock function for the type AuthDataExtractStrategyMock
func (_mock *AuthDataExtractStrategyMock) GetAuthData(ctx heimdall.RequestContext) (string, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAuthData")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(heimdall.RequestContext) (string, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(heimdall.RequestContext) string); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(heimdall.RequestContext) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AuthDataExtractStrategyMock_GetAuthData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuthData'
type AuthDataExtractStrategyMock_GetAuthData_Call struct {
	*mock.Call
}

// GetAuthData is a helper method to define mock.On call
//   - ctx heimdall.RequestContext
func (_e *AuthDataExtractStrategyMock_Expecter) GetAuthData(ctx interface{}) *AuthDataExtractStrategyMock_GetAuthData_Call {
	return &AuthDataExtractStrategyMock_GetAuthData_Call{Call: _e.mock.On("GetAuthData", ctx)}
}

func (_c *AuthDataExtractStrategyMock_GetAuthData_Call) Run(run func(ctx heimdall.RequestContext)) *AuthDataExtractStrategyMock_GetAuthData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 heimdall.RequestContext
		if args[0] != nil {
			arg0 = args[0].(heimdall.RequestContext)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *AuthDataExtractStrategyMock_GetAuthData_Call) Return(s string, err error) *AuthDataExtractStrategyMock_GetAuthData_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *AuthDataExtractStrategyMock_GetAuthData_Call) RunAndReturn(run func(ctx heimdall.RequestContext) (string, error)) *AuthDataExtractStrategyMock_GetAuthData_Call {
	_c.Call.Return(run)
	return _c
}
