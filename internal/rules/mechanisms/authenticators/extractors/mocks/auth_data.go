// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// AuthDataMock is an autogenerated mock type for the AuthData type
type AuthDataMock struct {
	mock.Mock
}

type AuthDataMock_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthDataMock) EXPECT() *AuthDataMock_Expecter {
	return &AuthDataMock_Expecter{mock: &_m.Mock}
}

// ApplyTo provides a mock function with given fields: req
func (_m *AuthDataMock) ApplyTo(req *http.Request) {
	_m.Called(req)
}

// AuthDataMock_ApplyTo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplyTo'
type AuthDataMock_ApplyTo_Call struct {
	*mock.Call
}

// ApplyTo is a helper method to define mock.On call
//   - req *http.Request
func (_e *AuthDataMock_Expecter) ApplyTo(req interface{}) *AuthDataMock_ApplyTo_Call {
	return &AuthDataMock_ApplyTo_Call{Call: _e.mock.On("ApplyTo", req)}
}

func (_c *AuthDataMock_ApplyTo_Call) Run(run func(req *http.Request)) *AuthDataMock_ApplyTo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *AuthDataMock_ApplyTo_Call) Return() *AuthDataMock_ApplyTo_Call {
	_c.Call.Return()
	return _c
}

func (_c *AuthDataMock_ApplyTo_Call) RunAndReturn(run func(*http.Request)) *AuthDataMock_ApplyTo_Call {
	_c.Call.Return(run)
	return _c
}

// Value provides a mock function with given fields:
func (_m *AuthDataMock) Value() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// AuthDataMock_Value_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Value'
type AuthDataMock_Value_Call struct {
	*mock.Call
}

// Value is a helper method to define mock.On call
func (_e *AuthDataMock_Expecter) Value() *AuthDataMock_Value_Call {
	return &AuthDataMock_Value_Call{Call: _e.mock.On("Value")}
}

func (_c *AuthDataMock_Value_Call) Run(run func()) *AuthDataMock_Value_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AuthDataMock_Value_Call) Return(_a0 string) *AuthDataMock_Value_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthDataMock_Value_Call) RunAndReturn(run func() string) *AuthDataMock_Value_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewAuthDataMock interface {
	mock.TestingT
	Cleanup(func())
}

// NewAuthDataMock creates a new instance of AuthDataMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuthDataMock(t mockConstructorTestingTNewAuthDataMock) *AuthDataMock {
	mock := &AuthDataMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
