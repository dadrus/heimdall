// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/dadrus/heimdall/internal/config"
	"github.com/dadrus/heimdall/internal/rules/mechanisms/authenticators"
	"github.com/dadrus/heimdall/internal/rules/mechanisms/authorizers"
	"github.com/dadrus/heimdall/internal/rules/mechanisms/contextualizers"
	"github.com/dadrus/heimdall/internal/rules/mechanisms/errorhandlers"
	"github.com/dadrus/heimdall/internal/rules/mechanisms/finalizers"
	mock "github.com/stretchr/testify/mock"
)

// NewMechanismFactoryMock creates a new instance of MechanismFactoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMechanismFactoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *MechanismFactoryMock {
	mock := &MechanismFactoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MechanismFactoryMock is an autogenerated mock type for the MechanismFactory type
type MechanismFactoryMock struct {
	mock.Mock
}

type MechanismFactoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *MechanismFactoryMock) EXPECT() *MechanismFactoryMock_Expecter {
	return &MechanismFactoryMock_Expecter{mock: &_m.Mock}
}

// CreateAuthenticator provides a mock function for the type MechanismFactoryMock
func (_mock *MechanismFactoryMock) CreateAuthenticator(refID string, stepID string, conf config.MechanismConfig) (authenticators.Authenticator, error) {
	ret := _mock.Called(refID, stepID, conf)

	if len(ret) == 0 {
		panic("no return value specified for CreateAuthenticator")
	}

	var r0 authenticators.Authenticator
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string, config.MechanismConfig) (authenticators.Authenticator, error)); ok {
		return returnFunc(refID, stepID, conf)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, config.MechanismConfig) authenticators.Authenticator); ok {
		r0 = returnFunc(refID, stepID, conf)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(authenticators.Authenticator)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, config.MechanismConfig) error); ok {
		r1 = returnFunc(refID, stepID, conf)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MechanismFactoryMock_CreateAuthenticator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAuthenticator'
type MechanismFactoryMock_CreateAuthenticator_Call struct {
	*mock.Call
}

// CreateAuthenticator is a helper method to define mock.On call
//   - refID string
//   - stepID string
//   - conf config.MechanismConfig
func (_e *MechanismFactoryMock_Expecter) CreateAuthenticator(refID interface{}, stepID interface{}, conf interface{}) *MechanismFactoryMock_CreateAuthenticator_Call {
	return &MechanismFactoryMock_CreateAuthenticator_Call{Call: _e.mock.On("CreateAuthenticator", refID, stepID, conf)}
}

func (_c *MechanismFactoryMock_CreateAuthenticator_Call) Run(run func(refID string, stepID string, conf config.MechanismConfig)) *MechanismFactoryMock_CreateAuthenticator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 config.MechanismConfig
		if args[2] != nil {
			arg2 = args[2].(config.MechanismConfig)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MechanismFactoryMock_CreateAuthenticator_Call) Return(authenticator authenticators.Authenticator, err error) *MechanismFactoryMock_CreateAuthenticator_Call {
	_c.Call.Return(authenticator, err)
	return _c
}

func (_c *MechanismFactoryMock_CreateAuthenticator_Call) RunAndReturn(run func(refID string, stepID string, conf config.MechanismConfig) (authenticators.Authenticator, error)) *MechanismFactoryMock_CreateAuthenticator_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAuthorizer provides a mock function for the type MechanismFactoryMock
func (_mock *MechanismFactoryMock) CreateAuthorizer(refID string, stepID string, conf config.MechanismConfig) (authorizers.Authorizer, error) {
	ret := _mock.Called(refID, stepID, conf)

	if len(ret) == 0 {
		panic("no return value specified for CreateAuthorizer")
	}

	var r0 authorizers.Authorizer
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string, config.MechanismConfig) (authorizers.Authorizer, error)); ok {
		return returnFunc(refID, stepID, conf)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, config.MechanismConfig) authorizers.Authorizer); ok {
		r0 = returnFunc(refID, stepID, conf)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(authorizers.Authorizer)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, config.MechanismConfig) error); ok {
		r1 = returnFunc(refID, stepID, conf)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MechanismFactoryMock_CreateAuthorizer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAuthorizer'
type MechanismFactoryMock_CreateAuthorizer_Call struct {
	*mock.Call
}

// CreateAuthorizer is a helper method to define mock.On call
//   - refID string
//   - stepID string
//   - conf config.MechanismConfig
func (_e *MechanismFactoryMock_Expecter) CreateAuthorizer(refID interface{}, stepID interface{}, conf interface{}) *MechanismFactoryMock_CreateAuthorizer_Call {
	return &MechanismFactoryMock_CreateAuthorizer_Call{Call: _e.mock.On("CreateAuthorizer", refID, stepID, conf)}
}

func (_c *MechanismFactoryMock_CreateAuthorizer_Call) Run(run func(refID string, stepID string, conf config.MechanismConfig)) *MechanismFactoryMock_CreateAuthorizer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 config.MechanismConfig
		if args[2] != nil {
			arg2 = args[2].(config.MechanismConfig)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MechanismFactoryMock_CreateAuthorizer_Call) Return(authorizer authorizers.Authorizer, err error) *MechanismFactoryMock_CreateAuthorizer_Call {
	_c.Call.Return(authorizer, err)
	return _c
}

func (_c *MechanismFactoryMock_CreateAuthorizer_Call) RunAndReturn(run func(refID string, stepID string, conf config.MechanismConfig) (authorizers.Authorizer, error)) *MechanismFactoryMock_CreateAuthorizer_Call {
	_c.Call.Return(run)
	return _c
}

// CreateContextualizer provides a mock function for the type MechanismFactoryMock
func (_mock *MechanismFactoryMock) CreateContextualizer(refID string, stepID string, conf config.MechanismConfig) (contextualizers.Contextualizer, error) {
	ret := _mock.Called(refID, stepID, conf)

	if len(ret) == 0 {
		panic("no return value specified for CreateContextualizer")
	}

	var r0 contextualizers.Contextualizer
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string, config.MechanismConfig) (contextualizers.Contextualizer, error)); ok {
		return returnFunc(refID, stepID, conf)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, config.MechanismConfig) contextualizers.Contextualizer); ok {
		r0 = returnFunc(refID, stepID, conf)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(contextualizers.Contextualizer)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, config.MechanismConfig) error); ok {
		r1 = returnFunc(refID, stepID, conf)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MechanismFactoryMock_CreateContextualizer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateContextualizer'
type MechanismFactoryMock_CreateContextualizer_Call struct {
	*mock.Call
}

// CreateContextualizer is a helper method to define mock.On call
//   - refID string
//   - stepID string
//   - conf config.MechanismConfig
func (_e *MechanismFactoryMock_Expecter) CreateContextualizer(refID interface{}, stepID interface{}, conf interface{}) *MechanismFactoryMock_CreateContextualizer_Call {
	return &MechanismFactoryMock_CreateContextualizer_Call{Call: _e.mock.On("CreateContextualizer", refID, stepID, conf)}
}

func (_c *MechanismFactoryMock_CreateContextualizer_Call) Run(run func(refID string, stepID string, conf config.MechanismConfig)) *MechanismFactoryMock_CreateContextualizer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 config.MechanismConfig
		if args[2] != nil {
			arg2 = args[2].(config.MechanismConfig)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MechanismFactoryMock_CreateContextualizer_Call) Return(contextualizer contextualizers.Contextualizer, err error) *MechanismFactoryMock_CreateContextualizer_Call {
	_c.Call.Return(contextualizer, err)
	return _c
}

func (_c *MechanismFactoryMock_CreateContextualizer_Call) RunAndReturn(run func(refID string, stepID string, conf config.MechanismConfig) (contextualizers.Contextualizer, error)) *MechanismFactoryMock_CreateContextualizer_Call {
	_c.Call.Return(run)
	return _c
}

// CreateErrorHandler provides a mock function for the type MechanismFactoryMock
func (_mock *MechanismFactoryMock) CreateErrorHandler(refID string, stepID string, conf config.MechanismConfig) (errorhandlers.ErrorHandler, error) {
	ret := _mock.Called(refID, stepID, conf)

	if len(ret) == 0 {
		panic("no return value specified for CreateErrorHandler")
	}

	var r0 errorhandlers.ErrorHandler
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string, config.MechanismConfig) (errorhandlers.ErrorHandler, error)); ok {
		return returnFunc(refID, stepID, conf)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, config.MechanismConfig) errorhandlers.ErrorHandler); ok {
		r0 = returnFunc(refID, stepID, conf)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errorhandlers.ErrorHandler)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, config.MechanismConfig) error); ok {
		r1 = returnFunc(refID, stepID, conf)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MechanismFactoryMock_CreateErrorHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateErrorHandler'
type MechanismFactoryMock_CreateErrorHandler_Call struct {
	*mock.Call
}

// CreateErrorHandler is a helper method to define mock.On call
//   - refID string
//   - stepID string
//   - conf config.MechanismConfig
func (_e *MechanismFactoryMock_Expecter) CreateErrorHandler(refID interface{}, stepID interface{}, conf interface{}) *MechanismFactoryMock_CreateErrorHandler_Call {
	return &MechanismFactoryMock_CreateErrorHandler_Call{Call: _e.mock.On("CreateErrorHandler", refID, stepID, conf)}
}

func (_c *MechanismFactoryMock_CreateErrorHandler_Call) Run(run func(refID string, stepID string, conf config.MechanismConfig)) *MechanismFactoryMock_CreateErrorHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 config.MechanismConfig
		if args[2] != nil {
			arg2 = args[2].(config.MechanismConfig)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MechanismFactoryMock_CreateErrorHandler_Call) Return(errorHandler errorhandlers.ErrorHandler, err error) *MechanismFactoryMock_CreateErrorHandler_Call {
	_c.Call.Return(errorHandler, err)
	return _c
}

func (_c *MechanismFactoryMock_CreateErrorHandler_Call) RunAndReturn(run func(refID string, stepID string, conf config.MechanismConfig) (errorhandlers.ErrorHandler, error)) *MechanismFactoryMock_CreateErrorHandler_Call {
	_c.Call.Return(run)
	return _c
}

// CreateFinalizer provides a mock function for the type MechanismFactoryMock
func (_mock *MechanismFactoryMock) CreateFinalizer(refID string, stepID string, conf config.MechanismConfig) (finalizers.Finalizer, error) {
	ret := _mock.Called(refID, stepID, conf)

	if len(ret) == 0 {
		panic("no return value specified for CreateFinalizer")
	}

	var r0 finalizers.Finalizer
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string, config.MechanismConfig) (finalizers.Finalizer, error)); ok {
		return returnFunc(refID, stepID, conf)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, config.MechanismConfig) finalizers.Finalizer); ok {
		r0 = returnFunc(refID, stepID, conf)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(finalizers.Finalizer)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, config.MechanismConfig) error); ok {
		r1 = returnFunc(refID, stepID, conf)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MechanismFactoryMock_CreateFinalizer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFinalizer'
type MechanismFactoryMock_CreateFinalizer_Call struct {
	*mock.Call
}

// CreateFinalizer is a helper method to define mock.On call
//   - refID string
//   - stepID string
//   - conf config.MechanismConfig
func (_e *MechanismFactoryMock_Expecter) CreateFinalizer(refID interface{}, stepID interface{}, conf interface{}) *MechanismFactoryMock_CreateFinalizer_Call {
	return &MechanismFactoryMock_CreateFinalizer_Call{Call: _e.mock.On("CreateFinalizer", refID, stepID, conf)}
}

func (_c *MechanismFactoryMock_CreateFinalizer_Call) Run(run func(refID string, stepID string, conf config.MechanismConfig)) *MechanismFactoryMock_CreateFinalizer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 config.MechanismConfig
		if args[2] != nil {
			arg2 = args[2].(config.MechanismConfig)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MechanismFactoryMock_CreateFinalizer_Call) Return(finalizer finalizers.Finalizer, err error) *MechanismFactoryMock_CreateFinalizer_Call {
	_c.Call.Return(finalizer, err)
	return _c
}

func (_c *MechanismFactoryMock_CreateFinalizer_Call) RunAndReturn(run func(refID string, stepID string, conf config.MechanismConfig) (finalizers.Finalizer, error)) *MechanismFactoryMock_CreateFinalizer_Call {
	_c.Call.Return(run)
	return _c
}
