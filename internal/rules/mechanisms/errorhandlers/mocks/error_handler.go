// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/dadrus/heimdall/internal/heimdall"
	"github.com/dadrus/heimdall/internal/rules/mechanisms/errorhandlers"
	mock "github.com/stretchr/testify/mock"
)

// NewErrorHandlerMock creates a new instance of ErrorHandlerMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewErrorHandlerMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ErrorHandlerMock {
	mock := &ErrorHandlerMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ErrorHandlerMock is an autogenerated mock type for the ErrorHandler type
type ErrorHandlerMock struct {
	mock.Mock
}

type ErrorHandlerMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ErrorHandlerMock) EXPECT() *ErrorHandlerMock_Expecter {
	return &ErrorHandlerMock_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function for the type ErrorHandlerMock
func (_mock *ErrorHandlerMock) Execute(ctx heimdall.RequestContext, causeErr error) error {
	ret := _mock.Called(ctx, causeErr)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(heimdall.RequestContext, error) error); ok {
		r0 = returnFunc(ctx, causeErr)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ErrorHandlerMock_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type ErrorHandlerMock_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx heimdall.RequestContext
//   - causeErr error
func (_e *ErrorHandlerMock_Expecter) Execute(ctx interface{}, causeErr interface{}) *ErrorHandlerMock_Execute_Call {
	return &ErrorHandlerMock_Execute_Call{Call: _e.mock.On("Execute", ctx, causeErr)}
}

func (_c *ErrorHandlerMock_Execute_Call) Run(run func(ctx heimdall.RequestContext, causeErr error)) *ErrorHandlerMock_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 heimdall.RequestContext
		if args[0] != nil {
			arg0 = args[0].(heimdall.RequestContext)
		}
		var arg1 error
		if args[1] != nil {
			arg1 = args[1].(error)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ErrorHandlerMock_Execute_Call) Return(err error) *ErrorHandlerMock_Execute_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ErrorHandlerMock_Execute_Call) RunAndReturn(run func(ctx heimdall.RequestContext, causeErr error) error) *ErrorHandlerMock_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// ID provides a mock function for the type ErrorHandlerMock
func (_mock *ErrorHandlerMock) ID() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// ErrorHandlerMock_ID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ID'
type ErrorHandlerMock_ID_Call struct {
	*mock.Call
}

// ID is a helper method to define mock.On call
func (_e *ErrorHandlerMock_Expecter) ID() *ErrorHandlerMock_ID_Call {
	return &ErrorHandlerMock_ID_Call{Call: _e.mock.On("ID")}
}

func (_c *ErrorHandlerMock_ID_Call) Run(run func()) *ErrorHandlerMock_ID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ErrorHandlerMock_ID_Call) Return(s string) *ErrorHandlerMock_ID_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *ErrorHandlerMock_ID_Call) RunAndReturn(run func() string) *ErrorHandlerMock_ID_Call {
	_c.Call.Return(run)
	return _c
}

// WithConfig provides a mock function for the type ErrorHandlerMock
func (_mock *ErrorHandlerMock) WithConfig(stepID string, config map[string]any) (errorhandlers.ErrorHandler, error) {
	ret := _mock.Called(stepID, config)

	if len(ret) == 0 {
		panic("no return value specified for WithConfig")
	}

	var r0 errorhandlers.ErrorHandler
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, map[string]any) (errorhandlers.ErrorHandler, error)); ok {
		return returnFunc(stepID, config)
	}
	if returnFunc, ok := ret.Get(0).(func(string, map[string]any) errorhandlers.ErrorHandler); ok {
		r0 = returnFunc(stepID, config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errorhandlers.ErrorHandler)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, map[string]any) error); ok {
		r1 = returnFunc(stepID, config)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ErrorHandlerMock_WithConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithConfig'
type ErrorHandlerMock_WithConfig_Call struct {
	*mock.Call
}

// WithConfig is a helper method to define mock.On call
//   - stepID string
//   - config map[string]any
func (_e *ErrorHandlerMock_Expecter) WithConfig(stepID interface{}, config interface{}) *ErrorHandlerMock_WithConfig_Call {
	return &ErrorHandlerMock_WithConfig_Call{Call: _e.mock.On("WithConfig", stepID, config)}
}

func (_c *ErrorHandlerMock_WithConfig_Call) Run(run func(stepID string, config map[string]any)) *ErrorHandlerMock_WithConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 map[string]any
		if args[1] != nil {
			arg1 = args[1].(map[string]any)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ErrorHandlerMock_WithConfig_Call) Return(errorHandler errorhandlers.ErrorHandler, err error) *ErrorHandlerMock_WithConfig_Call {
	_c.Call.Return(errorHandler, err)
	return _c
}

func (_c *ErrorHandlerMock_WithConfig_Call) RunAndReturn(run func(stepID string, config map[string]any) (errorhandlers.ErrorHandler, error)) *ErrorHandlerMock_WithConfig_Call {
	_c.Call.Return(run)
	return _c
}
