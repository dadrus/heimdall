// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/dadrus/heimdall/internal/rules/provider/kubernetes/api/v1beta1"
	mock "github.com/stretchr/testify/mock"
)

// NewClientMock creates a new instance of ClientMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientMock {
	mock := &ClientMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ClientMock is an autogenerated mock type for the Client type
type ClientMock struct {
	mock.Mock
}

type ClientMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ClientMock) EXPECT() *ClientMock_Expecter {
	return &ClientMock_Expecter{mock: &_m.Mock}
}

// RuleSetRepository provides a mock function for the type ClientMock
func (_mock *ClientMock) RuleSetRepository(namespace string) v1beta1.RuleSetRepository {
	ret := _mock.Called(namespace)

	if len(ret) == 0 {
		panic("no return value specified for RuleSetRepository")
	}

	var r0 v1beta1.RuleSetRepository
	if returnFunc, ok := ret.Get(0).(func(string) v1beta1.RuleSetRepository); ok {
		r0 = returnFunc(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1beta1.RuleSetRepository)
		}
	}
	return r0
}

// ClientMock_RuleSetRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RuleSetRepository'
type ClientMock_RuleSetRepository_Call struct {
	*mock.Call
}

// RuleSetRepository is a helper method to define mock.On call
//   - namespace string
func (_e *ClientMock_Expecter) RuleSetRepository(namespace interface{}) *ClientMock_RuleSetRepository_Call {
	return &ClientMock_RuleSetRepository_Call{Call: _e.mock.On("RuleSetRepository", namespace)}
}

func (_c *ClientMock_RuleSetRepository_Call) Run(run func(namespace string)) *ClientMock_RuleSetRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ClientMock_RuleSetRepository_Call) Return(ruleSetRepository v1beta1.RuleSetRepository) *ClientMock_RuleSetRepository_Call {
	_c.Call.Return(ruleSetRepository)
	return _c
}

func (_c *ClientMock_RuleSetRepository_Call) RunAndReturn(run func(namespace string) v1beta1.RuleSetRepository) *ClientMock_RuleSetRepository_Call {
	_c.Call.Return(run)
	return _c
}
