// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/dadrus/heimdall/internal/rules/provider/kubernetes/api/v1beta1"
	mock "github.com/stretchr/testify/mock"
	"k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/watch"
)

// NewRuleSetRepositoryMock creates a new instance of RuleSetRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRuleSetRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *RuleSetRepositoryMock {
	mock := &RuleSetRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// RuleSetRepositoryMock is an autogenerated mock type for the RuleSetRepository type
type RuleSetRepositoryMock struct {
	mock.Mock
}

type RuleSetRepositoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *RuleSetRepositoryMock) EXPECT() *RuleSetRepositoryMock_Expecter {
	return &RuleSetRepositoryMock_Expecter{mock: &_m.Mock}
}

// Get provides a mock function for the type RuleSetRepositoryMock
func (_mock *RuleSetRepositoryMock) Get(ctx context.Context, key types.NamespacedName, opts v1.GetOptions) (*v1beta1.RuleSet, error) {
	ret := _mock.Called(ctx, key, opts)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *v1beta1.RuleSet
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.NamespacedName, v1.GetOptions) (*v1beta1.RuleSet, error)); ok {
		return returnFunc(ctx, key, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.NamespacedName, v1.GetOptions) *v1beta1.RuleSet); ok {
		r0 = returnFunc(ctx, key, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta1.RuleSet)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, types.NamespacedName, v1.GetOptions) error); ok {
		r1 = returnFunc(ctx, key, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// RuleSetRepositoryMock_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type RuleSetRepositoryMock_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - key types.NamespacedName
//   - opts v1.GetOptions
func (_e *RuleSetRepositoryMock_Expecter) Get(ctx interface{}, key interface{}, opts interface{}) *RuleSetRepositoryMock_Get_Call {
	return &RuleSetRepositoryMock_Get_Call{Call: _e.mock.On("Get", ctx, key, opts)}
}

func (_c *RuleSetRepositoryMock_Get_Call) Run(run func(ctx context.Context, key types.NamespacedName, opts v1.GetOptions)) *RuleSetRepositoryMock_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 types.NamespacedName
		if args[1] != nil {
			arg1 = args[1].(types.NamespacedName)
		}
		var arg2 v1.GetOptions
		if args[2] != nil {
			arg2 = args[2].(v1.GetOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *RuleSetRepositoryMock_Get_Call) Return(ruleSet *v1beta1.RuleSet, err error) *RuleSetRepositoryMock_Get_Call {
	_c.Call.Return(ruleSet, err)
	return _c
}

func (_c *RuleSetRepositoryMock_Get_Call) RunAndReturn(run func(ctx context.Context, key types.NamespacedName, opts v1.GetOptions) (*v1beta1.RuleSet, error)) *RuleSetRepositoryMock_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type RuleSetRepositoryMock
func (_mock *RuleSetRepositoryMock) List(ctx context.Context, opts v1.ListOptions) (runtime.Object, error) {
	ret := _mock.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 runtime.Object
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, v1.ListOptions) (runtime.Object, error)); ok {
		return returnFunc(ctx, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, v1.ListOptions) runtime.Object); ok {
		r0 = returnFunc(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(runtime.Object)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, v1.ListOptions) error); ok {
		r1 = returnFunc(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// RuleSetRepositoryMock_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type RuleSetRepositoryMock_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - opts v1.ListOptions
func (_e *RuleSetRepositoryMock_Expecter) List(ctx interface{}, opts interface{}) *RuleSetRepositoryMock_List_Call {
	return &RuleSetRepositoryMock_List_Call{Call: _e.mock.On("List", ctx, opts)}
}

func (_c *RuleSetRepositoryMock_List_Call) Run(run func(ctx context.Context, opts v1.ListOptions)) *RuleSetRepositoryMock_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 v1.ListOptions
		if args[1] != nil {
			arg1 = args[1].(v1.ListOptions)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *RuleSetRepositoryMock_List_Call) Return(object runtime.Object, err error) *RuleSetRepositoryMock_List_Call {
	_c.Call.Return(object, err)
	return _c
}

func (_c *RuleSetRepositoryMock_List_Call) RunAndReturn(run func(ctx context.Context, opts v1.ListOptions) (runtime.Object, error)) *RuleSetRepositoryMock_List_Call {
	_c.Call.Return(run)
	return _c
}

// PatchStatus provides a mock function for the type RuleSetRepositoryMock
func (_mock *RuleSetRepositoryMock) PatchStatus(ctx context.Context, patch v1beta1.Patch, opts v1.PatchOptions) (*v1beta1.RuleSet, error) {
	ret := _mock.Called(ctx, patch, opts)

	if len(ret) == 0 {
		panic("no return value specified for PatchStatus")
	}

	var r0 *v1beta1.RuleSet
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, v1beta1.Patch, v1.PatchOptions) (*v1beta1.RuleSet, error)); ok {
		return returnFunc(ctx, patch, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, v1beta1.Patch, v1.PatchOptions) *v1beta1.RuleSet); ok {
		r0 = returnFunc(ctx, patch, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta1.RuleSet)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, v1beta1.Patch, v1.PatchOptions) error); ok {
		r1 = returnFunc(ctx, patch, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// RuleSetRepositoryMock_PatchStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchStatus'
type RuleSetRepositoryMock_PatchStatus_Call struct {
	*mock.Call
}

// PatchStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - patch v1beta1.Patch
//   - opts v1.PatchOptions
func (_e *RuleSetRepositoryMock_Expecter) PatchStatus(ctx interface{}, patch interface{}, opts interface{}) *RuleSetRepositoryMock_PatchStatus_Call {
	return &RuleSetRepositoryMock_PatchStatus_Call{Call: _e.mock.On("PatchStatus", ctx, patch, opts)}
}

func (_c *RuleSetRepositoryMock_PatchStatus_Call) Run(run func(ctx context.Context, patch v1beta1.Patch, opts v1.PatchOptions)) *RuleSetRepositoryMock_PatchStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 v1beta1.Patch
		if args[1] != nil {
			arg1 = args[1].(v1beta1.Patch)
		}
		var arg2 v1.PatchOptions
		if args[2] != nil {
			arg2 = args[2].(v1.PatchOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *RuleSetRepositoryMock_PatchStatus_Call) Return(ruleSet *v1beta1.RuleSet, err error) *RuleSetRepositoryMock_PatchStatus_Call {
	_c.Call.Return(ruleSet, err)
	return _c
}

func (_c *RuleSetRepositoryMock_PatchStatus_Call) RunAndReturn(run func(ctx context.Context, patch v1beta1.Patch, opts v1.PatchOptions) (*v1beta1.RuleSet, error)) *RuleSetRepositoryMock_PatchStatus_Call {
	_c.Call.Return(run)
	return _c
}

// Watch provides a mock function for the type RuleSetRepositoryMock
func (_mock *RuleSetRepositoryMock) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	ret := _mock.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for Watch")
	}

	var r0 watch.Interface
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, v1.ListOptions) (watch.Interface, error)); ok {
		return returnFunc(ctx, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, v1.ListOptions) watch.Interface); ok {
		r0 = returnFunc(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(watch.Interface)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, v1.ListOptions) error); ok {
		r1 = returnFunc(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// RuleSetRepositoryMock_Watch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Watch'
type RuleSetRepositoryMock_Watch_Call struct {
	*mock.Call
}

// Watch is a helper method to define mock.On call
//   - ctx context.Context
//   - opts v1.ListOptions
func (_e *RuleSetRepositoryMock_Expecter) Watch(ctx interface{}, opts interface{}) *RuleSetRepositoryMock_Watch_Call {
	return &RuleSetRepositoryMock_Watch_Call{Call: _e.mock.On("Watch", ctx, opts)}
}

func (_c *RuleSetRepositoryMock_Watch_Call) Run(run func(ctx context.Context, opts v1.ListOptions)) *RuleSetRepositoryMock_Watch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 v1.ListOptions
		if args[1] != nil {
			arg1 = args[1].(v1.ListOptions)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *RuleSetRepositoryMock_Watch_Call) Return(interfaceParam watch.Interface, err error) *RuleSetRepositoryMock_Watch_Call {
	_c.Call.Return(interfaceParam, err)
	return _c
}

func (_c *RuleSetRepositoryMock_Watch_Call) RunAndReturn(run func(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)) *RuleSetRepositoryMock_Watch_Call {
	_c.Call.Return(run)
	return _c
}
