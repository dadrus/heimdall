// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package v1alpha4

import (
	mock "github.com/stretchr/testify/mock"
	"k8s.io/apimachinery/pkg/types"
)

// NewPatchMock creates a new instance of PatchMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPatchMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *PatchMock {
	mock := &PatchMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// PatchMock is an autogenerated mock type for the Patch type
type PatchMock struct {
	mock.Mock
}

type PatchMock_Expecter struct {
	mock *mock.Mock
}

func (_m *PatchMock) EXPECT() *PatchMock_Expecter {
	return &PatchMock_Expecter{mock: &_m.Mock}
}

// Data provides a mock function for the type PatchMock
func (_mock *PatchMock) Data() ([]byte, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Data")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []byte); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PatchMock_Data_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Data'
type PatchMock_Data_Call struct {
	*mock.Call
}

// Data is a helper method to define mock.On call
func (_e *PatchMock_Expecter) Data() *PatchMock_Data_Call {
	return &PatchMock_Data_Call{Call: _e.mock.On("Data")}
}

func (_c *PatchMock_Data_Call) Run(run func()) *PatchMock_Data_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PatchMock_Data_Call) Return(bytes []byte, err error) *PatchMock_Data_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *PatchMock_Data_Call) RunAndReturn(run func() ([]byte, error)) *PatchMock_Data_Call {
	_c.Call.Return(run)
	return _c
}

// ResourceName provides a mock function for the type PatchMock
func (_mock *PatchMock) ResourceName() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ResourceName")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// PatchMock_ResourceName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResourceName'
type PatchMock_ResourceName_Call struct {
	*mock.Call
}

// ResourceName is a helper method to define mock.On call
func (_e *PatchMock_Expecter) ResourceName() *PatchMock_ResourceName_Call {
	return &PatchMock_ResourceName_Call{Call: _e.mock.On("ResourceName")}
}

func (_c *PatchMock_ResourceName_Call) Run(run func()) *PatchMock_ResourceName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PatchMock_ResourceName_Call) Return(s string) *PatchMock_ResourceName_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *PatchMock_ResourceName_Call) RunAndReturn(run func() string) *PatchMock_ResourceName_Call {
	_c.Call.Return(run)
	return _c
}

// ResourceNamespace provides a mock function for the type PatchMock
func (_mock *PatchMock) ResourceNamespace() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ResourceNamespace")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// PatchMock_ResourceNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResourceNamespace'
type PatchMock_ResourceNamespace_Call struct {
	*mock.Call
}

// ResourceNamespace is a helper method to define mock.On call
func (_e *PatchMock_Expecter) ResourceNamespace() *PatchMock_ResourceNamespace_Call {
	return &PatchMock_ResourceNamespace_Call{Call: _e.mock.On("ResourceNamespace")}
}

func (_c *PatchMock_ResourceNamespace_Call) Run(run func()) *PatchMock_ResourceNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PatchMock_ResourceNamespace_Call) Return(s string) *PatchMock_ResourceNamespace_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *PatchMock_ResourceNamespace_Call) RunAndReturn(run func() string) *PatchMock_ResourceNamespace_Call {
	_c.Call.Return(run)
	return _c
}

// Type provides a mock function for the type PatchMock
func (_mock *PatchMock) Type() types.PatchType {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Type")
	}

	var r0 types.PatchType
	if returnFunc, ok := ret.Get(0).(func() types.PatchType); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(types.PatchType)
	}
	return r0
}

// PatchMock_Type_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Type'
type PatchMock_Type_Call struct {
	*mock.Call
}

// Type is a helper method to define mock.On call
func (_e *PatchMock_Expecter) Type() *PatchMock_Type_Call {
	return &PatchMock_Type_Call{Call: _e.mock.On("Type")}
}

func (_c *PatchMock_Type_Call) Run(run func()) *PatchMock_Type_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PatchMock_Type_Call) Return(patchType types.PatchType) *PatchMock_Type_Call {
	_c.Call.Return(patchType)
	return _c
}

func (_c *PatchMock_Type_Call) RunAndReturn(run func() types.PatchType) *PatchMock_Type_Call {
	_c.Call.Return(run)
	return _c
}
