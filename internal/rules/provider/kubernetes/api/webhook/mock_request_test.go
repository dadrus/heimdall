// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package webhook

import (
	mock "github.com/stretchr/testify/mock"
)

// NewRequestMock creates a new instance of RequestMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRequestMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *RequestMock {
	mock := &RequestMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// RequestMock is an autogenerated mock type for the Request type
type RequestMock struct {
	mock.Mock
}

type RequestMock_Expecter struct {
	mock *mock.Mock
}

func (_m *RequestMock) EXPECT() *RequestMock_Expecter {
	return &RequestMock_Expecter{mock: &_m.Mock}
}

// GetUID provides a mock function for the type RequestMock
func (_mock *RequestMock) GetUID() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUID")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// RequestMock_GetUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUID'
type RequestMock_GetUID_Call struct {
	*mock.Call
}

// GetUID is a helper method to define mock.On call
func (_e *RequestMock_Expecter) GetUID() *RequestMock_GetUID_Call {
	return &RequestMock_GetUID_Call{Call: _e.mock.On("GetUID")}
}

func (_c *RequestMock_GetUID_Call) Run(run func()) *RequestMock_GetUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RequestMock_GetUID_Call) Return(s string) *RequestMock_GetUID_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *RequestMock_GetUID_Call) RunAndReturn(run func() string) *RequestMock_GetUID_Call {
	_c.Call.Return(run)
	return _c
}
