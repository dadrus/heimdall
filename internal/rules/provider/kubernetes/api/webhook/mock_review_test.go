// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package webhook

import (
	"net/http"

	mock "github.com/stretchr/testify/mock"
)

// NewReviewMock creates a new instance of ReviewMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReviewMock[Req Request, Resp Response[Req]](t interface {
	mock.TestingT
	Cleanup(func())
}) *ReviewMock[Req, Resp] {
	mock := &ReviewMock[Req, Resp]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ReviewMock is an autogenerated mock type for the Review type
type ReviewMock[Req Request, Resp Response[Req]] struct {
	mock.Mock
}

type ReviewMock_Expecter[Req Request, Resp Response[Req]] struct {
	mock *mock.Mock
}

func (_m *ReviewMock[Req, Resp]) EXPECT() *ReviewMock_Expecter[Req, Resp] {
	return &ReviewMock_Expecter[Req, Resp]{mock: &_m.Mock}
}

// Decode provides a mock function for the type ReviewMock
func (_mock *ReviewMock[Req, Resp]) Decode(r *http.Request) (Req, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for Decode")
	}

	var r0 Req
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*http.Request) (Req, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(*http.Request) Req); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Req)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ReviewMock_Decode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Decode'
type ReviewMock_Decode_Call[Req Request, Resp Response[Req]] struct {
	*mock.Call
}

// Decode is a helper method to define mock.On call
//   - r *http.Request
func (_e *ReviewMock_Expecter[Req, Resp]) Decode(r interface{}) *ReviewMock_Decode_Call[Req, Resp] {
	return &ReviewMock_Decode_Call[Req, Resp]{Call: _e.mock.On("Decode", r)}
}

func (_c *ReviewMock_Decode_Call[Req, Resp]) Run(run func(r *http.Request)) *ReviewMock_Decode_Call[Req, Resp] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *http.Request
		if args[0] != nil {
			arg0 = args[0].(*http.Request)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ReviewMock_Decode_Call[Req, Resp]) Return(v Req, err error) *ReviewMock_Decode_Call[Req, Resp] {
	_c.Call.Return(v, err)
	return _c
}

func (_c *ReviewMock_Decode_Call[Req, Resp]) RunAndReturn(run func(r *http.Request) (Req, error)) *ReviewMock_Decode_Call[Req, Resp] {
	_c.Call.Return(run)
	return _c
}

// WrapResponse provides a mock function for the type ReviewMock
func (_mock *ReviewMock[Req, Resp]) WrapResponse(resp Resp) any {
	ret := _mock.Called(resp)

	if len(ret) == 0 {
		panic("no return value specified for WrapResponse")
	}

	var r0 any
	if returnFunc, ok := ret.Get(0).(func(Resp) any); ok {
		r0 = returnFunc(resp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}
	return r0
}

// ReviewMock_WrapResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WrapResponse'
type ReviewMock_WrapResponse_Call[Req Request, Resp Response[Req]] struct {
	*mock.Call
}

// WrapResponse is a helper method to define mock.On call
//   - resp Resp
func (_e *ReviewMock_Expecter[Req, Resp]) WrapResponse(resp interface{}) *ReviewMock_WrapResponse_Call[Req, Resp] {
	return &ReviewMock_WrapResponse_Call[Req, Resp]{Call: _e.mock.On("WrapResponse", resp)}
}

func (_c *ReviewMock_WrapResponse_Call[Req, Resp]) Run(run func(resp Resp)) *ReviewMock_WrapResponse_Call[Req, Resp] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 Resp
		if args[0] != nil {
			arg0 = args[0].(Resp)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ReviewMock_WrapResponse_Call[Req, Resp]) Return(v any) *ReviewMock_WrapResponse_Call[Req, Resp] {
	_c.Call.Return(v)
	return _c
}

func (_c *ReviewMock_WrapResponse_Call[Req, Resp]) RunAndReturn(run func(resp Resp) any) *ReviewMock_WrapResponse_Call[Req, Resp] {
	_c.Call.Return(run)
	return _c
}
