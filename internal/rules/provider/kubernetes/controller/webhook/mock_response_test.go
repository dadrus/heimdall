// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package webhook

import (
	mock "github.com/stretchr/testify/mock"
)

// NewResponseMock creates a new instance of ResponseMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewResponseMock[Req Request](t interface {
	mock.TestingT
	Cleanup(func())
}) *ResponseMock[Req] {
	mock := &ResponseMock[Req]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ResponseMock is an autogenerated mock type for the Response type
type ResponseMock[Req Request] struct {
	mock.Mock
}

type ResponseMock_Expecter[Req Request] struct {
	mock *mock.Mock
}

func (_m *ResponseMock[Req]) EXPECT() *ResponseMock_Expecter[Req] {
	return &ResponseMock_Expecter[Req]{mock: &_m.Mock}
}

// Complete provides a mock function for the type ResponseMock
func (_mock *ResponseMock[Req]) Complete(v Req) {
	_mock.Called(v)
	return
}

// ResponseMock_Complete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Complete'
type ResponseMock_Complete_Call[Req Request] struct {
	*mock.Call
}

// Complete is a helper method to define mock.On call
//   - v Req
func (_e *ResponseMock_Expecter[Req]) Complete(v interface{}) *ResponseMock_Complete_Call[Req] {
	return &ResponseMock_Complete_Call[Req]{Call: _e.mock.On("Complete", v)}
}

func (_c *ResponseMock_Complete_Call[Req]) Run(run func(v Req)) *ResponseMock_Complete_Call[Req] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 Req
		if args[0] != nil {
			arg0 = args[0].(Req)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ResponseMock_Complete_Call[Req]) Return() *ResponseMock_Complete_Call[Req] {
	_c.Call.Return()
	return _c
}

func (_c *ResponseMock_Complete_Call[Req]) RunAndReturn(run func(v Req)) *ResponseMock_Complete_Call[Req] {
	_c.Run(run)
	return _c
}
