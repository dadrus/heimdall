openapi: 3.1.0

info:
  title: Heimdall
  version: 0.2.0-alpha
  description: The API of heimdall
  license:
    name: Apache 2.0
    identifier: Apache-2.0
    url: https://github.com/dadrus/heimdall/blob/main/LICENSE

servers:
  - url: http://heimdall.management.local
    description: Management Server

tags:
  - name: Well-Known
    description: |
      Operations/resources which fall under the `.well-known` (see [RFC 8615](https://www.rfc-editor.org/rfc/rfc8615))
      category, like health endpoints, etc. This functionality is only available on heimdall's **management port**.

x-tagGroups:
  - name: Management
    tags:
      - Well-Known
  - name: Decision
    tags:
      - Decision API
  - name: Proxy
    tags:
      - Proxy

components:
  schemas:
    ETag:
      description: |
        The ETag (or entity tag) HTTP response header is an identifier for a specific version of a resource. 
        It lets caches be more efficient and save bandwidth, as a web server does not need to resend a full response
        if the content was not changed. Example: `ETag: "33a64df551425fcc55e4d42a148795d9f25f89d4"`.
      type: string

    If-None-Match:
      description: |
        Carries the `ETag` value from the previous response. Enables the client to check whether there is a change
        to the server side resource. Example: `If-None-Match: "33a64df551425fcc55e4d42a148795d9f25f89d4"`.
      type: string

    HealthStatus:
      title: Health status
      description: Simple information about the health status of a heimdall instance
      type: object
      properties:
        status:
          description: The health status
          type: string

    JWKS:
      title: JSON Web Key Set
      description: JSON Web Key Set to validate JSON Web Token.
      type: object
      required:
        - keys
      properties:
        keys:
          description: |
            The value of the 'keys' parameter is an array of JWK values. By default, the order of the JWK values
            within the array does not imply an order of preference among them, although applications of JWK Sets
            can choose to assign a meaning to the order for their purposes, if desired.
          type: array
          items:
            type: object
            required:
              - kty
            properties:
              crv:
                description: |
                  The name of the curve, if the entry represents an EC key (see 
                  [RFC 7518](https://www.rfc-editor.org/rfc/rfc7518) for more details)
                type: string
              x:
                description: X parameter of the elliptic curve, if the entry represents an EC key
                type: string
              y:
                description: Y parameter of the elliptic curve, if the entry represents an EC key
                type: string
              n:
                description: |
                  Modulus parameter of an RSA public key, if the entry represents an RSA public key (see 
                  [RFC 7518](https://www.rfc-editor.org/rfc/rfc7518) for more details)
                type: string
              e:
                description: Exponent parameter of an RSA public key, if the entry represents an RSA public key
                type: string
              kty:
                description: Identifies the cryptographic algorithm family used with the key, such as 'RSA' or 'EC'
                type: string
              use:
                description: Identifies the intended use of the public key, such as 'sig', or 'enc'
                type: string
              key_ops:
                description: Identifies the operation(s) for which the key is intended to be used
                type: string
              alg:
                description: Identifies the algorithm intended for use with the key
                type: string
              kid:
                description: The identifier of the key
                type: string
              x5u:
                description: |
                  X.509 URL parameter is a URI [RFC3986](https://www.rfc-editor.org/rfc/rfc3986) that refers to a
                  resource for an X.509 public key certificate or certificate chain 
                  [RFC5280](https://www.rfc-editor.org/rfc/rfc5280).
                type: string
                format: uri
              x5c:
                description: |
                  Stands for an X.509 certificate chain. This parameter contains a chain of one or more PKIX 
                  certificates [RFC5280](https://www.rfc-editor.org/rfc/rfc5280). The certificate chain is 
                  represented as a JSON array of certificate value strings. Each string in the array is base64-encoded
                type: array
                items:
                  type: string
              x5t:
                description: |
                  Stands for X.509 certificate SHA-1 thumbprint. This parameter is a base64url-encoded SHA-1 thumbprint
                  (a.k.a. digest) of the DER encoding of an X.509 certificate 
                  [RFC5280](https://www.rfc-editor.org/rfc/rfc5280)
                type: string
              x5t#S256:
                description: Stands for X.509 certificate SHA-256 thumbprint. This parameter is a base64url-encoded
                  SHA-256 thumbprint (a.k.a. digest) of the DER encoding of an X.509 certificate 
                  [RFC5280](https://www.rfc-editor.org/rfc/rfc5280)
                type: string

  responses:
    NotModified:
      description: Not Modified. Returned if the resource has not been changed for the given `ETag` value
    InternalServerError:
      description: Internal Server Error. Returned if the service run in a bad condition and cannot serve the request.

paths:
  /.well-known/health:
    servers:
      - url: http://heimdall.management.local
        description: Management Server
    get:
      description: |
        Offers functionality to see the health status of a heimdall instance.
      tags:
        - Well-Known
      operationId: well_known_health
      summary: Get health status
      responses:
        '200':
          description: Health status of a heimdall instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'
              example:
                status: ok
        '500':
          $ref: '#/components/responses/InternalServerError'

  /.well-known/jwks:
    servers:
      - url: http://heimdall.management.local
        description: Management Server
    get:
      description: |
        Exposes the keys for the verification purposes of the issued JWTs in the format of JWKS as described
        in [RFC7517](https://www.rfc-editor.org/rfc/rfc7517). This key set contains the key material configured
        for signing JWTs and makes use of [ETag](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag)
        for caching purposes.

        The contents served by this endpoint directly depend on the configuration for heimdall's key store. So, if
        nothing has been configured, the response will contain the JWKS with a single JWK for the key material heimdall
        generated on start up. Otherwise, the response will contain the JWKS with as many JWK entries, as you've
        specified via the afore said key store. If certificates have been configured together with the keys, 
        the corresponding `x5c` entries will be present as well.
        
        So if you configure the key store with a PEM file with the following contents
        
        ```
        -----BEGIN EC PRIVATE KEY-----
        X-Key-ID: foo
          
        MIGkAgEBBDDo3RMhffhf9OlmyGkDItJt2Xl+CI+mnwxOm0Rxo6P2Dk2vNOIMHNpH
        aznjXi8GqnqgBwYFK4EEACKhZANiAAQAFUfJwN3gJT3kEbIKghNlFAsZHsv3bsF5
        G8aRPOyINEmmejg6g5wHYGScuiTUrHGOqTMQCl8TX/3zffoSTvUIChSPHGZRYeeZ
        ch2aVQopCqdFFcWHBoxHLHK89jo4uS0=
        -----END EC PRIVATE KEY-----
        -----BEGIN EC PRIVATE KEY-----
        X-Key-ID: bar
        
        MIGkAgEBBDA5iBXfURi1mnOpxLTEOHz4+5Cy1qW+nsymnPvwi9GgLiu+zNyKvoKo
        6f1oKq7nF72gBwYFK4EEACKhZANiAASaOh9MIwDLqLl924EothJnz7N19U472vCe
        PfcAOUzCmxQiLmjw6DlW6/aR+xeR1OrWEhQbgJf7nRO6HA+UzhySKJallR+14tKw
        VfeP3/aHHtBxo019d0RzUOXm4N4F97c=
        -----END EC PRIVATE KEY-----
        -----BEGIN CERTIFICATE-----
        MIIBwjCCAUmgAwIBAgIBATAKBggqhkjOPQQDAzA0MQswCQYDVQQGEwJFVTENMAsG
        A1UEChMEVGVzdDEWMBQGA1UEAxMNVGVzdCBJbnQgQ0EgMTAeFw0yMjA4MTUxMzI2
        NTVaFw0yMjA4MTYxMzI2NTVaMDAxCzAJBgNVBAYTAkVVMQ0wCwYDVQQKEwRUZXN0
        MRIwEAYDVQQDEwlUZXN0IEVFIDEwdjAQBgcqhkjOPQIBBgUrgQQAIgNiAAQAFUfJ
        wN3gJT3kEbIKghNlFAsZHsv3bsF5G8aRPOyINEmmejg6g5wHYGScuiTUrHGOqTMQ
        Cl8TX/3zffoSTvUIChSPHGZRYeeZch2aVQopCqdFFcWHBoxHLHK89jo4uS2jMzAx
        MA4GA1UdDwEB/wQEAwIHgDAfBgNVHSMEGDAWgBTVe7ko0R5OcFCHjnlch8D7FuUy
        2TAKBggqhkjOPQQDAwNnADBkAjAv1RMkVae8yjgFAYEwXlkt2fJLd+2e1huNPKTQ
        klVpaEzG90pOml4I/GY4WdkA+aQCMGRJO4NcHore6gW8O/q3UH+sNKI7ajrPir/X
        mifLlRo8WqHqtwdr7PPAdaWJk2Z3rA==
        -----END CERTIFICATE-----
        -----BEGIN CERTIFICATE-----
        MIIB9zCCAX6gAwIBAgIBATAKBggqhkjOPQQDAzA1MQswCQYDVQQGEwJFVTENMAsG
        A1UEChMEVGVzdDEXMBUGA1UEAxMOVGVzdCBSb290IENBIDEwHhcNMjIwODE1MTMy
        NjU1WhcNMjIwODE2MTMyNjU1WjA0MQswCQYDVQQGEwJFVTENMAsGA1UEChMEVGVz
        dDEWMBQGA1UEAxMNVGVzdCBJbnQgQ0EgMTB2MBAGByqGSM49AgEGBSuBBAAiA2IA
        BDMJBSK7YohCKPo5DPiUnf9l5rmap/1LeodMPQYaNUCuIlHbeM+04BKYyIhK9hGj
        dNqNcH+072V7ACGA0ws5T2gDFP91xtahjL2wez5+CTTrM3Dv7wn79YX9yg7fRmg9
        d6NjMGEwDgYDVR0PAQH/BAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYE
        FNV7uSjRHk5wUIeOeVyHwPsW5TLZMB8GA1UdIwQYMBaAFEoIzc7CBkrctksa5pCT
        I3Np8B/6MAoGCCqGSM49BAMDA2cAMGQCMCNss/k8OaTnMzl3+OF0H+hZlylFm8vs
        dwyERJ+eTU7zH3VOog1ylmkwedj+BnEJ8wIwSTu6IBJt4Db1V7ZJN2rIfbrPlIfs
        V7IK5SdVJT3a5Ta6lxdxTtZABlYPHEV7GaUB
        -----END CERTIFICATE-----
        -----BEGIN CERTIFICATE-----
        MIIB2TCCAV6gAwIBAgIBATAKBggqhkjOPQQDAzA1MQswCQYDVQQGEwJFVTENMAsG
        A1UEChMEVGVzdDEXMBUGA1UEAxMOVGVzdCBSb290IENBIDEwHhcNMjIwODE1MTMy
        NjU1WhcNMjIwODE2MTMyNjU1WjA1MQswCQYDVQQGEwJFVTENMAsGA1UEChMEVGVz
        dDEXMBUGA1UEAxMOVGVzdCBSb290IENBIDEwdjAQBgcqhkjOPQIBBgUrgQQAIgNi
        AAR60dYKMyR7IJGOkJUCfBnft32DoFtpeIEQwYUkZDBzDIy5l8pqlX6OdsnRBtwa
        yjFuOQtqjgtb71nrcQSjI6aVTJqBnwsC5tPtqD0cdzICSK/WGokrMnUVF/MYHdhb
        wyejQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQW
        BBRKCM3OwgZK3LZLGuaQkyNzafAf+jAKBggqhkjOPQQDAwNpADBmAjEA41BYFNhv
        gDbE3LOyOWwk6Es/Yatjy7482q/PxfcElvyhX9/h1p6eoLkIILsFXjnnAjEAnHns
        KGAWrW03rnntkKBgkv1vO/Hn8dkKYqPGzgN1kmrXM0qvE6K8lXD0dnVAF6mx
        -----END CERTIFICATE-----
        ```

        The response would look, like
        
        ```
        HTTP/1.1 200 OK
        Date: Mon, 15 Aug 2022 13:26:55 GMT
        Content-Type: application/json
        Content-Length: 2361
        Etag: "2361-623541857"
          
        {
          "keys": [
            {
              "use": "sig",
              "kty": "EC",
              "kid": "foo",
              "crv": "P-384",
              "alg": "ES384",
              "x": "ABVHycDd4CU95BGyCoITZRQLGR7L927BeRvGkTzsiDRJpno4OoOcB2BknLok1Kxx",
              "y": "jqkzEApfE1_98336Ek71CAoUjxxmUWHnmXIdmlUKKQqnRRXFhwaMRyxyvPY6OLkt",
              "x5c": [
        "MIIBwjCCAUmgAwIBAgIBATAKBggqhkjOPQQDAzA0MQswCQYDVQQGEwJFVTENMAs
        GA1UEChMEVGVzdDEWMBQGA1UEAxMNVGVzdCBJbnQgQ0EgMTAeFw0yMjA4MTUxMzI
        2NTVaFw0yMjA4MTYxMzI2NTVaMDAxCzAJBgNVBAYTAkVVMQ0wCwYDVQQKEwRUZXN
        0MRIwEAYDVQQDEwlUZXN0IEVFIDEwdjAQBgcqhkjOPQIBBgUrgQQAIgNiAAQAFUf
        JwN3gJT3kEbIKghNlFAsZHsv3bsF5G8aRPOyINEmmejg6g5wHYGScuiTUrHGOqTM
        QCl8TX/3zffoSTvUIChSPHGZRYeeZch2aVQopCqdFFcWHBoxHLHK89jo4uS2jMzA
        xMA4GA1UdDwEB/wQEAwIHgDAfBgNVHSMEGDAWgBTVe7ko0R5OcFCHjnlch8D7FuU
        y2TAKBggqhkjOPQQDAwNnADBkAjAv1RMkVae8yjgFAYEwXlkt2fJLd+2e1huNPKT
        QklVpaEzG90pOml4I/GY4WdkA+aQCMGRJO4NcHore6gW8O/q3UH+sNKI7ajrPir/
        XmifLlRo8WqHqtwdr7PPAdaWJk2Z3rA==",
        "MIIB9zCCAX6gAwIBAgIBATAKBggqhkjOPQQDAzA1MQswCQYDVQQGEwJFVTENMAs
        GA1UEChMEVGVzdDEXMBUGA1UEAxMOVGVzdCBSb290IENBIDEwHhcNMjIwODE1MTM
        yNjU1WhcNMjIwODE2MTMyNjU1WjA0MQswCQYDVQQGEwJFVTENMAsGA1UEChMEVGV
        zdDEWMBQGA1UEAxMNVGVzdCBJbnQgQ0EgMTB2MBAGByqGSM49AgEGBSuBBAAiA2I
        ABDMJBSK7YohCKPo5DPiUnf9l5rmap/1LeodMPQYaNUCuIlHbeM+04BKYyIhK9hG
        jdNqNcH+072V7ACGA0ws5T2gDFP91xtahjL2wez5+CTTrM3Dv7wn79YX9yg7fRmg
        9d6NjMGEwDgYDVR0PAQH/BAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBY
        EFNV7uSjRHk5wUIeOeVyHwPsW5TLZMB8GA1UdIwQYMBaAFEoIzc7CBkrctksa5pC
        TI3Np8B/6MAoGCCqGSM49BAMDA2cAMGQCMCNss/k8OaTnMzl3+OF0H+hZlylFm8v
        sdwyERJ+eTU7zH3VOog1ylmkwedj+BnEJ8wIwSTu6IBJt4Db1V7ZJN2rIfbrPlIf
        sV7IK5SdVJT3a5Ta6lxdxTtZABlYPHEV7GaUB",
        "MIIB2TCCAV6gAwIBAgIBATAKBggqhkjOPQQDAzA1MQswCQYDVQQGEwJFVTENMAs
        GA1UEChMEVGVzdDEXMBUGA1UEAxMOVGVzdCBSb290IENBIDEwHhcNMjIwODE1MTM
        yNjU1WhcNMjIwODE2MTMyNjU1WjA1MQswCQYDVQQGEwJFVTENMAsGA1UEChMEVGV
        zdDEXMBUGA1UEAxMOVGVzdCBSb290IENBIDEwdjAQBgcqhkjOPQIBBgUrgQQAIgN
        iAAR60dYKMyR7IJGOkJUCfBnft32DoFtpeIEQwYUkZDBzDIy5l8pqlX6OdsnRBtw
        ayjFuOQtqjgtb71nrcQSjI6aVTJqBnwsC5tPtqD0cdzICSK/WGokrMnUVF/MYHdh
        bwyejQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQ
        WBBRKCM3OwgZK3LZLGuaQkyNzafAf+jAKBggqhkjOPQQDAwNpADBmAjEA41BYFNh
        vgDbE3LOyOWwk6Es/Yatjy7482q/PxfcElvyhX9/h1p6eoLkIILsFXjnnAjEAnHn
        sKGAWrW03rnntkKBgkv1vO/Hn8dkKYqPGzgN1kmrXM0qvE6K8lXD0dnVAF6mx"
              ]
            },
            {
              "use": "sig",
              "kty": "EC",
              "kid": "bar",
              "crv": "P-384",
              "alg": "ES384",
              "x": "mjofTCMAy6i5fduBKLYSZ8-zdfVOO9rwnj33ADlMwpsUIi5o8Og5Vuv2kfsXkdTq",
              "y": "1hIUG4CX-50TuhwPlM4ckiiWpZUfteLSsFX3j9_2hx7QcaNNfXdEc1Dl5uDeBfe3"
            }
          ]
        }
        ```
      tags:
        - Well-Known
      summary: Get JWT verification keys (aka JWKS endpoint)
      operationId: well_known_jwks
      parameters:
        - name: If-None-Match
          in: header
          required: false
          schema:
            $ref: '#/components/schemas/If-None-Match'
      responses:
        '200':
          description: JWKS with keys ans certificates
          headers:
            ETag:
              schema:
                $ref: '#/components/schemas/ETag'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWKS'
              example:
                keys:
                  - use: sig
                    kty: EC
                    kid: foo
                    crv: P-384
                    alg: ES384
                    x: 0WuRhXd8TpGy8Xn3zDT3xkkS7Ua66QQSK69gWxPHw7k1tZyQXsUuEudYDb_vwN9f
                    y: _CBaqh43zjEowNq1wZcrMr-bdeDHdz17iVSkJKYonUzDFeyuiHETAQrYcqDT_8mG
                    x5c:
                      - "MIIBwzCCAUmgAwIBAgIBATAKBggqhkjOPQQDAzA0MQswCQYDVQQGEwJFVTENMAsGA1UEChMEVGVzdDEWMBQGA1UEAxMNVGVzdCBJbnQgQ0EgMTAeFw0yMjA4MjYxNDE2MzlaFw0yMjA4MjcxNDE2MzlaMDAxCzAJBgNVBAYTAkVVMQ0wCwYDVQQKEwRUZXN0MRIwEAYDVQQDEwlUZXN0IEVFIDEwdjAQBgcqhkjOPQIBBgUrgQQAIgNiAATRa5GFd3xOkbLxeffMNPfGSRLtRrrpBBIrr2BbE8fDuTW1nJBexS4S51gNv+/A31/8IFqqHjfOMSjA2rXBlysyv5t14Md3PXuJVKQkpiidTMMV7K6IcRMBCthyoNP/yYajMzAxMA4GA1UdDwEB/wQEAwIHgDAfBgNVHSMEGDAWgBTnmalbrDGB9vYp3pgrWMsuekT/lTAKBggqhkjOPQQDAwNoADBlAjB6Ww6YNcOc2/b5nEWMNIS65pdaKWmOUzlf0kObTngLy/K+CGR7URSpgebN+l66KT4CMQDx2zCwZ/nm3k66q1y+7xROvb1Ex8/lMu9PR6pUB6ly6Km5NR49jvNPD2y30jVYwYQ="
                      - "MIIB9zCCAX6gAwIBAgIBATAKBggqhkjOPQQDAzA1MQswCQYDVQQGEwJFVTENMAsGA1UEChMEVGVzdDEXMBUGA1UEAxMOVGVzdCBSb290IENBIDEwHhcNMjIwODI2MTQxNjM5WhcNMjIwODI3MTQxNjM5WjA0MQswCQYDVQQGEwJFVTENMAsGA1UEChMEVGVzdDEWMBQGA1UEAxMNVGVzdCBJbnQgQ0EgMTB2MBAGByqGSM49AgEGBSuBBAAiA2IABN7hGog6/ITGXjAQMgI9SK5o8cQD7S1nY3KeL/E7X8nA9rRn7ypoa3MLRsvqbaTUo0UDQ+1SHiggx6sPZuMFbEEFuNogppwT+FipiRO7STPgl3tzN56ujPbS7zA1Idl8GqNjMGEwDgYDVR0PAQH/BAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFOeZqVusMYH29inemCtYyy56RP+VMB8GA1UdIwQYMBaAFChI/FlLwR+/sRpsUDoo/09yXQyyMAoGCCqGSM49BAMDA2cAMGQCMACiNY17Rb4ODRcQHPEkXm7ASwgG7LC4qFojACWyOoIYUMsdToVf9qLNEr+VMDFxcwIwMkBU1B49EAuQfw6KjVyRL3eWqjf968J+fZl98JhbBEIiXSZH+QZ1o4Wr3uF1dvPg"
                      - "MIIB2TCCAV6gAwIBAgIBATAKBggqhkjOPQQDAzA1MQswCQYDVQQGEwJFVTENMAsGA1UEChMEVGVzdDEXMBUGA1UEAxMOVGVzdCBSb290IENBIDEwHhcNMjIwODI2MTQxNjM5WhcNMjIwODI3MTQxNjM5WjA1MQswCQYDVQQGEwJFVTENMAsGA1UEChMEVGVzdDEXMBUGA1UEAxMOVGVzdCBSb290IENBIDEwdjAQBgcqhkjOPQIBBgUrgQQAIgNiAARA9OvlJEV3H6utejUDh04NI4dia5vPD0kA1hBmljoxwv1QmfT3jbkXRqSs59X+tmElmbv5ZEZjrlYzf5w2H2P7RwenUPI0btI/OYtP6Rb7+uSmeHJ2da+fHMU7G48qWVSjQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBQoSPxZS8Efv7EabFA6KP9Pcl0MsjAKBggqhkjOPQQDAwNpADBmAjEA9c3JZ4zGlCG+ZDHL6uy/pGL2kbk6qS4H4cYfIMse+vbovIcvow+EZ+i0q0cPeTQRAjEAmafGSmd+xfH++ET8S9Xy6ldml6l3zObqi1/FrrUN2BxpVdnud/EoQMgJkGOX70rs"
                  - use: sig
                    kty: EC
                    kid: bar
                    crv: P-384
                    alg: ES384
                    x: F47uZNn_QtqKXcxsYsJSc5asaqEPxVuc2sIVLzR2dRDi29tdA_X7phRX9kGhDnOO
                    y: elcChdCImsIaRT7xVLslehBpVaWKlNnCSTPhJLYXwcB1dS24bpUkwAiVijejZ0J0
        '304':
          $ref: '#/components/responses/NotModified'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /{*}:
    servers:
      - url: http://heimdall.decision.local
        description: Decision Service
    description: foo bar
    summary: bar foo
    get:
      summary: Decision endpoint
      description: Decision API 3
      tags:
        - Decision API
      operationId: get_decision_api
      parameters:
        - name: Path
          in: path
          description: The path & query parameters to check the access to
          schema:
            type: string
        - name: X-Forwarded-Method
          in: header
          description: The HTTP method to use to for the url to verify access to. If not present defaults to the method used for sending the request to heimdall.
          schema:
            type: string
        - name: X-Forwarded-Proto
          in: header
          description: Schema to use to build the url to verify access to. If not present defaults to the schema used to operate heimdall.
          schema:
            type: string
        - name: X-Forwarded-Host
          in: header
          description: Host to use to build the url to verify access to
          schema:
            type: string
        - name: X-Forwarded-Path
          in: header
          description: Path to use to build the url to verify access to. If not present the `Path` parameter is used
          schema:
            type: string
        - name: X-Forwarded-Uri
          in: header
          description: The Uri to use to build the url to verify access to.
          schema:
            type: string
        - name: X-Forwarded-For
          in: header
          description: A list with IPs of the clients (from heimdall perspective), the request has been passed through.
          schema:
            type: string
        - name: Forwarded
          in: header
          description: A list with IPs of the clients (from heimdall perspective), the request has been passed through.
          schema:
            type: string
        - name: <Application Specific>
          in: header
          description: Placeholder for other headers, the defined rules make use of.
          schema:
            type: string
        - name: <Application Specific>
          in: cookie
          description: Placeholder for cookies, the defined rules make use of.
          schema:
            type: string
      responses:
        '202':
          description: Request has been accepted
          headers:
            <Application Specific>:
              description: |
                Placeholder for the headers, created as a result of successful execution of application specific rules.
                E.g. a rule can create an `Authorization` header with a bearer token in a JWT format to be forwarded to
                the upstream service by an API-Gateway.
              schema:
                type: string
        '401':
          description: Unauthorized. Returned if a matching rule could not verify the authentication status of the subject related to the request.
        '403':
          description: Forbidden. Returned if a matching rule could not verify the authorization status of the subject related to the request.
        '404':
          description: Not Found. Returned if there was no rule found, which could be used to verify the request.
        '405':
          description: Method not allowed. Returned if the patched rule doesn't allow the usage of a particular HTTP method.
        '502':
          description: |
            Bad Gateway. Returned if the communication with any of the systems, the handlers in a matching rule are 
            using, failed due to DNS, timeout etc. errors.
    post:
      summary: Decision endpoint
      description: Decision API 3
      tags:
        - Decision API
      operationId: post_decision_api
      responses:
        '202':
          description: Request has been accepted
          headers:
            Authorization:
              description: Foo bar
              schema:
                type: string
            '<user defined>':
              description: bar foo
              schema:
                type: string
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '405':
          description: Method not allowed
        '502':
          description: Bad Gateway

