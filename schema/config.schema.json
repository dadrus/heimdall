{
  "$id": "/heimdall/config.schema.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Heimdall Configuration",
  "type": "object",
  "additionalProperties": false,
  "definitions": {
    "keyStore": {
      "description": "Key store holding the keys and certificates",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "path"
      ],
      "properties": {
        "path": {
          "description": "The path to the key store in PEM format",
          "type": "string"
        },
        "password": {
          "description": "Password for the key material in the key store if PKCS#8 encrypted format is used.",
          "type": "string"
        }
      }
    },
    "tlsConfig": {
      "description": "TLS Configuration",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "key_store": {
          "$ref": "#/definitions/keyStore"
        },
        "key_id": {
          "description": "The key id referencing the entry in the key store",
          "type": "string"
        },
        "min_version": {
          "title": "minimum TLS version to support",
          "description": "Only TLS 1.2 and TLS 1.3 are supported",
          "type": "string",
          "enum": [
            "TLS1.2",
            "TLS1.3"
          ],
          "default": "TLS1.3"
        },
        "cipher_suites": {
          "description": "TLS cipher suites to support. Are only used if TLS v1.2 is configured as minimum version",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256",
              "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256",
              "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256",
              "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256",
              "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384",
              "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384",
              "TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256",
              "TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256"
            ]
          },
          "uniqueItems": true,
          "default": [
            "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256",
            "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256",
            "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384",
            "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384",
            "TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256",
            "TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256"
          ]
        }
      }
    },
    "corsConfig": {
      "description": "Configure [Cross Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/) using the following options.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "allowed_origins": {
          "description": "A list of allowed origins a cross-domain request can be executed from. If the special * value is present in the list, all origins will be allowed. An origin may contain a wildcard (*) to replace 0 or more characters (i.e.: https://*.domain.com). Usage of wildcards implies a small performance penalty. Only one wildcard can be used per origin.",
          "type": "array",
          "items": {
            "type": "string",
            "minLength": 1
          },
          "default": [
            "*"
          ],
          "uniqueItems": true,
          "examples": [
            [
              "https://example.com",
              "https://*.example.com",
              "https://*.foo.example.com"
            ]
          ]
        },
        "allowed_methods": {
          "type": "array",
          "description": "A list of HTTP methods the client is allowed to use with cross-domain requests.",
          "items": {
            "type": "string",
            "enum": [
              "GET",
              "HEAD",
              "POST",
              "PUT",
              "DELETE",
              "CONNECT",
              "TRACE",
              "PATCH"
            ]
          },
          "uniqueItems": true,
          "default": [
            "GET",
            "POST",
            "PUT",
            "PATCH",
            "DELETE"
          ]
        },
        "allowed_headers": {
          "description": "A list of HTTP headers the client is allowed to use with cross-domain requests.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "minLength": 1,
          "uniqueItems": true,
          "default": [
            "Authorization",
            "Content-Type"
          ]
        },
        "exposed_headers": {
          "description": "Indicates which headers are allowed and safe to expose to the API of a CORS API specification",
          "type": "array",
          "items": {
            "type": "string"
          },
          "minLength": 1,
          "uniqueItems": true,
          "default": [
            "Content-Type"
          ]
        },
        "allow_credentials": {
          "description": "Indicates whether the request can include user credentials like cookies, HTTP authentication or client side SSL certificates.",
          "type": "boolean",
          "default": false
        },
        "max_age": {
          "description": "Indicates how long the results of a preflight request can be cached. The default is 0s which stands for no max age.",
          "type": "string",
          "default": "0s",
          "pattern": "^[0-9]+(ns|us|ms|s|m|h)$",
          "examples": [
            "5s",
            "5m",
            "5h"
          ]
        }
      }
    },
    "timeoutConfig": {
      "description": "Controls the HTTP timeouts.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "read": {
          "description": "The maximum duration for reading the entire request, including the body.",
          "type": "string",
          "default": "5s",
          "pattern": "^[0-9]+(ns|us|ms|s|m|h)$",
          "examples": [
            "5s",
            "5m",
            "5h"
          ]
        },
        "write": {
          "description": "The maximum duration before timing out writes of the response. Increase this parameter to prevent unexpected closing a client connection if an upstream request is responding slowly.",
          "type": "string",
          "default": "120s",
          "pattern": "^[0-9]+(ns|us|ms|s|m|h)$",
          "examples": [
            "5s",
            "5m",
            "5h"
          ]
        },
        "idle": {
          "description": " The maximum amount of time to wait for any action of a request session, reading data or writing the response.",
          "type": "string",
          "default": "120s",
          "pattern": "^[0-9]+(ns|us|ms|s|m|h)$",
          "examples": [
            "5s",
            "5m",
            "5h"
          ]
        }
      }
    },
    "bufferLimitConfig": {
      "type": "object",
      "description": "Overrides the default request and response buffer sizes",
      "additionalProperties": false,
      "properties": {
        "read": {
          "description": "The maximum buffer size for reading the entire request, including the body. Increase this parameter to prevent unexpected closing a client connection if the client request exceeds the default 4KB.",
          "type": "string",
          "default": "4KB",
          "pattern": "^[0-9]+(B|KB|MB)$",
          "examples": [
            "5KB",
            "1MB",
            "1.6MB"
          ]
        },
        "write": {
          "description": "The maximum buffer size for writing the response. Increase this parameter to prevent unexpected closing a client connection if a response create by heimdall exceeds the default 4KB.",
          "type": "string",
          "default": "4KB",
          "pattern": "^[0-9]+(B|KB|MB)$",
          "examples": [
            "5KB",
            "1MB",
            "1.6MB"
          ]
        }
      }
    },
    "connectionsLimitConfig": {
      "type": "object",
      "description": "Overrides the default limits for connections",
      "additionalProperties": false,
      "properties": {
        "max_per_host": {
          "description": "Max allowed connections per host. 0 means no limits (default)",
          "type": "integer",
          "default": 0
        },
        "max_idle": {
          "description": "Max allowed idle connections. Defaults to 100",
          "type": "integer",
          "default": 100
        },
        "max_idle_per_host": {
          "description": "Max allowed idle connections per host. Defaults to 100",
          "type": "integer",
          "default": 100
        }
      }
    },
    "responseOverride": {
      "type": "object",
      "description": "Overrides the defaults for responses",
      "additionalProperties": false,
      "properties": {
        "code": {
          "type": "integer",
          "description": "The HTTP status code"
        }
      }
    },
    "respondWithConfig": {
      "type": "object",
      "description": "How the service should response",
      "additionalProperties": false,
      "properties": {
        "verbose": {
          "type": "boolean",
          "description": "Whether the response should be verbose in error cases",
          "default": false
        },
        "with": {
          "type": "object",
          "description": "Overrides for the status codes",
          "additionalProperties": false,
          "properties": {
            "accepted": {
              "$ref": "#/definitions/responseOverride"
            },
            "precondition_error": {
              "$ref": "#/definitions/responseOverride"
            },
            "authentication_error": {
              "$ref": "#/definitions/responseOverride"
            },
            "authorization_error": {
              "$ref": "#/definitions/responseOverride"
            },
            "method_error": {
              "$ref": "#/definitions/responseOverride"
            },
            "communication_error": {
              "$ref": "#/definitions/responseOverride"
            },
            "internal_error": {
              "$ref": "#/definitions/responseOverride"
            },
            "no_rule_error": {
              "$ref": "#/definitions/responseOverride"
            }
          }
        }
      }
    },
    "subjectConfiguration": {
      "description": "Configuration of where to get subject information/attributes from",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "attributes": {
          "description": "The `attributes` field in the Heimdall's subject object is set using this JSON Path. Defaults to `@this` (for the root element), `foo.bar` (for key foo.bar), or any other valid GJSON path. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference.",
          "type": "string",
          "default": "@this"
        },
        "id": {
          "description": "The `id` field in the Heimdall's subject object is set using this JSON Path. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference.",
          "type": "string"
        }
      }
    },
    "sessionLifespanConfiguration": {
      "description": "Enables the configuration of session lifespans, used for session validation for those authenticators, which act on non-standard protocols",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "active": {
          "description": "A GJSON Path pointing to the field describing the \"active\" status of the session in the corresponding JSON object.",
          "type": "string"
        },
        "issued_at": {
          "description": "A GJSON Path pointing to the field in the corresponding JSON object",
          "type": "string"
        },
        "not_before": {
          "description": "A GJSON Path pointing to the field in the corresponding JSON object",
          "type": "string"
        },
        "not_after": {
          "description": "A GJSON Path pointing to the field in the corresponding JSON object",
          "type": "string"
        },
        "time_format": {
          "description": "Allows the definition of the time format/layout used by the authentication system. Defaults to Unix Epoch time stamp if not defined.",
          "type": "string"
        },
        "validity_leeway": {
          "type": "string",
          "description": "Acceptable time deviation for the validity assertion",
          "pattern": "^[0-9]+(ns|us|ms|s|m|h)$",
          "default": "0s",
          "examples": [
            "1h",
            "1m",
            "30s"
          ]
        }
      }
    },
    "expressionList": {
      "description": "A list of authorization expressions to evaluate",
      "type": "array",
      "uniqueItems": true,
      "minItems": 1,
      "items": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "expression"
        ],
        "properties": {
          "expression": {
            "description": "The actual expression",
            "type": "string",
            "examples": [
              "Subject.ID == foo"
            ]
          },
          "message": {
            "description": "Message to log if the expression fails",
            "type": "string"
          }
        }
      }
    },
    "oauth2ClientCredentialsFlowConfig": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "client_id",
        "client_secret",
        "token_url"
      ],
      "properties": {
        "client_id": {
          "description": "The OAuth 2.0 Client ID to be used for the OAuth 2.0 Client Credentials Grant",
          "type": "string"
        },
        "client_secret": {
          "description": "The OAuth 2.0 Client Secret to be used for the OAuth 2.0 Client Credentials Grant",
          "type": "string"
        },
        "auth_method": {
          "description": "How to transfer the client_id and client_secret to the oauth provider",
          "type": "string",
          "default": "basic_auth",
          "enum": [
            "basic_auth",
            "request_body"
          ]
        },
        "token_url": {
          "description": "The OAuth 2.0 Token Endpoint where the OAuth 2.0 Client Credentials Grant will be performed",
          "type": "string"
        },
        "scopes": {
          "description": "The OAuth 2.0 Scopes to be requested during the OAuth 2.0 Client Credentials Grant",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "cache_ttl": {
          "type": "string",
          "description": "How long to cache the issued token. Defaults to the value of the `expires_in` of the issued token. If `expires_in` is not present in the response, the token is not cached until this property is not explicitly configured. If `expires_in` is present in the response and this property is configured the shorter value is taken. 0 or negative value will disable caching. ",
          "pattern": "^[0-9]+(ns|us|ms|s|m|h)$",
          "examples": [
            "1h",
            "1m",
            "30s"
          ]
        },
        "header": {
          "type": "object",
          "description": "Header and scheme to use to transport the issued token to the upstream",
          "additionalProperties": false,
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "The header name to use",
              "type": "string",
              "default": "Authorization"
            },
            "scheme": {
              "description": "The scheme to use",
              "type": "string",
              "default": "Bearer"
            }
          }
        }
      }
    },
    "ruleSetEndpointConfiguration": {
      "description": "Endpoint to load rule sets from",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "url"
      ],
      "properties": {
        "url": {
          "description": "The URL to communicate to.",
          "type": "string",
          "format": "uri",
          "examples": [
            "https://session-store-host"
          ]
        },
        "headers": {
          "description": "The HTTP headers to be send to the endpoint",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "minLength": 0,
          "uniqueItems": true,
          "default": []
        },
        "retry": {
          "description": "How the implementation should behave when trying to access the configured endpoint",
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "give_up_after": {
              "description": "When the implementation should finally give up, if the endpoint is not answering.",
              "type": "string",
              "default": "1s",
              "pattern": "^[0-9]+(ns|us|ms|s|m|h)$"
            },
            "max_delay": {
              "description": "How long the implementation should wait between the attempts",
              "type": "string",
              "pattern": "^[0-9]+(ns|us|ms|s|m|h)$",
              "default": "100ms"
            }
          }
        },
        "auth": {
          "description": "How to authenticate against the endpoint",
          "type": "object",
          "oneOf": [
            {
              "$ref": "#/definitions/endpointAuthApiKeyProperties"
            },
            {
              "$ref": "#/definitions/endpointAuthBasicAuthProperties"
            },
            {
              "$ref": "#/definitions/endpointAuth2ClientCredentialsProperties"
            }
          ]
        },
        "rule_path_match_prefix": {
          "description": "The path prefix to be checked in each rule retrieved from the endpoint",
          "type": "string",
          "examples": [
            "/foo/bar"
          ]
        },
        "enable_http_cache": {
          "description": "Enables or disables http cache usage according to RFC 7234",
          "type": "boolean",
          "default": true
        }
      }
    },
    "endpointConfiguration": {
      "description": "Endpoint to to communicate to",
      "anyOf": [
        {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "url"
          ],
          "properties": {
            "url": {
              "description": "The URL to communicate to.",
              "type": "string",
              "format": "uri",
              "examples": [
                "https://session-store-host"
              ]
            },
            "method": {
              "description": "The HTTP Method to use when communicating with the endpoint",
              "type": "string",
              "default": "GET",
              "examples": [
                "GET",
                "POST"
              ]
            },
            "headers": {
              "description": "The HTTP headers to be send to the end point",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "minLength": 0,
              "uniqueItems": true,
              "default": []
            },
            "retry": {
              "description": "How the implementation should behave when trying to access the configured endpoint",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "give_up_after": {
                  "description": "When the implementation should finally give up, if the endpoint is not answering.",
                  "type": "string",
                  "default": "1s",
                  "pattern": "^[0-9]+(ns|us|ms|s|m|h)$"
                },
                "max_delay": {
                  "description": "How long the implementation should wait between the attempts",
                  "type": "string",
                  "pattern": "^[0-9]+(ns|us|ms|s|m|h)$",
                  "default": "100ms"
                }
              }
            },
            "auth": {
              "description": "How to authenticate against the endpoint",
              "type": "object",
              "oneOf": [
                {
                  "$ref": "#/definitions/endpointAuthApiKeyProperties"
                },
                {
                  "$ref": "#/definitions/endpointAuthBasicAuthProperties"
                },
                {
                  "$ref": "#/definitions/endpointAuth2ClientCredentialsProperties"
                }
              ]
            },
            "http_cache": {
              "description": "Configures cache usage according to RFC 7234",
              "additionalProperties": false,
              "properties": {
                "enabled": {
                  "description": "Enables or disables http cache usage",
                  "type": "boolean",
                  "default": false
                },
                "default_ttl": {
                  "description": "How long a response from server should be cached if no cache related headers are present",
                  "type": "string",
                  "pattern": "^[0-9]+(ns|us|ms|s|m|h)$",
                  "default": "0ms",
                  "examples": [
                    "1h",
                    "1m",
                    "30s"
                  ]
                }
              }
            }
          }
        },
        {
          "type": "string",
          "description": "If only URL should be configured for the endpoint",
          "format": "uri-reference",
          "examples": [
            "http://some.endpoint"
          ]
        }
      ]
    },
    "metadataEndpointConfiguration": {
      "description": "Metadata endpoint settings to discover OAuth2/OIDC configuration",
      "anyOf": [
        {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "url"
          ],
          "properties": {
            "url": {
              "description": "The URL to communicate to.",
              "type": "string",
              "format": "uri",
              "examples": [
                "https://session-store-host"
              ]
            },
            "method": {
              "description": "The HTTP Method to use when communicating with the endpoint",
              "type": "string",
              "default": "GET",
              "examples": [
                "GET",
                "POST"
              ]
            },
            "headers": {
              "description": "The HTTP headers to be send to the end point",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "minLength": 0,
              "uniqueItems": true,
              "default": []
            },
            "retry": {
              "description": "How the implementation should behave when trying to access the configured endpoint",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "give_up_after": {
                  "description": "When the implementation should finally give up, if the endpoint is not answering.",
                  "type": "string",
                  "default": "1s",
                  "pattern": "^[0-9]+(ns|us|ms|s|m|h)$"
                },
                "max_delay": {
                  "description": "How long the implementation should wait between the attempts",
                  "type": "string",
                  "pattern": "^[0-9]+(ns|us|ms|s|m|h)$",
                  "default": "100ms"
                }
              }
            },
            "auth": {
              "description": "How to authenticate against the endpoint",
              "type": "object",
              "oneOf": [
                {
                  "$ref": "#/definitions/endpointAuthApiKeyProperties"
                },
                {
                  "$ref": "#/definitions/endpointAuthBasicAuthProperties"
                },
                {
                  "$ref": "#/definitions/endpointAuth2ClientCredentialsProperties"
                }
              ]
            },
            "http_cache": {
              "description": "Configures cache usage according to RFC 7234",
              "additionalProperties": false,
              "properties": {
                "enabled": {
                  "description": "Enables or disables http cache usage",
                  "type": "boolean",
                  "default": false
                },
                "default_ttl": {
                  "description": "How long a response from server should be cached if no cache related headers are present",
                  "type": "string",
                  "pattern": "^[0-9]+(ns|us|ms|s|m|h)$",
                  "default": "0ms",
                  "examples": [
                    "1h",
                    "1m",
                    "30s"
                  ]
                }
              }
            },
            "disable_issuer_identifier_verification": {
              "type": "boolean",
              "description": "Whether issuer identifier verification according to RFC8414 should be skipped. Used only if metadata_endpoint is configured",
              "default": false
            }
          }
        },
        {
          "type": "string",
          "description": "If only URL should be configured for the endpoint",
          "format": "uri-reference",
          "examples": [
            "http://some.endpoint"
          ]
        }
      ]
    },
    "endpointAuthBasicAuthProperties": {
      "properties": {
        "type": {
          "const": "basic_auth"
        },
        "config": {
          "type": "object",
          "properties": {
            "user": {
              "description": "user name for basic auth",
              "type": "string"
            },
            "password": {
              "description": "password for basic auth",
              "type": "string"
            }
          },
          "additionalProperties": false,
          "required": [
            "user",
            "password"
          ]
        }
      },
      "additionalProperties": false,
      "required": [
        "type",
        "config"
      ]
    },
    "endpointAuthApiKeyProperties": {
      "properties": {
        "type": {
          "const": "api_key"
        },
        "config": {
          "type": "object",
          "properties": {
            "name": {
              "description": "The name of the api key",
              "type": "string"
            },
            "value": {
              "description": "The value of the api key",
              "type": "string"
            },
            "in": {
              "description": "How the api key should be transferred",
              "type": "string",
              "enum": [
                "header",
                "cookie",
                "query"
              ]
            }
          },
          "additionalProperties": false,
          "required": [
            "name",
            "value",
            "in"
          ]
        }
      },
      "additionalProperties": false,
      "required": [
        "type",
        "config"
      ]
    },
    "endpointAuth2ClientCredentialsProperties": {
      "additionalProperties": false,
      "required": [
        "type",
        "config"
      ],
      "properties": {
        "type": {
          "const": "oauth2_client_credentials"
        },
        "config": {
          "$ref": "#/definitions/oauth2ClientCredentialsFlowConfig"
        }
      }
    },
    "authenticationDataSource": {
      "description": "Where does the request contain authentication information, like header cookie, ets",
      "type": "array",
      "additionalItems": false,
      "items": {
        "anyOf": [
          {
            "description": "The header (case insensitive) that contains the authentication information.",
            "type": "object",
            "additionalProperties": false,
            "required": [
              "header"
            ],
            "properties": {
              "header": {
                "type": "string"
              },
              "scheme": {
                "type": "string"
              }
            }
          },
          {
            "description": "The cookie (case sensitive) that contains the authentication information.",
            "type": "object",
            "additionalProperties": false,
            "required": [
              "cookie"
            ],
            "properties": {
              "cookie": {
                "type": "string"
              }
            }
          },
          {
            "description": "The query parameter (case sensitive) that contains the authentication information.",
            "type": "object",
            "additionalProperties": false,
            "required": [
              "query_parameter"
            ],
            "properties": {
              "query_parameter": {
                "type": "string"
              }
            }
          },
          {
            "description": "The body parameter (case sensitive) that contains the authentication information.",
            "type": "object",
            "additionalProperties": false,
            "required": [
              "body_parameter"
            ],
            "properties": {
              "body_parameter": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "assertionRequirements": {
      "description": "Defines verification requirements for the assertion, like the introspection response or a JWT token",
      "type": "object",
      "properties": {
        "scopes": {
          "oneOf": [
            {
              "description": "An array of OAuth 2.0 scopes that are required when accessing an endpoint protected by this mechanism.\n If the token used in the Authorization header did not request that specific scope, the request is denied.",
              "type": "object",
              "properties": {
                "matching_strategy": {
                  "description": "Sets the strategy validation algorithm.",
                  "type": "string",
                  "default": "exact",
                  "enum": [
                    "hierarchic",
                    "exact",
                    "wildcard"
                  ]
                },
                "values": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "An array of OAuth 2.0 scopes that are required when accessing an endpoint protected by this mechanism.\n If the token used in the Authorization header did not request that specific scope, the request is denied. When only the actual scopes are configured the matching strategy is 'exact'",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ]
        },
        "audience": {
          "description": "An array of audiences that are required when accessing an endpoint protected by this mechanism.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "issuers": {
          "description": "The assertion/token must have been issued by one of the issuers listed in this array.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "allowed_algorithms": {
          "description": "If the assertion (e.g., a JWT) is signed, which algorithms are allowed",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "validity_leeway": {
          "description": "If the assertion (e.g. a JWT) has a validity, which deviation from the current system time is allowed",
          "type": "string",
          "pattern": "^[0-9]+(ns|us|ms|s|m|h)$",
          "default": "10s"
        }
      }
    },
    "authenticatorAnonymous": {
      "description": "Anonymous Authenticator",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "const": "anonymous"
        },
        "id": {
          "description": "The unique id of the authenticator to be used in the rule definition",
          "type": "string"
        },
        "config": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "subject": {
              "description": "Sets the name/id of the anonymous subject.",
              "type": "string",
              "examples": [
                "guest",
                "anon",
                "unknown"
              ],
              "default": "anonymous"
            }
          }
        }
      }
    },
    "authenticatorUnauthorized": {
      "description": "Unauthorized Authenticator",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "const": "unauthorized"
        },
        "id": {
          "type": "string",
          "description": "The unique id of the authenticator to be used in the rule definition"
        }
      }
    },
    "authenticatorGeneric": {
      "description": "Generic Authenticator",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "const": "generic"
        },
        "id": {
          "description": "The unique id of the authenticator to be used in the rule definition",
          "type": "string"
        },
        "config": {
          "title": "Generic Authenticator Configuration",
          "type": "object",
          "additionalProperties": false,
          "required": [
            "identity_info_endpoint",
            "authentication_data_source",
            "subject"
          ],
          "properties": {
            "identity_info_endpoint": {
              "$ref": "#/definitions/endpointConfiguration"
            },
            "authentication_data_source": {
              "$ref": "#/definitions/authenticationDataSource"
            },
            "forward_headers": {
              "description": "The HTTP header names from the request to be send to the contextualizer endpoint",
              "type": "array",
              "additionalItems": false,
              "items": {
                "type": "string"
              }
            },
            "forward_cookies": {
              "description": "The HTTP cookie names from the request to be send to the contextualizer endpoint",
              "type": "array",
              "additionalItems": false,
              "items": {
                "type": "string"
              }
            },
            "payload": {
              "description": "The Go template with access to heimdall. Request and Subject used for request's HTTP body generation",
              "type": "string"
            },
            "subject": {
              "$ref": "#/definitions/subjectConfiguration"
            },
            "cache_ttl": {
              "type": "string",
              "description": "How long to cache the response from the identity info endpoint.",
              "pattern": "^[0-9]+(ns|us|ms|s|m|h)$",
              "default": "15m",
              "examples": [
                "1h",
                "1m",
                "30s"
              ]
            },
            "allow_fallback_on_error": {
              "type": "boolean",
              "description": "Whether the pipeline should fallback to a next authenticator if this one fails validating the given credentials",
              "default": false
            },
            "session_lifespan": {
              "$ref": "#/definitions/sessionLifespanConfiguration"
            }
          }
        }
      }
    },
    "authenticatorOAuth2Introspection": {
      "description": "OAuth2 Introspection Authenticator",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "const": "oauth2_introspection"
        },
        "id": {
          "description": "The unique id of the authenticator to be used in the rule definition",
          "type": "string"
        },
        "config": {
          "description": "OAuth2 Introspection Configuration",
          "type": "object",
          "additionalProperties": false,
          "oneOf": [
            {
              "required": [
                "introspection_endpoint"
              ]
            },
            {
              "required": [
                "metadata_endpoint"
              ]
            }
          ],
          "properties": {
            "introspection_endpoint": {
              "$ref": "#/definitions/endpointConfiguration"
            },
            "metadata_endpoint": {
              "$ref": "#/definitions/metadataEndpointConfiguration"
            },
            "token_source": {
              "$ref": "#/definitions/authenticationDataSource"
            },
            "assertions": {
              "$ref": "#/definitions/assertionRequirements"
            },
            "subject": {
              "$ref": "#/definitions/subjectConfiguration"
            },
            "cache_ttl": {
              "type": "string",
              "description": "How long to cache the response from the introspection endpoint.",
              "pattern": "^[0-9]+(ns|us|ms|s|m|h)$",
              "default": "15m",
              "examples": [
                "1h",
                "1m",
                "30s"
              ]
            },
            "allow_fallback_on_error": {
              "type": "boolean",
              "description": "Whether the pipeline should fallback to a next authenticator if this one fails validating the given credentials",
              "default": false
            }
          }
        }
      }
    },
    "authenticatorJwt": {
      "description": "JWT Authenticator",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "const": "jwt"
        },
        "id": {
          "description": "The unique id of the authenticator to be used in the rule definition",
          "type": "string"
        },
        "config": {
          "description": "JWT Authenticator Configuration",
          "type": "object",
          "additionalProperties": false,
          "oneOf": [
            {
              "required": [
                "jwks_endpoint"
              ]
            },
            {
              "required": [
                "metadata_endpoint"
              ]
            }
          ],
          "properties": {
            "jwks_endpoint": {
              "$ref": "#/definitions/endpointConfiguration"
            },
            "metadata_endpoint": {
              "$ref": "#/definitions/metadataEndpointConfiguration"
            },
            "jwt_source": {
              "$ref": "#/definitions/authenticationDataSource"
            },
            "assertions": {
              "$ref": "#/definitions/assertionRequirements"
            },
            "subject": {
              "$ref": "#/definitions/subjectConfiguration"
            },
            "cache_ttl": {
              "type": "string",
              "description": "How long to cache the key received from the JWKS endpoint.",
              "pattern": "^[0-9]+(ns|us|ms|s|m|h)$",
              "default": "15m",
              "examples": [
                "1h",
                "1m",
                "30s"
              ]
            },
            "allow_fallback_on_error": {
              "type": "boolean",
              "description": "Whether the pipeline should fallback to a next authenticator if this one fails validating the given credentials",
              "default": false
            },
            "validate_jwk": {
              "type": "boolean",
              "description": "Whether the certificate chain (if present) in the JWK should be validated",
              "default": true
            },
            "trust_store": {
              "type": "string",
              "description": "The path to the trust store PEM file, which contains the trust anchors used for JWK certificate verification purposes",
              "default": "system trust store"
            }
          }
        }
      }
    },
    "authenticatorBasicAuth": {
      "description": "Basic Auth Authenticator",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "const": "basic_auth"
        },
        "id": {
          "description": "The unique id of the authenticator to be used in the rule definition",
          "type": "string"
        },
        "config": {
          "description": "Basic Auth Authenticator Configuration",
          "type": "object",
          "additionalProperties": false,
          "required": [
            "user_id",
            "password"
          ],
          "properties": {
            "user_id": {
              "description": "The user id, respectively the user name for the authentication scheme",
              "type": "string"
            },
            "password": {
              "description": "The password for the client_id for the authentication scheme",
              "type": "string"
            },
            "allow_fallback_on_error": {
              "type": "boolean",
              "description": "Whether the pipeline should fallback to a next authenticator if this one fails validating the given credentials",
              "default": false
            }
          }
        }
      }
    },
    "authorizerAllow": {
      "description": "Allow Authorizer",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "const": "allow"
        },
        "id": {
          "description": "The unique id of the authorizer to be used in the rule definition",
          "type": "string"
        }
      }
    },
    "authorizerDeny": {
      "description": "Deny Authorizer",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "const": "deny"
        },
        "id": {
          "description": "The unique id of the authorizer to be used in the rule definition",
          "type": "string"
        }
      }
    },
    "authorizerLocalCEL": {
      "description": "Authorizer, which acts on subject attributes and the request context by using a CEL",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "const": "cel"
        },
        "id": {
          "description": "The unique id of the authorizer to be used in the rule definition",
          "type": "string"
        },
        "config": {
          "description": "Local Authorizer Configuration",
          "type": "object",
          "additionalProperties": false,
          "required": [
            "expressions"
          ],
          "properties": {
            "expressions": {
              "$ref": "#/definitions/expressionList"
            }
          }
        }
      }
    },
    "authorizerRemote": {
      "description": "Remote Authorizer",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "const": "remote"
        },
        "id": {
          "description": "The unique id of the authorizer to be used in the rule definition",
          "type": "string"
        },
        "config": {
          "description": "Remote Authorizer Configuration",
          "type": "object",
          "additionalProperties": false,
          "required": [
            "endpoint"
          ],
          "properties": {
            "endpoint": {
              "$ref": "#/definitions/endpointConfiguration"
            },
            "payload": {
              "description": "The Go template with access to heimdall.Context and Subject used for request's HTTP body generation",
              "type": "string"
            },
            "expressions": {
              "$ref": "#/definitions/expressionList"
            },
            "forward_response_headers_to_upstream": {
              "description": "A list of headers to forward to the upstream service.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "uniqueItems": true
            },
            "cache_ttl": {
              "type": "string",
              "description": "How long to cache the response received from the authorization endpoint. 0 or less means no caching",
              "pattern": "^[0-9]+(ns|us|ms|s|m|h)$",
              "default": "0",
              "examples": [
                "1h",
                "1m",
                "30s"
              ]
            },
            "values": {
              "description": "Key-Value map with entries required for templating of e.g. the endpoint URL",
              "type": "object",
              "minLength": 0,
              "uniqueItems": true,
              "default": []
            }
          }
        }
      }
    },
    "contextualizerGeneric": {
      "description": "Generic Contextualizer",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "type",
        "id",
        "config"
      ],
      "properties": {
        "type": {
          "const": "generic"
        },
        "id": {
          "description": "The unique id of the contextualizers to be used in the rule definition",
          "type": "string"
        },
        "config": {
          "description": "Generic Contextualizer Configuration",
          "type": "object",
          "additionalProperties": false,
          "required": [
            "endpoint"
          ],
          "properties": {
            "endpoint": {
              "$ref": "#/definitions/endpointConfiguration"
            },
            "forward_headers": {
              "description": "The HTTP header names from the request to be send to the contextualizer endpoint",
              "type": "array",
              "additionalItems": false,
              "items": {
                "type": "string"
              }
            },
            "forward_cookies": {
              "description": "The HTTP cookie names from the request to be send to the contextualizer endpoint",
              "type": "array",
              "additionalItems": false,
              "items": {
                "type": "string"
              }
            },
            "payload": {
              "description": "The Go template with access to heimdall. Request and Subject used for request's HTTP body generation",
              "type": "string"
            },
            "cache_ttl": {
              "type": "string",
              "description": "How long to cache the response from the contextualization endpoint.",
              "pattern": "^[0-9]+(ns|us|ms|s|m|h)$",
              "default": "15m",
              "examples": [
                "1h",
                "1m",
                "30s"
              ]
            },
            "continue_pipeline_on_error": {
              "type": "boolean",
              "description": "Continue the pipeline execution even if this contextualizer fails",
              "default": false
            },
            "values": {
              "description": "Key-Value map with entries required for templating of e.g. the endpoint URL",
              "type": "object",
              "minLength": 0,
              "uniqueItems": true,
              "default": []
            }
          }
        }
      }
    },
    "finalizerJwt": {
      "description": "Creates a JWT Token from the available subject and request information to be passed to the upstream service",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id",
        "type"
      ],
      "properties": {
        "type": {
          "const": "jwt"
        },
        "id": {
          "description": "The unique id of the finalizer to be used in the rule definition",
          "type": "string"
        },
        "config": {
          "description": "JWT finalizer configuration",
          "type": "object",
          "additionalProperties": false,
          "required": [
            "claims"
          ],
          "properties": {
            "claims": {
              "description": "Custom claims, which should be included into the JWT.",
              "type": "string"
            },
            "ttl": {
              "description": "Sets the time-to-live of the JWT.",
              "type": "string",
              "pattern": "^[0-9]+(ns|us|ms|s|m|h)$",
              "default": "15m",
              "examples": [
                "1h",
                "1m",
                "30s"
              ]
            },
            "header": {
              "description": "Header configuration",
              "type": "object",
              "additionalProperties": false,
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "type": "string"
                },
                "scheme": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "finalizerHeader": {
      "description": "Allowing passing any information to the upstream service via headers",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id",
        "type",
        "config"
      ],
      "properties": {
        "type": {
          "const": "header"
        },
        "id": {
          "description": "The unique id of the finalizer to be used in the rule definition",
          "type": "string"
        },
        "config": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "headers"
          ],
          "properties": {
            "headers": {
              "description": "HTTP headers to be send to the upstream service",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "uniqueItems": true
            }
          }
        }
      }
    },
    "finalizerCookie": {
      "description": "Transforms the request, allowing passing the credentials to the upstream service via cookies",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id",
        "type",
        "config"
      ],
      "properties": {
        "type": {
          "const": "cookie"
        },
        "id": {
          "description": "The unique id of the finalizer to be used in the rule definition",
          "type": "string"
        },
        "config": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "cookies"
          ],
          "properties": {
            "cookies": {
              "description": "HTTP cookies to be send to the upstream service",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "uniqueItems": true
            }
          }
        }
      }
    },
    "finalizerNoop": {
      "description": "Does nothing",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "const": "noop"
        },
        "id": {
          "description": "The unique id of the finalizer to be used in the rule definition",
          "type": "string"
        }
      }
    },
    "finalizerClientCredentials": {
      "description": "Drives the OAuth2 client credentials flow and adds the corresponding token to the headers for the upstream",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id",
        "type",
        "config"
      ],
      "properties": {
        "type": {
          "const": "oauth2_client_credentials"
        },
        "id": {
          "description": "The unique id of the finalizer to be used in the rule definition",
          "type": "string"
        },
        "config": {
          "$ref": "#/definitions/oauth2ClientCredentialsFlowConfig"
        }
      }
    },
    "errorType": {
      "description": "Error type",
      "type": "string",
      "enum": [
        "authentication_error",
        "authorization_error",
        "internal_error",
        "precondition_error"
      ]
    },
    "errorsHandlerDefault": {
      "description": "Regular error handler, which just converts the error based on the information available in the HTTP Accept header",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id",
        "type"
      ],
      "properties": {
        "type": {
          "const": "default"
        },
        "id": {
          "description": "The unique id of the error handler to be used in the rule definition",
          "type": "string"
        }
      }
    },
    "errorHandlerWWWAuthenticate": {
      "description": "WWW-Authenticate Error Handler",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id",
        "type",
        "if",
        "config"
      ],
      "properties": {
        "type": {
          "const": "www-authenticate"
        },
        "id": {
          "description": "The unique id of the error handler to be used in the rule definition",
          "type": "string"
        },
        "if": {
          "description": "Condition, when this error handler should be executed",
          "type": "string",
          "examples": [
            "type(Error) == authentication_error"
          ]
        },
        "config": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "realm": {
              "description": "Message that will be displayed by the browser. Most browsers show a message like \"The website says: `,<realm>`\". Using a real message is thus more appropriate than a Realm identifier.",
              "type": "string",
              "default": "Please authenticate."
            }
          }
        }
      }
    },
    "errorsHandlerRedirect": {
      "description": "Redirect Error Handler",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id",
        "type",
        "if",
        "config"
      ],
      "properties": {
        "type": {
          "const": "redirect"
        },
        "id": {
          "description": "The unique id of the error handler to be used in the rule definition",
          "type": "string"
        },
        "if": {
          "description": "Condition, when this error handler should be executed",
          "type": "string",
          "examples": [
            "type(Error) == authentication_error"
          ]
        },
        "config": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "to"
          ],
          "properties": {
            "to": {
              "description": "Set the redirect target. Can either be a http/https URL, or a relative URL.",
              "type": "string",
              "examples": [
                "http://my-app.com/dashboard",
                "https://my-app.com/dashboard",
                "/dashboard"
              ]
            },
            "code": {
              "description": "Defines the HTTP Redirect status code which can be 301 (Moved Permanently) or 302 (Found).",
              "type": "integer",
              "enum": [
                301,
                302
              ],
              "default": 302
            }
          }
        }
      }
    },
    "fileSystemProvider": {
      "description": "Enables file backend to load rules from",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "src"
      ],
      "properties": {
        "watch": {
          "description": "watch this provider for changes",
          "type": "boolean",
          "default": false
        },
        "src": {
          "description": "Load rules from one or more rule files. Can be a directory containing ruleset files or a single ruleset file",
          "type": "string"
        },
        "env_vars_enabled": {
          "description": "whether to enable env var usage",
          "type": "boolean",
          "default": false
        }
      }
    },
    "httpEndpointProvider": {
      "description": "Enables http(s) backend to load rules from",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "endpoints"
      ],
      "properties": {
        "endpoints": {
          "type": "array",
          "additionalItems": false,
          "items": {
            "$ref": "#/definitions/ruleSetEndpointConfiguration"
          }
        },
        "watch_interval": {
          "type": "string",
          "description": "How often to poll the endpoint for rule set updates. Polling is disabled by default.",
          "pattern": "^[0-9]+(ns|us|ms|s|m|h)$",
          "default": "0",
          "examples": [
            "1h",
            "1m",
            "30s"
          ]
        }
      }
    },
    "cloudBlobProvider": {
      "description": "Enables cloud blob backend to load rules from cloud buckets",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "buckets"
      ],
      "properties": {
        "buckets": {
          "type": "array",
          "additionalItems": false,
          "items": {
            "type": "object",
            "required": [
              "url"
            ],
            "additionalProperties": false,
            "properties": {
              "url": {
                "title": "The URL to the bucket or a single blob in the bucket",
                "description": "If only a bucket is specified, all available blobs are loaded, optionally filtered by the prefix",
                "type": "string",
                "format": "uri",
                "examples": [
                  "s3://my-bucket",
                  "s3://my-bucket?region=us-west-1",
                  "s3://my-bucket/rule_set",
                  "gs://my-bucket",
                  "gs://my-bucket/rule_set",
                  "azblob://my-bucket/rule_set"
                ]
              },
              "prefix": {
                "description": "Indicates that only blobs with a key starting with this prefix should be retrieved",
                "type": "string"
              },
              "rule_path_match_prefix": {
                "description": "The path prefix to be checked in each url pattern of each rule retrieved from the bucket",
                "type": "string",
                "examples": [
                  "/foo/bar"
                ]
              }
            }
          }
        },
        "watch_interval": {
          "type": "string",
          "description": "How often to poll the endpoint for rule set updates. Polling is disabled by default.",
          "pattern": "^[0-9]+(ns|us|ms|s|m|h)$",
          "default": "0",
          "examples": [
            "1h",
            "1m",
            "30s"
          ]
        }
      }
    },
    "kubernetesProvider": {
      "description": "Enables kubernetes controller to load rules deployed as CRD",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "auth_class": {
          "type": "string",
          "description": "The class of this heimdall setup in the cluster. Used to filter for CRDs. Only CRDs with the same auth class will be considered and loaded",
          "default": "default"
        },
        "tls": {
          "$ref": "#/definitions/tlsConfig"
        }
      }
    },
    "mechanismDefinitions": {
      "description": "Individual pipeline mechanisms used by rules",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "authenticators",
        "finalizers"
      ],
      "properties": {
        "error_handlers": {
          "description": "Individual error handler configurations",
          "type": "array",
          "additionalItems": false,
          "items": {
            "anyOf": [
              {
                "$ref": "#/definitions/errorHandlerWWWAuthenticate"
              },
              {
                "$ref": "#/definitions/errorsHandlerRedirect"
              },
              {
                "$ref": "#/definitions/errorsHandlerDefault"
              }
            ]
          }
        },
        "authenticators": {
          "description": "Authenticators",
          "type": "array",
          "additionalItems": false,
          "uniqueItems": true,
          "items": {
            "anyOf": [
              {
                "$ref": "#/definitions/authenticatorAnonymous"
              },
              {
                "$ref": "#/definitions/authenticatorUnauthorized"
              },
              {
                "$ref": "#/definitions/authenticatorGeneric"
              },
              {
                "$ref": "#/definitions/authenticatorOAuth2Introspection"
              },
              {
                "$ref": "#/definitions/authenticatorJwt"
              },
              {
                "$ref": "#/definitions/authenticatorBasicAuth"
              }
            ]
          }
        },
        "authorizers": {
          "description": "Authorizers",
          "type": "array",
          "additionalItems": false,
          "uniqueItems": true,
          "items": {
            "anyOf": [
              {
                "$ref": "#/definitions/authorizerAllow"
              },
              {
                "$ref": "#/definitions/authorizerDeny"
              },
              {
                "$ref": "#/definitions/authorizerRemote"
              },
              {
                "$ref": "#/definitions/authorizerLocalCEL"
              }
            ]
          }
        },
        "contextualizers": {
          "description": "Contextualizer",
          "type": "array",
          "additionalItems": false,
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/contextualizerGeneric"
          }
        },
        "finalizers": {
          "description": "Finalizers",
          "type": "array",
          "additionalItems": false,
          "uniqueItems": true,
          "items": {
            "anyOf": [
              {
                "$ref": "#/definitions/finalizerNoop"
              },
              {
                "$ref": "#/definitions/finalizerJwt"
              },
              {
                "$ref": "#/definitions/finalizerHeader"
              },
              {
                "$ref": "#/definitions/finalizerCookie"
              },
              {
                "$ref": "#/definitions/finalizerClientCredentials"
              }
            ]
          }
        }
      }
    }
  },
  "properties": {
    "version": {
      "description": "The Heimdall version this config is written for. SemVer according to https://semver.org/ prefixed with `v` as in our releases.",
      "type": "string",
      "pattern": "^v(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$"
    },
    "serve": {
      "description": "HTTP(s) configuration of exposed services",
      "additionalProperties": false,
      "type": "object",
      "properties": {
        "decision": {
          "description": "Decision service Configuration",
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "port": {
              "description": "The port to listen on.",
              "type": "integer"
            },
            "host": {
              "description": "The network interface to listen on.",
              "type": "string",
              "default": "",
              "examples": [
                "localhost",
                "127.0.0.1"
              ]
            },
            "timeout": {
              "$ref": "#/definitions/timeoutConfig"
            },
            "buffer_limit": {
              "$ref": "#/definitions/bufferLimitConfig"
            },
            "tls": {
              "$ref": "#/definitions/tlsConfig"
            },
            "trusted_proxies": {
              "description": "The list IPs or CIDRs heimdall should trust and thus make use of headers, like X-Forwarded-*, Forwarded, etc",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "respond": {
              "$ref": "#/definitions/respondWithConfig"
            }
          }
        },
        "proxy": {
          "description": "Proxy service configuration",
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "port": {
              "description": "The port to listen on.",
              "type": "integer"
            },
            "host": {
              "description": "The network interface to listen on.",
              "type": "string",
              "default": "",
              "examples": [
                "localhost",
                "127.0.0.1"
              ]
            },
            "timeout": {
              "$ref": "#/definitions/timeoutConfig"
            },
            "buffer_limit": {
              "$ref": "#/definitions/bufferLimitConfig"
            },
            "connections_limit": {
              "$ref": "#/definitions/connectionsLimitConfig"
            },
            "cors": {
              "$ref": "#/definitions/corsConfig"
            },
            "tls": {
              "$ref": "#/definitions/tlsConfig"
            },
            "trusted_proxies": {
              "description": "The list IPs or CIDRs heimdall should trust and thus make use of headers, like X-Forwarded-*, Forwarded, etc",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "respond": {
              "$ref": "#/definitions/respondWithConfig"
            }
          }
        },
        "management": {
          "description": "Management service configuration",
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "port": {
              "description": "The port to listen on.",
              "type": "integer"
            },
            "host": {
              "description": "The network interface to listen on.",
              "type": "string",
              "default": "",
              "examples": [
                "localhost",
                "127.0.0.1"
              ]
            },
            "timeout": {
              "$ref": "#/definitions/timeoutConfig"
            },
            "buffer_limit": {
              "$ref": "#/definitions/bufferLimitConfig"
            },
            "cors": {
              "$ref": "#/definitions/corsConfig"
            },
            "tls": {
              "$ref": "#/definitions/tlsConfig"
            },
            "trusted_proxies": {
              "description": "The list IPs or CIDRs heimdall should trust and thus make use of headers, like X-Forwarded-*, Forwarded, etc",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "log": {
      "description": "Logging configuration. Logging will always be sent to stdout and stderr.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "level": {
          "description": "Debug enables stack traces on errors. Can also be set using environment variable LOG_LEVEL.",
          "type": "string",
          "default": "info",
          "enum": [
            "trace",
            "debug",
            "info",
            "warning",
            "error",
            "fatal",
            "panic"
          ]
        },
        "format": {
          "description": "The log format can either be 'text' or 'gelf'. If format is not recognized, 'gelf' format is used",
          "type": "string",
          "enum": [
            "gelf",
            "text"
          ],
          "default": "gelf"
        }
      }
    },
    "metrics": {
      "description": "Configures the metrics endpoint",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "enabled": {
          "description": "Whether exposure of metrics is enabled or not",
          "type": "boolean",
          "default": true
        }
      }
    },
    "tracing": {
      "description": "Configures opentelemetry tracing options",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "enabled": {
          "description": "Whether tracing is enabled or not",
          "type": "boolean",
          "default": true
        },
        "span_processor": {
          "description": "The type of the span processor to use",
          "type": "string",
          "default": "batch",
          "enum": [
            "simple",
            "batch"
          ]
        }
      }
    },
    "profiling": {
      "description": "Configures CPU & memory profiling options",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "enabled": {
          "description": "Whether profiling is enabled or not",
          "type": "boolean",
          "default": false
        },
        "port": {
          "description": "The port to listen on.",
          "type": "integer",
          "default": 10251
        },
        "host": {
          "description": "The network interface to listen on. Leave empty to listen on all interfaces.",
          "type": "string",
          "default": "",
          "examples": [
            "localhost",
            "127.0.0.1"
          ]
        }
      }
    },
    "signer": {
      "description": "Configures signer options for issued JWTs.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "name": {
          "description": "The name of the signer (string or URL). Used for the 'iss' claim in the issued JWTs",
          "type": "string",
          "default": "heimdall"
        },
        "key_store": {
          "$ref": "#/definitions/keyStore"
        },
        "key_id": {
          "description": "The key id referencing the entry in the key store.",
          "type": "string"
        }
      }
    },
    "mechanisms": {
      "$ref": "#/definitions/mechanismDefinitions"
    },
    "providers": {
      "description": "Where to load rules from",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "file_system": {
          "$ref": "#/definitions/fileSystemProvider"
        },
        "http_endpoint": {
          "$ref": "#/definitions/httpEndpointProvider"
        },
        "cloud_blob": {
          "$ref": "#/definitions/cloudBlobProvider"
        },
        "kubernetes": {
          "$ref": "#/definitions/kubernetesProvider"
        }
      }
    },
    "default_rule": {
      "description": "Defines the defaults, respectively fallbacks for any rule.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "methods": {
          "description": "Allowed HTTP methods for any endpoint",
          "type": "array",
          "additionalItems": false,
          "uniqueItems": true,
          "items": {
            "type": "string"
          },
          "examples": [
            "GET",
            "POST"
          ]
        },
        "execute": {
          "description": "The mechanisms to execute (authenticators, authorizers, etc)",
          "type": "array",
          "additionalItems": false,
          "uniqueItems": true,
          "items": {
            "type": "object"
          }
        },
        "on_error": {
          "description": "error handler mechanisms",
          "type": "array",
          "additionalItems": false,
          "uniqueItems": true,
          "items": {
            "type": "object"
          }
        }
      }
    }
  }
}
